
Project_Diff_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b934  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000974  0800bac8  0800bac8  0001bac8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c43c  0800c43c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c43c  0800c43c  0001c43c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c444  0800c444  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c444  0800c444  0001c444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c448  0800c448  0001c448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800c44c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000040bc  200001e4  0800c630  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200042a0  0800c630  000242a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023ff5  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004168  00000000  00000000  00044209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001878  00000000  00000000  00048378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016b0  00000000  00000000  00049bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b732  00000000  00000000  0004b2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f247  00000000  00000000  000769d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010ad83  00000000  00000000  00095c19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a099c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000785c  00000000  00000000  001a09f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800baac 	.word	0x0800baac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800baac 	.word	0x0800baac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <GFX_draw_char>:
    @param    size_x  Font magnification level in X-axis, 1 is 'original' size
    @param    size_y  Font magnification level in Y-axis, 1 is 'original' size
*/
/**************************************************************************/
void GFX_draw_char(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y)
{
 8000ea0:	b590      	push	{r4, r7, lr}
 8000ea2:	b087      	sub	sp, #28
 8000ea4:	af02      	add	r7, sp, #8
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	4611      	mov	r1, r2
 8000eac:	461a      	mov	r2, r3
 8000eae:	4623      	mov	r3, r4
 8000eb0:	80fb      	strh	r3, [r7, #6]
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	80bb      	strh	r3, [r7, #4]
 8000eb6:	460b      	mov	r3, r1
 8000eb8:	70fb      	strb	r3, [r7, #3]
 8000eba:	4613      	mov	r3, r2
 8000ebc:	803b      	strh	r3, [r7, #0]
	int8_t i, j;
	uint8_t line;

	if((x >= WIDTH) || (y >= HEIGHT) || ((x + 6 * size_x - 1) < 0) || ((y + 8 * size_y - 1) < 0))
 8000ebe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ec2:	2b7f      	cmp	r3, #127	; 0x7f
 8000ec4:	f300 8100 	bgt.w	80010c8 <GFX_draw_char+0x228>
 8000ec8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ecc:	2b1f      	cmp	r3, #31
 8000ece:	f300 80fb 	bgt.w	80010c8 <GFX_draw_char+0x228>
 8000ed2:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000ed6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000eda:	4613      	mov	r3, r2
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	4413      	add	r3, r2
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	440b      	add	r3, r1
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	f340 80ef 	ble.w	80010c8 <GFX_draw_char+0x228>
 8000eea:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000eee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000ef2:	00db      	lsls	r3, r3, #3
 8000ef4:	4413      	add	r3, r2
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	f340 80e6 	ble.w	80010c8 <GFX_draw_char+0x228>
	{
		return;
	}

	for(i = 0; i < 5; i++)  // Char bitmap = 5 columns
 8000efc:	2300      	movs	r3, #0
 8000efe:	73fb      	strb	r3, [r7, #15]
 8000f00:	e0aa      	b.n	8001058 <GFX_draw_char+0x1b8>
	{
		line = (*(const unsigned char *)(&font[c * 5 + i]));
 8000f02:	78fa      	ldrb	r2, [r7, #3]
 8000f04:	4613      	mov	r3, r2
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	441a      	add	r2, r3
 8000f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f0e:	4413      	add	r3, r2
 8000f10:	4a6f      	ldr	r2, [pc, #444]	; (80010d0 <GFX_draw_char+0x230>)
 8000f12:	5cd3      	ldrb	r3, [r2, r3]
 8000f14:	737b      	strb	r3, [r7, #13]
		for(j = 7; j >= 0; j--, line >>= 1)
 8000f16:	2307      	movs	r3, #7
 8000f18:	73bb      	strb	r3, [r7, #14]
 8000f1a:	e092      	b.n	8001042 <GFX_draw_char+0x1a2>
		{
			if(line & 1)
 8000f1c:	7b7b      	ldrb	r3, [r7, #13]
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d040      	beq.n	8000fa8 <GFX_draw_char+0x108>
			{
				if(size_x == 1 && size_y == 1)
 8000f26:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d116      	bne.n	8000f5c <GFX_draw_char+0xbc>
 8000f2e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d112      	bne.n	8000f5c <GFX_draw_char+0xbc>
				{
					SSD1306_draw_pixel(x + i, y + j, color);
 8000f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	88fb      	ldrh	r3, [r7, #6]
 8000f3e:	4413      	add	r3, r2
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	b218      	sxth	r0, r3
 8000f44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f48:	b29a      	uxth	r2, r3
 8000f4a:	88bb      	ldrh	r3, [r7, #4]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	b21b      	sxth	r3, r3
 8000f52:	883a      	ldrh	r2, [r7, #0]
 8000f54:	4619      	mov	r1, r3
 8000f56:	f000 fa6d 	bl	8001434 <SSD1306_draw_pixel>
 8000f5a:	e069      	b.n	8001030 <GFX_draw_char+0x190>
				}
				else
				{
					GFX_draw_fill_rect(x + i * size_x, y + j * size_y, size_x, size_y, color);
 8000f5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f60:	b29a      	uxth	r2, r3
 8000f62:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	fb12 f303 	smulbb	r3, r2, r3
 8000f6c:	b29a      	uxth	r2, r3
 8000f6e:	88fb      	ldrh	r3, [r7, #6]
 8000f70:	4413      	add	r3, r2
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	b218      	sxth	r0, r3
 8000f76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f7a:	b29a      	uxth	r2, r3
 8000f7c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000f80:	b29b      	uxth	r3, r3
 8000f82:	fb12 f303 	smulbb	r3, r2, r3
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	88bb      	ldrh	r3, [r7, #4]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	b219      	sxth	r1, r3
 8000f90:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000f94:	b21a      	sxth	r2, r3
 8000f96:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000f9a:	b21c      	sxth	r4, r3
 8000f9c:	883b      	ldrh	r3, [r7, #0]
 8000f9e:	9300      	str	r3, [sp, #0]
 8000fa0:	4623      	mov	r3, r4
 8000fa2:	f000 f8d0 	bl	8001146 <GFX_draw_fill_rect>
 8000fa6:	e043      	b.n	8001030 <GFX_draw_char+0x190>
				}
			}
			else if(bg != color)
 8000fa8:	8c3a      	ldrh	r2, [r7, #32]
 8000faa:	883b      	ldrh	r3, [r7, #0]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d03f      	beq.n	8001030 <GFX_draw_char+0x190>
			{
				if(size_x == 1 && size_y == 1)
 8000fb0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d116      	bne.n	8000fe6 <GFX_draw_char+0x146>
 8000fb8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d112      	bne.n	8000fe6 <GFX_draw_char+0x146>
				{
					SSD1306_draw_pixel(x + i, y + j, bg);
 8000fc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc4:	b29a      	uxth	r2, r3
 8000fc6:	88fb      	ldrh	r3, [r7, #6]
 8000fc8:	4413      	add	r3, r2
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	b218      	sxth	r0, r3
 8000fce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000fd2:	b29a      	uxth	r2, r3
 8000fd4:	88bb      	ldrh	r3, [r7, #4]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	b21b      	sxth	r3, r3
 8000fdc:	8c3a      	ldrh	r2, [r7, #32]
 8000fde:	4619      	mov	r1, r3
 8000fe0:	f000 fa28 	bl	8001434 <SSD1306_draw_pixel>
 8000fe4:	e024      	b.n	8001030 <GFX_draw_char+0x190>
				}
				else
				{
					GFX_draw_fill_rect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 8000fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fea:	b29a      	uxth	r2, r3
 8000fec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	fb12 f303 	smulbb	r3, r2, r3
 8000ff6:	b29a      	uxth	r2, r3
 8000ff8:	88fb      	ldrh	r3, [r7, #6]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	b218      	sxth	r0, r3
 8001000:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001004:	b29a      	uxth	r2, r3
 8001006:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800100a:	b29b      	uxth	r3, r3
 800100c:	fb12 f303 	smulbb	r3, r2, r3
 8001010:	b29a      	uxth	r2, r3
 8001012:	88bb      	ldrh	r3, [r7, #4]
 8001014:	4413      	add	r3, r2
 8001016:	b29b      	uxth	r3, r3
 8001018:	b219      	sxth	r1, r3
 800101a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800101e:	b21a      	sxth	r2, r3
 8001020:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001024:	b21c      	sxth	r4, r3
 8001026:	8c3b      	ldrh	r3, [r7, #32]
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	4623      	mov	r3, r4
 800102c:	f000 f88b 	bl	8001146 <GFX_draw_fill_rect>
		for(j = 7; j >= 0; j--, line >>= 1)
 8001030:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001034:	b2db      	uxtb	r3, r3
 8001036:	3b01      	subs	r3, #1
 8001038:	b2db      	uxtb	r3, r3
 800103a:	73bb      	strb	r3, [r7, #14]
 800103c:	7b7b      	ldrb	r3, [r7, #13]
 800103e:	085b      	lsrs	r3, r3, #1
 8001040:	737b      	strb	r3, [r7, #13]
 8001042:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001046:	2b00      	cmp	r3, #0
 8001048:	f6bf af68 	bge.w	8000f1c <GFX_draw_char+0x7c>
	for(i = 0; i < 5; i++)  // Char bitmap = 5 columns
 800104c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001050:	b2db      	uxtb	r3, r3
 8001052:	3301      	adds	r3, #1
 8001054:	b2db      	uxtb	r3, r3
 8001056:	73fb      	strb	r3, [r7, #15]
 8001058:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800105c:	2b04      	cmp	r3, #4
 800105e:	f77f af50 	ble.w	8000f02 <GFX_draw_char+0x62>
				}
			}
		}
	}

	if(bg != color) // If opaque, draw vertical line for last column
 8001062:	8c3a      	ldrh	r2, [r7, #32]
 8001064:	883b      	ldrh	r3, [r7, #0]
 8001066:	429a      	cmp	r2, r3
 8001068:	d02f      	beq.n	80010ca <GFX_draw_char+0x22a>
	{
		if(size_x == 1 && size_y == 1)
 800106a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800106e:	2b01      	cmp	r3, #1
 8001070:	d10e      	bne.n	8001090 <GFX_draw_char+0x1f0>
 8001072:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001076:	2b01      	cmp	r3, #1
 8001078:	d10a      	bne.n	8001090 <GFX_draw_char+0x1f0>
		{
			SSD1306_draw_fast_vline(x + 5, y, 8, bg);
 800107a:	88fb      	ldrh	r3, [r7, #6]
 800107c:	3305      	adds	r3, #5
 800107e:	b29b      	uxth	r3, r3
 8001080:	b218      	sxth	r0, r3
 8001082:	8c3b      	ldrh	r3, [r7, #32]
 8001084:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001088:	2208      	movs	r2, #8
 800108a:	f000 fb4d 	bl	8001728 <SSD1306_draw_fast_vline>
 800108e:	e01c      	b.n	80010ca <GFX_draw_char+0x22a>
		}
		else
		{
			GFX_draw_fill_rect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
 8001090:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001094:	b29b      	uxth	r3, r3
 8001096:	461a      	mov	r2, r3
 8001098:	0092      	lsls	r2, r2, #2
 800109a:	4413      	add	r3, r2
 800109c:	b29a      	uxth	r2, r3
 800109e:	88fb      	ldrh	r3, [r7, #6]
 80010a0:	4413      	add	r3, r2
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	b218      	sxth	r0, r3
 80010a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80010aa:	b21a      	sxth	r2, r3
 80010ac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	00db      	lsls	r3, r3, #3
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	b21c      	sxth	r4, r3
 80010b8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80010bc:	8c3b      	ldrh	r3, [r7, #32]
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	4623      	mov	r3, r4
 80010c2:	f000 f840 	bl	8001146 <GFX_draw_fill_rect>
 80010c6:	e000      	b.n	80010ca <GFX_draw_char+0x22a>
		return;
 80010c8:	bf00      	nop
		}
	}
}
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd90      	pop	{r4, r7, pc}
 80010d0:	0800bb00 	.word	0x0800bb00

080010d4 <GFX_draw_string>:
    @param    size_x  Font magnification level in X-axis, 1 is 'original' size
    @param    size_y  Font magnification level in Y-axis, 1 is 'original' size
*/
/**************************************************************************/
void GFX_draw_string(int16_t x, int16_t y, unsigned char * c, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y)
{
 80010d4:	b590      	push	{r4, r7, lr}
 80010d6:	b08b      	sub	sp, #44	; 0x2c
 80010d8:	af04      	add	r7, sp, #16
 80010da:	60ba      	str	r2, [r7, #8]
 80010dc:	461a      	mov	r2, r3
 80010de:	4603      	mov	r3, r0
 80010e0:	81fb      	strh	r3, [r7, #14]
 80010e2:	460b      	mov	r3, r1
 80010e4:	81bb      	strh	r3, [r7, #12]
 80010e6:	4613      	mov	r3, r2
 80010e8:	80fb      	strh	r3, [r7, #6]
	uint8_t offset = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	75fb      	strb	r3, [r7, #23]
	while(*c)
 80010ee:	e021      	b.n	8001134 <GFX_draw_string+0x60>
	{
		GFX_draw_char(x+offset, y, *c, color, bg, size_x, size_y);
 80010f0:	7dfb      	ldrb	r3, [r7, #23]
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	89fb      	ldrh	r3, [r7, #14]
 80010f6:	4413      	add	r3, r2
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	b218      	sxth	r0, r3
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	781a      	ldrb	r2, [r3, #0]
 8001100:	88fc      	ldrh	r4, [r7, #6]
 8001102:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001106:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800110a:	9302      	str	r3, [sp, #8]
 800110c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001110:	9301      	str	r3, [sp, #4]
 8001112:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	4623      	mov	r3, r4
 8001118:	f7ff fec2 	bl	8000ea0 <GFX_draw_char>
		offset += (5 + 2) * size_x;
 800111c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001120:	461a      	mov	r2, r3
 8001122:	00d2      	lsls	r2, r2, #3
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	b2da      	uxtb	r2, r3
 8001128:	7dfb      	ldrb	r3, [r7, #23]
 800112a:	4413      	add	r3, r2
 800112c:	75fb      	strb	r3, [r7, #23]
		c++;
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	3301      	adds	r3, #1
 8001132:	60bb      	str	r3, [r7, #8]
	while(*c)
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d1d9      	bne.n	80010f0 <GFX_draw_string+0x1c>
	}
}
 800113c:	bf00      	nop
 800113e:	bf00      	nop
 8001140:	371c      	adds	r7, #28
 8001142:	46bd      	mov	sp, r7
 8001144:	bd90      	pop	{r4, r7, pc}

08001146 <GFX_draw_fill_rect>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void GFX_draw_fill_rect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8001146:	b590      	push	{r4, r7, lr}
 8001148:	b085      	sub	sp, #20
 800114a:	af00      	add	r7, sp, #0
 800114c:	4604      	mov	r4, r0
 800114e:	4608      	mov	r0, r1
 8001150:	4611      	mov	r1, r2
 8001152:	461a      	mov	r2, r3
 8001154:	4623      	mov	r3, r4
 8001156:	80fb      	strh	r3, [r7, #6]
 8001158:	4603      	mov	r3, r0
 800115a:	80bb      	strh	r3, [r7, #4]
 800115c:	460b      	mov	r3, r1
 800115e:	807b      	strh	r3, [r7, #2]
 8001160:	4613      	mov	r3, r2
 8001162:	803b      	strh	r3, [r7, #0]
	for(int16_t i = x; i < x + w; i++)
 8001164:	88fb      	ldrh	r3, [r7, #6]
 8001166:	81fb      	strh	r3, [r7, #14]
 8001168:	e00e      	b.n	8001188 <GFX_draw_fill_rect+0x42>
	{
		SSD1306_draw_fast_vline(i, y, h, color);
 800116a:	8c3b      	ldrh	r3, [r7, #32]
 800116c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001170:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001174:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8001178:	f000 fad6 	bl	8001728 <SSD1306_draw_fast_vline>
	for(int16_t i = x; i < x + w; i++)
 800117c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001180:	b29b      	uxth	r3, r3
 8001182:	3301      	adds	r3, #1
 8001184:	b29b      	uxth	r3, r3
 8001186:	81fb      	strh	r3, [r7, #14]
 8001188:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800118c:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001190:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001194:	440b      	add	r3, r1
 8001196:	429a      	cmp	r2, r3
 8001198:	dbe7      	blt.n	800116a <GFX_draw_fill_rect+0x24>
	}
}
 800119a:	bf00      	nop
 800119c:	bf00      	nop
 800119e:	3714      	adds	r7, #20
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd90      	pop	{r4, r7, pc}

080011a4 <WykonajPomiar>:
 */

char str[NUMBER_OF_CHAR_ON_DISPLAY];
uint32_t iterator=0;

void WykonajPomiar(ADC_pomiary *czujnik){
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]


	HAL_ADC_Start(&hadc1);
 80011ac:	4816      	ldr	r0, [pc, #88]	; (8001208 <WykonajPomiar+0x64>)
 80011ae:	f001 feb5 	bl	8002f1c <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1,HAL_MAX_DELAY);
 80011b2:	f04f 31ff 	mov.w	r1, #4294967295
 80011b6:	4814      	ldr	r0, [pc, #80]	; (8001208 <WykonajPomiar+0x64>)
 80011b8:	f001 ff6a 	bl	8003090 <HAL_ADC_PollForConversion>
		  czujnik->value=HAL_ADC_GetValue(&hadc1);
 80011bc:	4812      	ldr	r0, [pc, #72]	; (8001208 <WykonajPomiar+0x64>)
 80011be:	f002 f83f 	bl	8003240 <HAL_ADC_GetValue>
 80011c2:	4602      	mov	r2, r0
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	601a      	str	r2, [r3, #0]
		  czujnik->Volt=SUPPLY_VOLTAGE*czujnik->value/(RESOLUTION_OF_ADC*2);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	ee07 3a90 	vmov	s15, r3
 80011d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011d4:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800120c <WykonajPomiar+0x68>
 80011d8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80011dc:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8001210 <WykonajPomiar+0x6c>
 80011e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	edc3 7a01 	vstr	s15, [r3, #4]

		  BuforData(czujnik,czujnik->value); // dodanie pomiaru do bufora
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4619      	mov	r1, r3
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f000 f80f 	bl	8001214 <BuforData>
		//  printf("wynik: %ld   w Voltach: %f  \n\r",czujnik->value[1],czujnik->Volt[1]);//wyswietlenie przez Uart
		  displayMeas(czujnik->value);	// wyswieltenie na ekranie
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f000 fd94 	bl	8001d28 <displayMeas>

}
 8001200:	bf00      	nop
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000234 	.word	0x20000234
 800120c:	40533333 	.word	0x40533333
 8001210:	46000000 	.word	0x46000000

08001214 <BuforData>:

void BuforData(ADC_pomiary *czujnik,uint32_t data){
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
	czujnik->Bufor[iterator]=data;
 800121e:	4b0d      	ldr	r3, [pc, #52]	; (8001254 <BuforData+0x40>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	3204      	adds	r2, #4
 8001226:	6839      	ldr	r1, [r7, #0]
 8001228:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	iterator++;
 800122c:	4b09      	ldr	r3, [pc, #36]	; (8001254 <BuforData+0x40>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	3301      	adds	r3, #1
 8001232:	4a08      	ldr	r2, [pc, #32]	; (8001254 <BuforData+0x40>)
 8001234:	6013      	str	r3, [r2, #0]
	if(iterator>=SIZE_OF_BUFFER) iterator=0;// cyklicznosc bufora
 8001236:	4b07      	ldr	r3, [pc, #28]	; (8001254 <BuforData+0x40>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 800123e:	d302      	bcc.n	8001246 <BuforData+0x32>
 8001240:	4b04      	ldr	r3, [pc, #16]	; (8001254 <BuforData+0x40>)
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	20000200 	.word	0x20000200

08001258 <ClearBufor>:

void ClearBufor(ADC_pomiary *czujnik)
{
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
	for(int i=0;i<SIZE_OF_BUFFER;i++)
 8001260:	2300      	movs	r3, #0
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	e008      	b.n	8001278 <ClearBufor+0x20>
	czujnik->Bufor[i]=0;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	68fa      	ldr	r2, [r7, #12]
 800126a:	3204      	adds	r2, #4
 800126c:	2100      	movs	r1, #0
 800126e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(int i=0;i<SIZE_OF_BUFFER;i++)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	3301      	adds	r3, #1
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 800127e:	dbf2      	blt.n	8001266 <ClearBufor+0xe>
	iterator=0;
 8001280:	4b04      	ldr	r3, [pc, #16]	; (8001294 <ClearBufor+0x3c>)
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]

}
 8001286:	bf00      	nop
 8001288:	3714      	adds	r7, #20
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	20000200 	.word	0x20000200

08001298 <platform_write>:

static uint8_t * buffer;
static uint8_t rotation;

static uint8_t platform_write(uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af04      	add	r7, sp, #16
 800129e:	4603      	mov	r3, r0
 80012a0:	6039      	str	r1, [r7, #0]
 80012a2:	71fb      	strb	r3, [r7, #7]
 80012a4:	4613      	mov	r3, r2
 80012a6:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(&SSD1306_I2C_BUS, SSD1306_I2C_ADDRESS, reg, 1, bufp, len, 100);
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	2364      	movs	r3, #100	; 0x64
 80012ae:	9302      	str	r3, [sp, #8]
 80012b0:	88bb      	ldrh	r3, [r7, #4]
 80012b2:	9301      	str	r3, [sp, #4]
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	9300      	str	r3, [sp, #0]
 80012b8:	2301      	movs	r3, #1
 80012ba:	2178      	movs	r1, #120	; 0x78
 80012bc:	4803      	ldr	r0, [pc, #12]	; (80012cc <platform_write+0x34>)
 80012be:	f003 fbbd 	bl	8004a3c <HAL_I2C_Mem_Write>
	return 0;
 80012c2:	2300      	movs	r3, #0
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	200002e0 	.word	0x200002e0

080012d0 <platform_write_dma>:

static uint8_t platform_write_dma(uint8_t reg, uint8_t *bufp, uint16_t len)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af02      	add	r7, sp, #8
 80012d6:	4603      	mov	r3, r0
 80012d8:	6039      	str	r1, [r7, #0]
 80012da:	71fb      	strb	r3, [r7, #7]
 80012dc:	4613      	mov	r3, r2
 80012de:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_BUS, SSD1306_I2C_ADDRESS, reg, 1, bufp, len);
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	b29a      	uxth	r2, r3
 80012e4:	88bb      	ldrh	r3, [r7, #4]
 80012e6:	9301      	str	r3, [sp, #4]
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	2301      	movs	r3, #1
 80012ee:	2178      	movs	r1, #120	; 0x78
 80012f0:	4803      	ldr	r0, [pc, #12]	; (8001300 <platform_write_dma+0x30>)
 80012f2:	f003 fcb7 	bl	8004c64 <HAL_I2C_Mem_Write_DMA>
	return 0;
 80012f6:	2300      	movs	r3, #0
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	200002e0 	.word	0x200002e0

08001304 <SSD1306_send_com>:

static void SSD1306_send_com(uint8_t c)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	71fb      	strb	r3, [r7, #7]
	platform_write(0x00, &c, 1);
 800130e:	1dfb      	adds	r3, r7, #7
 8001310:	2201      	movs	r2, #1
 8001312:	4619      	mov	r1, r3
 8001314:	2000      	movs	r0, #0
 8001316:	f7ff ffbf 	bl	8001298 <platform_write>
}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
	...

08001324 <SSD1306_init>:

bool SSD1306_init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
  uint8_t comPins = 0x02, contrast = 0x8F, vccstate = SSD1306_SWITCHCAPVCC;
 800132a:	2302      	movs	r3, #2
 800132c:	71fb      	strb	r3, [r7, #7]
 800132e:	238f      	movs	r3, #143	; 0x8f
 8001330:	71bb      	strb	r3, [r7, #6]
 8001332:	2302      	movs	r3, #2
 8001334:	717b      	strb	r3, [r7, #5]

  if ((!buffer) && !(buffer = (uint8_t *)malloc(SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8))))
 8001336:	4b3e      	ldr	r3, [pc, #248]	; (8001430 <SSD1306_init+0x10c>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d10d      	bne.n	800135a <SSD1306_init+0x36>
 800133e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001342:	f007 fced 	bl	8008d20 <malloc>
 8001346:	4603      	mov	r3, r0
 8001348:	461a      	mov	r2, r3
 800134a:	4b39      	ldr	r3, [pc, #228]	; (8001430 <SSD1306_init+0x10c>)
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	4b38      	ldr	r3, [pc, #224]	; (8001430 <SSD1306_init+0x10c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d101      	bne.n	800135a <SSD1306_init+0x36>
  {
    return false;
 8001356:	2300      	movs	r3, #0
 8001358:	e065      	b.n	8001426 <SSD1306_init+0x102>
  }

  SSD1306_display_clear();
 800135a:	f000 f945 	bl	80015e8 <SSD1306_display_clear>

  // Init sequence
  SSD1306_send_com(SSD1306_DISPLAYOFF);
 800135e:	20ae      	movs	r0, #174	; 0xae
 8001360:	f7ff ffd0 	bl	8001304 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETDISPLAYCLOCKDIV);
 8001364:	20d5      	movs	r0, #213	; 0xd5
 8001366:	f7ff ffcd 	bl	8001304 <SSD1306_send_com>
  SSD1306_send_com(0xE0);
 800136a:	20e0      	movs	r0, #224	; 0xe0
 800136c:	f7ff ffca 	bl	8001304 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETMULTIPLEX);
 8001370:	20a8      	movs	r0, #168	; 0xa8
 8001372:	f7ff ffc7 	bl	8001304 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_HEIGHT - 1);
 8001376:	201f      	movs	r0, #31
 8001378:	f7ff ffc4 	bl	8001304 <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETDISPLAYOFFSET);
 800137c:	20d3      	movs	r0, #211	; 0xd3
 800137e:	f7ff ffc1 	bl	8001304 <SSD1306_send_com>
  SSD1306_send_com(0x00);
 8001382:	2000      	movs	r0, #0
 8001384:	f7ff ffbe 	bl	8001304 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETSTARTLINE | 0x00);
 8001388:	2040      	movs	r0, #64	; 0x40
 800138a:	f7ff ffbb 	bl	8001304 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_CHARGEPUMP);
 800138e:	208d      	movs	r0, #141	; 0x8d
 8001390:	f7ff ffb8 	bl	8001304 <SSD1306_send_com>

  SSD1306_send_com((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
 8001394:	797b      	ldrb	r3, [r7, #5]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d101      	bne.n	800139e <SSD1306_init+0x7a>
 800139a:	2310      	movs	r3, #16
 800139c:	e000      	b.n	80013a0 <SSD1306_init+0x7c>
 800139e:	2314      	movs	r3, #20
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff ffaf 	bl	8001304 <SSD1306_send_com>

  SSD1306_send_com(SSD1306_MEMORYMODE);
 80013a6:	2020      	movs	r0, #32
 80013a8:	f7ff ffac 	bl	8001304 <SSD1306_send_com>
  SSD1306_send_com(0x00);
 80013ac:	2000      	movs	r0, #0
 80013ae:	f7ff ffa9 	bl	8001304 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SEGREMAP | 0x10);
 80013b2:	20b0      	movs	r0, #176	; 0xb0
 80013b4:	f7ff ffa6 	bl	8001304 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_COMSCANDEC);
 80013b8:	20c8      	movs	r0, #200	; 0xc8
 80013ba:	f7ff ffa3 	bl	8001304 <SSD1306_send_com>


  if((SSD1306_WIDTH == 128) && (SSD1306_HEIGHT == 32))
  {
    comPins = 0x02;
 80013be:	2302      	movs	r3, #2
 80013c0:	71fb      	strb	r3, [r7, #7]
    contrast = 0x8F;
 80013c2:	238f      	movs	r3, #143	; 0x8f
 80013c4:	71bb      	strb	r3, [r7, #6]
  {
    comPins = 0x2; // ada x12
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF;
  }

  SSD1306_send_com(SSD1306_SETCOMPINS);
 80013c6:	20da      	movs	r0, #218	; 0xda
 80013c8:	f7ff ff9c 	bl	8001304 <SSD1306_send_com>
  SSD1306_send_com(comPins);
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff ff98 	bl	8001304 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_SETCONTRAST);
 80013d4:	2081      	movs	r0, #129	; 0x81
 80013d6:	f7ff ff95 	bl	8001304 <SSD1306_send_com>
  SSD1306_send_com(contrast);
 80013da:	79bb      	ldrb	r3, [r7, #6]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ff91 	bl	8001304 <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETPRECHARGE);
 80013e2:	20d9      	movs	r0, #217	; 0xd9
 80013e4:	f7ff ff8e 	bl	8001304 <SSD1306_send_com>
  SSD1306_send_com((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
 80013e8:	797b      	ldrb	r3, [r7, #5]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d101      	bne.n	80013f2 <SSD1306_init+0xce>
 80013ee:	2322      	movs	r3, #34	; 0x22
 80013f0:	e000      	b.n	80013f4 <SSD1306_init+0xd0>
 80013f2:	23f1      	movs	r3, #241	; 0xf1
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff ff85 	bl	8001304 <SSD1306_send_com>

  SSD1306_send_com(SSD1306_SETVCOMDETECT);
 80013fa:	20db      	movs	r0, #219	; 0xdb
 80013fc:	f7ff ff82 	bl	8001304 <SSD1306_send_com>
  SSD1306_send_com(0x40);
 8001400:	2040      	movs	r0, #64	; 0x40
 8001402:	f7ff ff7f 	bl	8001304 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DISPLAYALLON_RESUME);
 8001406:	20a4      	movs	r0, #164	; 0xa4
 8001408:	f7ff ff7c 	bl	8001304 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_NORMALDISPLAY);
 800140c:	20a6      	movs	r0, #166	; 0xa6
 800140e:	f7ff ff79 	bl	8001304 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DEACTIVATE_SCROLL);
 8001412:	202e      	movs	r0, #46	; 0x2e
 8001414:	f7ff ff76 	bl	8001304 <SSD1306_send_com>
  SSD1306_send_com(SSD1306_DISPLAYON);
 8001418:	20af      	movs	r0, #175	; 0xaf
 800141a:	f7ff ff73 	bl	8001304 <SSD1306_send_com>

  SSD1306_set_rotation(SSD1306_HORIZONTAL_MODE2);
 800141e:	2002      	movs	r0, #2
 8001420:	f000 fb1a 	bl	8001a58 <SSD1306_set_rotation>
  return true;
 8001424:	2301      	movs	r3, #1
}
 8001426:	4618      	mov	r0, r3
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000204 	.word	0x20000204

08001434 <SSD1306_draw_pixel>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_draw_pixel(int16_t x, int16_t y, uint16_t color)
{
 8001434:	b590      	push	{r4, r7, lr}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	80fb      	strh	r3, [r7, #6]
 800143e:	460b      	mov	r3, r1
 8001440:	80bb      	strh	r3, [r7, #4]
 8001442:	4613      	mov	r3, r2
 8001444:	807b      	strh	r3, [r7, #2]
	if ((x >= 0) && (x < SSD1306_WIDTH) && (y >= 0) && (y < SSD1306_HEIGHT))
 8001446:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800144a:	2b00      	cmp	r3, #0
 800144c:	f2c0 80c4 	blt.w	80015d8 <SSD1306_draw_pixel+0x1a4>
 8001450:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001454:	2b7f      	cmp	r3, #127	; 0x7f
 8001456:	f300 80bf 	bgt.w	80015d8 <SSD1306_draw_pixel+0x1a4>
 800145a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	f2c0 80ba 	blt.w	80015d8 <SSD1306_draw_pixel+0x1a4>
 8001464:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001468:	2b1f      	cmp	r3, #31
 800146a:	f300 80b5 	bgt.w	80015d8 <SSD1306_draw_pixel+0x1a4>
	{
		/* Pixel is in-bounds. Rotate coordinates if needed. */
		switch (SSD1306_get_rotation())
 800146e:	f000 fb03 	bl	8001a78 <SSD1306_get_rotation>
 8001472:	4603      	mov	r3, r0
 8001474:	2b03      	cmp	r3, #3
 8001476:	d023      	beq.n	80014c0 <SSD1306_draw_pixel+0x8c>
 8001478:	2b03      	cmp	r3, #3
 800147a:	dc33      	bgt.n	80014e4 <SSD1306_draw_pixel+0xb0>
 800147c:	2b01      	cmp	r3, #1
 800147e:	d002      	beq.n	8001486 <SSD1306_draw_pixel+0x52>
 8001480:	2b02      	cmp	r3, #2
 8001482:	d012      	beq.n	80014aa <SSD1306_draw_pixel+0x76>
 8001484:	e02e      	b.n	80014e4 <SSD1306_draw_pixel+0xb0>
		{
			case 1:
				ssd1306_swap(x, y);
 8001486:	88fa      	ldrh	r2, [r7, #6]
 8001488:	88bb      	ldrh	r3, [r7, #4]
 800148a:	4053      	eors	r3, r2
 800148c:	80fb      	strh	r3, [r7, #6]
 800148e:	88ba      	ldrh	r2, [r7, #4]
 8001490:	88fb      	ldrh	r3, [r7, #6]
 8001492:	4053      	eors	r3, r2
 8001494:	80bb      	strh	r3, [r7, #4]
 8001496:	88fa      	ldrh	r2, [r7, #6]
 8001498:	88bb      	ldrh	r3, [r7, #4]
 800149a:	4053      	eors	r3, r2
 800149c:	80fb      	strh	r3, [r7, #6]
				x = SSD1306_WIDTH - x - 1;
 800149e:	88fb      	ldrh	r3, [r7, #6]
 80014a0:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	80fb      	strh	r3, [r7, #6]
				break;
 80014a8:	e01c      	b.n	80014e4 <SSD1306_draw_pixel+0xb0>
			case 2:
				x = SSD1306_WIDTH - x - 1;
 80014aa:	88fb      	ldrh	r3, [r7, #6]
 80014ac:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	80fb      	strh	r3, [r7, #6]
				y = SSD1306_HEIGHT - y - 1;
 80014b4:	88bb      	ldrh	r3, [r7, #4]
 80014b6:	f1c3 031f 	rsb	r3, r3, #31
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	80bb      	strh	r3, [r7, #4]
				break;
 80014be:	e011      	b.n	80014e4 <SSD1306_draw_pixel+0xb0>
			case 3:
				ssd1306_swap(x, y);
 80014c0:	88fa      	ldrh	r2, [r7, #6]
 80014c2:	88bb      	ldrh	r3, [r7, #4]
 80014c4:	4053      	eors	r3, r2
 80014c6:	80fb      	strh	r3, [r7, #6]
 80014c8:	88ba      	ldrh	r2, [r7, #4]
 80014ca:	88fb      	ldrh	r3, [r7, #6]
 80014cc:	4053      	eors	r3, r2
 80014ce:	80bb      	strh	r3, [r7, #4]
 80014d0:	88fa      	ldrh	r2, [r7, #6]
 80014d2:	88bb      	ldrh	r3, [r7, #4]
 80014d4:	4053      	eors	r3, r2
 80014d6:	80fb      	strh	r3, [r7, #6]
				y = SSD1306_HEIGHT - y - 1;
 80014d8:	88bb      	ldrh	r3, [r7, #4]
 80014da:	f1c3 031f 	rsb	r3, r3, #31
 80014de:	b29b      	uxth	r3, r3
 80014e0:	80bb      	strh	r3, [r7, #4]
				break;
 80014e2:	bf00      	nop
		}

		switch (color)
 80014e4:	887b      	ldrh	r3, [r7, #2]
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d051      	beq.n	800158e <SSD1306_draw_pixel+0x15a>
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	dc75      	bgt.n	80015da <SSD1306_draw_pixel+0x1a6>
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d026      	beq.n	8001540 <SSD1306_draw_pixel+0x10c>
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d171      	bne.n	80015da <SSD1306_draw_pixel+0x1a6>
		{
			case SSD1306_WHITE:
				buffer[x + (y / 8) * SSD1306_WIDTH] |= (1 << (y & 7));
 80014f6:	4b3b      	ldr	r3, [pc, #236]	; (80015e4 <SSD1306_draw_pixel+0x1b0>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80014fe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	da00      	bge.n	8001508 <SSD1306_draw_pixel+0xd4>
 8001506:	3307      	adds	r3, #7
 8001508:	10db      	asrs	r3, r3, #3
 800150a:	b218      	sxth	r0, r3
 800150c:	4603      	mov	r3, r0
 800150e:	01db      	lsls	r3, r3, #7
 8001510:	440b      	add	r3, r1
 8001512:	4413      	add	r3, r2
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	b25a      	sxtb	r2, r3
 8001518:	88bb      	ldrh	r3, [r7, #4]
 800151a:	f003 0307 	and.w	r3, r3, #7
 800151e:	2101      	movs	r1, #1
 8001520:	fa01 f303 	lsl.w	r3, r1, r3
 8001524:	b25b      	sxtb	r3, r3
 8001526:	4313      	orrs	r3, r2
 8001528:	b25c      	sxtb	r4, r3
 800152a:	4b2e      	ldr	r3, [pc, #184]	; (80015e4 <SSD1306_draw_pixel+0x1b0>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001532:	4602      	mov	r2, r0
 8001534:	01d2      	lsls	r2, r2, #7
 8001536:	440a      	add	r2, r1
 8001538:	4413      	add	r3, r2
 800153a:	b2e2      	uxtb	r2, r4
 800153c:	701a      	strb	r2, [r3, #0]
				break;
 800153e:	e04c      	b.n	80015da <SSD1306_draw_pixel+0x1a6>
			case SSD1306_BLACK:
				buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y & 7));
 8001540:	4b28      	ldr	r3, [pc, #160]	; (80015e4 <SSD1306_draw_pixel+0x1b0>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001548:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800154c:	2b00      	cmp	r3, #0
 800154e:	da00      	bge.n	8001552 <SSD1306_draw_pixel+0x11e>
 8001550:	3307      	adds	r3, #7
 8001552:	10db      	asrs	r3, r3, #3
 8001554:	b218      	sxth	r0, r3
 8001556:	4603      	mov	r3, r0
 8001558:	01db      	lsls	r3, r3, #7
 800155a:	440b      	add	r3, r1
 800155c:	4413      	add	r3, r2
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	b25a      	sxtb	r2, r3
 8001562:	88bb      	ldrh	r3, [r7, #4]
 8001564:	f003 0307 	and.w	r3, r3, #7
 8001568:	2101      	movs	r1, #1
 800156a:	fa01 f303 	lsl.w	r3, r1, r3
 800156e:	b25b      	sxtb	r3, r3
 8001570:	43db      	mvns	r3, r3
 8001572:	b25b      	sxtb	r3, r3
 8001574:	4013      	ands	r3, r2
 8001576:	b25c      	sxtb	r4, r3
 8001578:	4b1a      	ldr	r3, [pc, #104]	; (80015e4 <SSD1306_draw_pixel+0x1b0>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001580:	4602      	mov	r2, r0
 8001582:	01d2      	lsls	r2, r2, #7
 8001584:	440a      	add	r2, r1
 8001586:	4413      	add	r3, r2
 8001588:	b2e2      	uxtb	r2, r4
 800158a:	701a      	strb	r2, [r3, #0]
				break;
 800158c:	e025      	b.n	80015da <SSD1306_draw_pixel+0x1a6>
			case SSD1306_INVERSE:
				buffer[x + (y / 8) * SSD1306_WIDTH] ^= (1 << (y & 7));
 800158e:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <SSD1306_draw_pixel+0x1b0>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001596:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	da00      	bge.n	80015a0 <SSD1306_draw_pixel+0x16c>
 800159e:	3307      	adds	r3, #7
 80015a0:	10db      	asrs	r3, r3, #3
 80015a2:	b218      	sxth	r0, r3
 80015a4:	4603      	mov	r3, r0
 80015a6:	01db      	lsls	r3, r3, #7
 80015a8:	440b      	add	r3, r1
 80015aa:	4413      	add	r3, r2
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	b25a      	sxtb	r2, r3
 80015b0:	88bb      	ldrh	r3, [r7, #4]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	2101      	movs	r1, #1
 80015b8:	fa01 f303 	lsl.w	r3, r1, r3
 80015bc:	b25b      	sxtb	r3, r3
 80015be:	4053      	eors	r3, r2
 80015c0:	b25c      	sxtb	r4, r3
 80015c2:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <SSD1306_draw_pixel+0x1b0>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80015ca:	4602      	mov	r2, r0
 80015cc:	01d2      	lsls	r2, r2, #7
 80015ce:	440a      	add	r2, r1
 80015d0:	4413      	add	r3, r2
 80015d2:	b2e2      	uxtb	r2, r4
 80015d4:	701a      	strb	r2, [r3, #0]
				break;
 80015d6:	e000      	b.n	80015da <SSD1306_draw_pixel+0x1a6>
		}
	}
 80015d8:	bf00      	nop
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd90      	pop	{r4, r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000204 	.word	0x20000204

080015e8 <SSD1306_display_clear>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_display_clear(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
	memset(buffer, 0, SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8));
 80015ec:	4b04      	ldr	r3, [pc, #16]	; (8001600 <SSD1306_display_clear+0x18>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015f4:	2100      	movs	r1, #0
 80015f6:	4618      	mov	r0, r3
 80015f8:	f007 fb9a 	bl	8008d30 <memset>
}
 80015fc:	bf00      	nop
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20000204 	.word	0x20000204

08001604 <SSD1306_draw_fast_hline_internal>:
		SSD1306_draw_fast_hline_internal(x, y, w, color);
	}
}

void SSD1306_draw_fast_hline_internal(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8001604:	b490      	push	{r4, r7}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	4604      	mov	r4, r0
 800160c:	4608      	mov	r0, r1
 800160e:	4611      	mov	r1, r2
 8001610:	461a      	mov	r2, r3
 8001612:	4623      	mov	r3, r4
 8001614:	80fb      	strh	r3, [r7, #6]
 8001616:	4603      	mov	r3, r0
 8001618:	80bb      	strh	r3, [r7, #4]
 800161a:	460b      	mov	r3, r1
 800161c:	807b      	strh	r3, [r7, #2]
 800161e:	4613      	mov	r3, r2
 8001620:	803b      	strh	r3, [r7, #0]
	if ((y >= 0) && (y < SSD1306_HEIGHT))
 8001622:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001626:	2b00      	cmp	r3, #0
 8001628:	db75      	blt.n	8001716 <SSD1306_draw_fast_hline_internal+0x112>
 800162a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800162e:	2b1f      	cmp	r3, #31
 8001630:	dc71      	bgt.n	8001716 <SSD1306_draw_fast_hline_internal+0x112>
	{
		// Y coord in bounds?
		if (x < 0)
 8001632:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001636:	2b00      	cmp	r3, #0
 8001638:	da06      	bge.n	8001648 <SSD1306_draw_fast_hline_internal+0x44>
		{
			// Clip left
			w += x;
 800163a:	887a      	ldrh	r2, [r7, #2]
 800163c:	88fb      	ldrh	r3, [r7, #6]
 800163e:	4413      	add	r3, r2
 8001640:	b29b      	uxth	r3, r3
 8001642:	807b      	strh	r3, [r7, #2]
			x = 0;
 8001644:	2300      	movs	r3, #0
 8001646:	80fb      	strh	r3, [r7, #6]
		}
		if ((x + w) > SSD1306_WIDTH)
 8001648:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800164c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001650:	4413      	add	r3, r2
 8001652:	2b80      	cmp	r3, #128	; 0x80
 8001654:	dd04      	ble.n	8001660 <SSD1306_draw_fast_hline_internal+0x5c>
		{
			// Clip right
			w = (SSD1306_WIDTH - x);
 8001656:	88fb      	ldrh	r3, [r7, #6]
 8001658:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800165c:	b29b      	uxth	r3, r3
 800165e:	807b      	strh	r3, [r7, #2]
		}
		if (w > 0)
 8001660:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001664:	2b00      	cmp	r3, #0
 8001666:	dd56      	ble.n	8001716 <SSD1306_draw_fast_hline_internal+0x112>
		{
			// Proceed only if width is positive
			uint8_t *pBuf = &buffer[(y / 8) * SSD1306_WIDTH + x], mask = 1 << (y & 7);
 8001668:	4b2e      	ldr	r3, [pc, #184]	; (8001724 <SSD1306_draw_fast_hline_internal+0x120>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001670:	2b00      	cmp	r3, #0
 8001672:	da00      	bge.n	8001676 <SSD1306_draw_fast_hline_internal+0x72>
 8001674:	3307      	adds	r3, #7
 8001676:	10db      	asrs	r3, r3, #3
 8001678:	b21b      	sxth	r3, r3
 800167a:	01d9      	lsls	r1, r3, #7
 800167c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001680:	440b      	add	r3, r1
 8001682:	4413      	add	r3, r2
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	88bb      	ldrh	r3, [r7, #4]
 8001688:	f003 0307 	and.w	r3, r3, #7
 800168c:	2201      	movs	r2, #1
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	72fb      	strb	r3, [r7, #11]
			switch (color)
 8001694:	883b      	ldrh	r3, [r7, #0]
 8001696:	2b02      	cmp	r3, #2
 8001698:	d034      	beq.n	8001704 <SSD1306_draw_fast_hline_internal+0x100>
 800169a:	2b02      	cmp	r3, #2
 800169c:	dc3c      	bgt.n	8001718 <SSD1306_draw_fast_hline_internal+0x114>
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d013      	beq.n	80016ca <SSD1306_draw_fast_hline_internal+0xc6>
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d138      	bne.n	8001718 <SSD1306_draw_fast_hline_internal+0x114>
			{
				case SSD1306_WHITE:
					while (w--)
 80016a6:	e007      	b.n	80016b8 <SSD1306_draw_fast_hline_internal+0xb4>
					{
						*pBuf++ |= mask;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	1c5a      	adds	r2, r3, #1
 80016ac:	60fa      	str	r2, [r7, #12]
 80016ae:	7819      	ldrb	r1, [r3, #0]
 80016b0:	7afa      	ldrb	r2, [r7, #11]
 80016b2:	430a      	orrs	r2, r1
 80016b4:	b2d2      	uxtb	r2, r2
 80016b6:	701a      	strb	r2, [r3, #0]
					while (w--)
 80016b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80016bc:	b29a      	uxth	r2, r3
 80016be:	3a01      	subs	r2, #1
 80016c0:	b292      	uxth	r2, r2
 80016c2:	807a      	strh	r2, [r7, #2]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1ef      	bne.n	80016a8 <SSD1306_draw_fast_hline_internal+0xa4>
					};
					break;
 80016c8:	e026      	b.n	8001718 <SSD1306_draw_fast_hline_internal+0x114>
				case SSD1306_BLACK:
					mask = ~mask;
 80016ca:	7afb      	ldrb	r3, [r7, #11]
 80016cc:	43db      	mvns	r3, r3
 80016ce:	72fb      	strb	r3, [r7, #11]
					while (w--)
 80016d0:	e007      	b.n	80016e2 <SSD1306_draw_fast_hline_internal+0xde>
					{
						*pBuf++ &= mask;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	1c5a      	adds	r2, r3, #1
 80016d6:	60fa      	str	r2, [r7, #12]
 80016d8:	7819      	ldrb	r1, [r3, #0]
 80016da:	7afa      	ldrb	r2, [r7, #11]
 80016dc:	400a      	ands	r2, r1
 80016de:	b2d2      	uxtb	r2, r2
 80016e0:	701a      	strb	r2, [r3, #0]
					while (w--)
 80016e2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	3a01      	subs	r2, #1
 80016ea:	b292      	uxth	r2, r2
 80016ec:	807a      	strh	r2, [r7, #2]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1ef      	bne.n	80016d2 <SSD1306_draw_fast_hline_internal+0xce>
					};
					break;
 80016f2:	e011      	b.n	8001718 <SSD1306_draw_fast_hline_internal+0x114>
				case SSD1306_INVERSE:
					while (w--)
					{
						*pBuf++ ^= mask;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	1c5a      	adds	r2, r3, #1
 80016f8:	60fa      	str	r2, [r7, #12]
 80016fa:	7819      	ldrb	r1, [r3, #0]
 80016fc:	7afa      	ldrb	r2, [r7, #11]
 80016fe:	404a      	eors	r2, r1
 8001700:	b2d2      	uxtb	r2, r2
 8001702:	701a      	strb	r2, [r3, #0]
					while (w--)
 8001704:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001708:	b29a      	uxth	r2, r3
 800170a:	3a01      	subs	r2, #1
 800170c:	b292      	uxth	r2, r2
 800170e:	807a      	strh	r2, [r7, #2]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1ef      	bne.n	80016f4 <SSD1306_draw_fast_hline_internal+0xf0>
					};
					break;
 8001714:	e000      	b.n	8001718 <SSD1306_draw_fast_hline_internal+0x114>
			}
		}
 8001716:	bf00      	nop
	}
}
 8001718:	bf00      	nop
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bc90      	pop	{r4, r7}
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	20000204 	.word	0x20000204

08001728 <SSD1306_draw_fast_vline>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void SSD1306_draw_fast_vline(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8001728:	b590      	push	{r4, r7, lr}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	4604      	mov	r4, r0
 8001730:	4608      	mov	r0, r1
 8001732:	4611      	mov	r1, r2
 8001734:	461a      	mov	r2, r3
 8001736:	4623      	mov	r3, r4
 8001738:	80fb      	strh	r3, [r7, #6]
 800173a:	4603      	mov	r3, r0
 800173c:	80bb      	strh	r3, [r7, #4]
 800173e:	460b      	mov	r3, r1
 8001740:	807b      	strh	r3, [r7, #2]
 8001742:	4613      	mov	r3, r2
 8001744:	803b      	strh	r3, [r7, #0]
	bool bSwap = false;
 8001746:	2300      	movs	r3, #0
 8001748:	73fb      	strb	r3, [r7, #15]
	switch (SSD1306_get_rotation())
 800174a:	f000 f995 	bl	8001a78 <SSD1306_get_rotation>
 800174e:	4603      	mov	r3, r0
 8001750:	2b03      	cmp	r3, #3
 8001752:	d033      	beq.n	80017bc <SSD1306_draw_fast_vline+0x94>
 8001754:	2b03      	cmp	r3, #3
 8001756:	dc45      	bgt.n	80017e4 <SSD1306_draw_fast_vline+0xbc>
 8001758:	2b01      	cmp	r3, #1
 800175a:	d002      	beq.n	8001762 <SSD1306_draw_fast_vline+0x3a>
 800175c:	2b02      	cmp	r3, #2
 800175e:	d01b      	beq.n	8001798 <SSD1306_draw_fast_vline+0x70>
 8001760:	e040      	b.n	80017e4 <SSD1306_draw_fast_vline+0xbc>
	{
		case 1:
			// 90 degree rotation, swap x & y for rotation,
			// then invert x and adjust x for h (now to become w)
			bSwap = true;
 8001762:	2301      	movs	r3, #1
 8001764:	73fb      	strb	r3, [r7, #15]
  			ssd1306_swap(x, y);
 8001766:	88fa      	ldrh	r2, [r7, #6]
 8001768:	88bb      	ldrh	r3, [r7, #4]
 800176a:	4053      	eors	r3, r2
 800176c:	80fb      	strh	r3, [r7, #6]
 800176e:	88ba      	ldrh	r2, [r7, #4]
 8001770:	88fb      	ldrh	r3, [r7, #6]
 8001772:	4053      	eors	r3, r2
 8001774:	80bb      	strh	r3, [r7, #4]
 8001776:	88fa      	ldrh	r2, [r7, #6]
 8001778:	88bb      	ldrh	r3, [r7, #4]
 800177a:	4053      	eors	r3, r2
 800177c:	80fb      	strh	r3, [r7, #6]
  			x = SSD1306_WIDTH - x - 1;
 800177e:	88fb      	ldrh	r3, [r7, #6]
 8001780:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8001784:	b29b      	uxth	r3, r3
 8001786:	80fb      	strh	r3, [r7, #6]
  			x -= (h - 1);
 8001788:	88fa      	ldrh	r2, [r7, #6]
 800178a:	887b      	ldrh	r3, [r7, #2]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	b29b      	uxth	r3, r3
 8001790:	3301      	adds	r3, #1
 8001792:	b29b      	uxth	r3, r3
 8001794:	80fb      	strh	r3, [r7, #6]
  			break;
 8001796:	e025      	b.n	80017e4 <SSD1306_draw_fast_vline+0xbc>
  	    case 2:
  	    	// 180 degree rotation, invert x and y, then shift y around for height.
  	    	x = SSD1306_WIDTH - x - 1;
 8001798:	88fb      	ldrh	r3, [r7, #6]
 800179a:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800179e:	b29b      	uxth	r3, r3
 80017a0:	80fb      	strh	r3, [r7, #6]
  	    	y = SSD1306_HEIGHT - y - 1;
 80017a2:	88bb      	ldrh	r3, [r7, #4]
 80017a4:	f1c3 031f 	rsb	r3, r3, #31
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	80bb      	strh	r3, [r7, #4]
  	    	y -= (h - 1);
 80017ac:	88ba      	ldrh	r2, [r7, #4]
 80017ae:	887b      	ldrh	r3, [r7, #2]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	3301      	adds	r3, #1
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	80bb      	strh	r3, [r7, #4]
  	    	break;
 80017ba:	e013      	b.n	80017e4 <SSD1306_draw_fast_vline+0xbc>
  	    case 3:
  	    	// 270 degree rotation, swap x & y for rotation, then invert y
  	    	bSwap = true;
 80017bc:	2301      	movs	r3, #1
 80017be:	73fb      	strb	r3, [r7, #15]
  	    	ssd1306_swap(x, y);
 80017c0:	88fa      	ldrh	r2, [r7, #6]
 80017c2:	88bb      	ldrh	r3, [r7, #4]
 80017c4:	4053      	eors	r3, r2
 80017c6:	80fb      	strh	r3, [r7, #6]
 80017c8:	88ba      	ldrh	r2, [r7, #4]
 80017ca:	88fb      	ldrh	r3, [r7, #6]
 80017cc:	4053      	eors	r3, r2
 80017ce:	80bb      	strh	r3, [r7, #4]
 80017d0:	88fa      	ldrh	r2, [r7, #6]
 80017d2:	88bb      	ldrh	r3, [r7, #4]
 80017d4:	4053      	eors	r3, r2
 80017d6:	80fb      	strh	r3, [r7, #6]
  	    	y = SSD1306_HEIGHT - y - 1;
 80017d8:	88bb      	ldrh	r3, [r7, #4]
 80017da:	f1c3 031f 	rsb	r3, r3, #31
 80017de:	b29b      	uxth	r3, r3
 80017e0:	80bb      	strh	r3, [r7, #4]
  	    	break;
 80017e2:	bf00      	nop
	}

	if (bSwap)
 80017e4:	7bfb      	ldrb	r3, [r7, #15]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d009      	beq.n	80017fe <SSD1306_draw_fast_vline+0xd6>
	{
		SSD1306_draw_fast_hline_internal(x, y, h, color);
 80017ea:	883b      	ldrh	r3, [r7, #0]
 80017ec:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80017f0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80017f4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80017f8:	f7ff ff04 	bl	8001604 <SSD1306_draw_fast_hline_internal>
	}
	else
	{
		SSD1306_draw_fast_vline_internal(x, y, h, color);
	}
}
 80017fc:	e008      	b.n	8001810 <SSD1306_draw_fast_vline+0xe8>
		SSD1306_draw_fast_vline_internal(x, y, h, color);
 80017fe:	883b      	ldrh	r3, [r7, #0]
 8001800:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001804:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001808:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800180c:	f000 f804 	bl	8001818 <SSD1306_draw_fast_vline_internal>
}
 8001810:	bf00      	nop
 8001812:	3714      	adds	r7, #20
 8001814:	46bd      	mov	sp, r7
 8001816:	bd90      	pop	{r4, r7, pc}

08001818 <SSD1306_draw_fast_vline_internal>:

void SSD1306_draw_fast_vline_internal(int16_t x, int16_t __y, int16_t __h, uint16_t color)
{
 8001818:	b490      	push	{r4, r7}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	4604      	mov	r4, r0
 8001820:	4608      	mov	r0, r1
 8001822:	4611      	mov	r1, r2
 8001824:	461a      	mov	r2, r3
 8001826:	4623      	mov	r3, r4
 8001828:	80fb      	strh	r3, [r7, #6]
 800182a:	4603      	mov	r3, r0
 800182c:	80bb      	strh	r3, [r7, #4]
 800182e:	460b      	mov	r3, r1
 8001830:	807b      	strh	r3, [r7, #2]
 8001832:	4613      	mov	r3, r2
 8001834:	803b      	strh	r3, [r7, #0]
	if ((x >= 0) && (x < SSD1306_WIDTH))
 8001836:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800183a:	2b00      	cmp	r3, #0
 800183c:	f2c0 80da 	blt.w	80019f4 <SSD1306_draw_fast_vline_internal+0x1dc>
 8001840:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001844:	2b7f      	cmp	r3, #127	; 0x7f
 8001846:	f300 80d5 	bgt.w	80019f4 <SSD1306_draw_fast_vline_internal+0x1dc>
	{
		// X coord in bounds?
		if (__y < 0)
 800184a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800184e:	2b00      	cmp	r3, #0
 8001850:	da06      	bge.n	8001860 <SSD1306_draw_fast_vline_internal+0x48>
		{
			// Clip top
			__h += __y;
 8001852:	887a      	ldrh	r2, [r7, #2]
 8001854:	88bb      	ldrh	r3, [r7, #4]
 8001856:	4413      	add	r3, r2
 8001858:	b29b      	uxth	r3, r3
 800185a:	807b      	strh	r3, [r7, #2]
			__y = 0;
 800185c:	2300      	movs	r3, #0
 800185e:	80bb      	strh	r3, [r7, #4]
		}
		if ((__y + __h) > SSD1306_HEIGHT)
 8001860:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001864:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001868:	4413      	add	r3, r2
 800186a:	2b20      	cmp	r3, #32
 800186c:	dd04      	ble.n	8001878 <SSD1306_draw_fast_vline_internal+0x60>
		{
			// Clip bottom
			__h = (SSD1306_HEIGHT - __y);
 800186e:	88bb      	ldrh	r3, [r7, #4]
 8001870:	f1c3 0320 	rsb	r3, r3, #32
 8001874:	b29b      	uxth	r3, r3
 8001876:	807b      	strh	r3, [r7, #2]
		}
		if (__h > 0)
 8001878:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800187c:	2b00      	cmp	r3, #0
 800187e:	f340 80b9 	ble.w	80019f4 <SSD1306_draw_fast_vline_internal+0x1dc>
		{
			// Proceed only if height is now positive
			// this display doesn't need ints for coordinates,
			// use local byte registers for faster juggling
			uint8_t y = __y, h = __h;
 8001882:	88bb      	ldrh	r3, [r7, #4]
 8001884:	737b      	strb	r3, [r7, #13]
 8001886:	887b      	ldrh	r3, [r7, #2]
 8001888:	75fb      	strb	r3, [r7, #23]
			uint8_t *pBuf = &buffer[(y / 8) * SSD1306_WIDTH + x];
 800188a:	4b5d      	ldr	r3, [pc, #372]	; (8001a00 <SSD1306_draw_fast_vline_internal+0x1e8>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	7b7a      	ldrb	r2, [r7, #13]
 8001890:	08d2      	lsrs	r2, r2, #3
 8001892:	b2d2      	uxtb	r2, r2
 8001894:	01d1      	lsls	r1, r2, #7
 8001896:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800189a:	440a      	add	r2, r1
 800189c:	4413      	add	r3, r2
 800189e:	613b      	str	r3, [r7, #16]

			// do the first partial byte, if necessary - this requires some masking
			uint8_t mod = (y & 7);
 80018a0:	7b7b      	ldrb	r3, [r7, #13]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	73fb      	strb	r3, [r7, #15]
			if (mod)
 80018a8:	7bfb      	ldrb	r3, [r7, #15]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d040      	beq.n	8001930 <SSD1306_draw_fast_vline_internal+0x118>
			{
				// mask off the high n bits we want to set
				mod = 8 - mod;
 80018ae:	7bfb      	ldrb	r3, [r7, #15]
 80018b0:	f1c3 0308 	rsb	r3, r3, #8
 80018b4:	73fb      	strb	r3, [r7, #15]
				// note - lookup table results in a nearly 10% performance
				// improvement in fill* functions
				// uint8_t mask = ~(0xFF >> mod);
				static const uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE};
				uint8_t mask = (*(const unsigned char *)(&premask[mod]));
 80018b6:	7bfb      	ldrb	r3, [r7, #15]
 80018b8:	4a52      	ldr	r2, [pc, #328]	; (8001a04 <SSD1306_draw_fast_vline_internal+0x1ec>)
 80018ba:	5cd3      	ldrb	r3, [r2, r3]
 80018bc:	73bb      	strb	r3, [r7, #14]
				// adjust the mask if we're not going to reach the end of this byte
				if (h < mod)
 80018be:	7dfa      	ldrb	r2, [r7, #23]
 80018c0:	7bfb      	ldrb	r3, [r7, #15]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d20b      	bcs.n	80018de <SSD1306_draw_fast_vline_internal+0xc6>
				{
					mask &= (0XFF >> (mod - h));
 80018c6:	7bfa      	ldrb	r2, [r7, #15]
 80018c8:	7dfb      	ldrb	r3, [r7, #23]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	22ff      	movs	r2, #255	; 0xff
 80018ce:	fa42 f303 	asr.w	r3, r2, r3
 80018d2:	b25a      	sxtb	r2, r3
 80018d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80018d8:	4013      	ands	r3, r2
 80018da:	b25b      	sxtb	r3, r3
 80018dc:	73bb      	strb	r3, [r7, #14]
				}

				switch (color)
 80018de:	883b      	ldrh	r3, [r7, #0]
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d01a      	beq.n	800191a <SSD1306_draw_fast_vline_internal+0x102>
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	dc20      	bgt.n	800192a <SSD1306_draw_fast_vline_internal+0x112>
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d009      	beq.n	8001900 <SSD1306_draw_fast_vline_internal+0xe8>
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d11c      	bne.n	800192a <SSD1306_draw_fast_vline_internal+0x112>
				{
					case SSD1306_WHITE:
						*pBuf |= mask;
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	781a      	ldrb	r2, [r3, #0]
 80018f4:	7bbb      	ldrb	r3, [r7, #14]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	b2da      	uxtb	r2, r3
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	701a      	strb	r2, [r3, #0]
						break;
 80018fe:	e014      	b.n	800192a <SSD1306_draw_fast_vline_internal+0x112>
					case SSD1306_BLACK:
						*pBuf &= ~mask;
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	b25a      	sxtb	r2, r3
 8001906:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800190a:	43db      	mvns	r3, r3
 800190c:	b25b      	sxtb	r3, r3
 800190e:	4013      	ands	r3, r2
 8001910:	b25b      	sxtb	r3, r3
 8001912:	b2da      	uxtb	r2, r3
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	701a      	strb	r2, [r3, #0]
						break;
 8001918:	e007      	b.n	800192a <SSD1306_draw_fast_vline_internal+0x112>
					case SSD1306_INVERSE:
						*pBuf ^= mask;
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	781a      	ldrb	r2, [r3, #0]
 800191e:	7bbb      	ldrb	r3, [r7, #14]
 8001920:	4053      	eors	r3, r2
 8001922:	b2da      	uxtb	r2, r3
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	701a      	strb	r2, [r3, #0]
						break;
 8001928:	bf00      	nop
				}
				pBuf += SSD1306_WIDTH;
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	3380      	adds	r3, #128	; 0x80
 800192e:	613b      	str	r3, [r7, #16]
			}

			if (h >= mod)
 8001930:	7dfa      	ldrb	r2, [r7, #23]
 8001932:	7bfb      	ldrb	r3, [r7, #15]
 8001934:	429a      	cmp	r2, r3
 8001936:	d35d      	bcc.n	80019f4 <SSD1306_draw_fast_vline_internal+0x1dc>
			{
				// More to go?
				h -= mod;
 8001938:	7dfa      	ldrb	r2, [r7, #23]
 800193a:	7bfb      	ldrb	r3, [r7, #15]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	75fb      	strb	r3, [r7, #23]
				// Write solid bytes while we can - effectively 8 rows at a time
				if (h >= 8)
 8001940:	7dfb      	ldrb	r3, [r7, #23]
 8001942:	2b07      	cmp	r3, #7
 8001944:	d925      	bls.n	8001992 <SSD1306_draw_fast_vline_internal+0x17a>
				{
					if (color == SSD1306_INVERSE)
 8001946:	883b      	ldrh	r3, [r7, #0]
 8001948:	2b02      	cmp	r3, #2
 800194a:	d10f      	bne.n	800196c <SSD1306_draw_fast_vline_internal+0x154>
					{
						// separate copy of the code so we don't impact performance of
						// black/white write version with an extra comparison per loop
						do
						{
							*pBuf ^= 0xFF; // Invert byte
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	43db      	mvns	r3, r3
 8001952:	b2da      	uxtb	r2, r3
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	701a      	strb	r2, [r3, #0]
							pBuf += SSD1306_WIDTH; // Advance pointer 8 rows
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	3380      	adds	r3, #128	; 0x80
 800195c:	613b      	str	r3, [r7, #16]
							h -= 8;        // Subtract 8 rows from height
 800195e:	7dfb      	ldrb	r3, [r7, #23]
 8001960:	3b08      	subs	r3, #8
 8001962:	75fb      	strb	r3, [r7, #23]
						} while (h >= 8);
 8001964:	7dfb      	ldrb	r3, [r7, #23]
 8001966:	2b07      	cmp	r3, #7
 8001968:	d8f0      	bhi.n	800194c <SSD1306_draw_fast_vline_internal+0x134>
 800196a:	e012      	b.n	8001992 <SSD1306_draw_fast_vline_internal+0x17a>
					}
					else
					{
						// store a local value to work with
						uint8_t val = (color != SSD1306_BLACK) ? 255 : 0;
 800196c:	883b      	ldrh	r3, [r7, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <SSD1306_draw_fast_vline_internal+0x15e>
 8001972:	23ff      	movs	r3, #255	; 0xff
 8001974:	e000      	b.n	8001978 <SSD1306_draw_fast_vline_internal+0x160>
 8001976:	2300      	movs	r3, #0
 8001978:	733b      	strb	r3, [r7, #12]
						do
						{
							*pBuf = val;   // Set byte
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	7b3a      	ldrb	r2, [r7, #12]
 800197e:	701a      	strb	r2, [r3, #0]
							pBuf += SSD1306_WIDTH; // Advance pointer 8 rows
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	3380      	adds	r3, #128	; 0x80
 8001984:	613b      	str	r3, [r7, #16]
							h -= 8;        // Subtract 8 rows from height
 8001986:	7dfb      	ldrb	r3, [r7, #23]
 8001988:	3b08      	subs	r3, #8
 800198a:	75fb      	strb	r3, [r7, #23]
						} while (h >= 8);
 800198c:	7dfb      	ldrb	r3, [r7, #23]
 800198e:	2b07      	cmp	r3, #7
 8001990:	d8f3      	bhi.n	800197a <SSD1306_draw_fast_vline_internal+0x162>
					}
				}

				if (h)
 8001992:	7dfb      	ldrb	r3, [r7, #23]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d02d      	beq.n	80019f4 <SSD1306_draw_fast_vline_internal+0x1dc>
				{
					// Do the final partial byte, if necessary
					mod = h & 7;
 8001998:	7dfb      	ldrb	r3, [r7, #23]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	73fb      	strb	r3, [r7, #15]
					// uint8_t mask = (1 << mod) - 1;
					// note - lookup table results in a nearly 10% performance
					// improvement in fill* functions
					static const uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07,
                                                      0x0F, 0x1F, 0x3F, 0x7F};
					uint8_t mask = (*(const unsigned char *)(&postmask[mod]));
 80019a0:	7bfb      	ldrb	r3, [r7, #15]
 80019a2:	4a19      	ldr	r2, [pc, #100]	; (8001a08 <SSD1306_draw_fast_vline_internal+0x1f0>)
 80019a4:	5cd3      	ldrb	r3, [r2, r3]
 80019a6:	72fb      	strb	r3, [r7, #11]
					switch (color)
 80019a8:	883b      	ldrh	r3, [r7, #0]
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d01a      	beq.n	80019e4 <SSD1306_draw_fast_vline_internal+0x1cc>
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	dc21      	bgt.n	80019f6 <SSD1306_draw_fast_vline_internal+0x1de>
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d009      	beq.n	80019ca <SSD1306_draw_fast_vline_internal+0x1b2>
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d11d      	bne.n	80019f6 <SSD1306_draw_fast_vline_internal+0x1de>
					{
						case SSD1306_WHITE:
							*pBuf |= mask;
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	781a      	ldrb	r2, [r3, #0]
 80019be:	7afb      	ldrb	r3, [r7, #11]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	701a      	strb	r2, [r3, #0]
							break;
 80019c8:	e015      	b.n	80019f6 <SSD1306_draw_fast_vline_internal+0x1de>
						case SSD1306_BLACK:
							*pBuf &= ~mask;
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	b25a      	sxtb	r2, r3
 80019d0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80019d4:	43db      	mvns	r3, r3
 80019d6:	b25b      	sxtb	r3, r3
 80019d8:	4013      	ands	r3, r2
 80019da:	b25b      	sxtb	r3, r3
 80019dc:	b2da      	uxtb	r2, r3
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	701a      	strb	r2, [r3, #0]
							break;
 80019e2:	e008      	b.n	80019f6 <SSD1306_draw_fast_vline_internal+0x1de>
						case SSD1306_INVERSE:
							*pBuf ^= mask;
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	781a      	ldrb	r2, [r3, #0]
 80019e8:	7afb      	ldrb	r3, [r7, #11]
 80019ea:	4053      	eors	r3, r2
 80019ec:	b2da      	uxtb	r2, r3
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	701a      	strb	r2, [r3, #0]
							break;
 80019f2:	e000      	b.n	80019f6 <SSD1306_draw_fast_vline_internal+0x1de>
					}
				}
 80019f4:	bf00      	nop
			}
		} // endif positive height
	}   // endif x in bounds
}
 80019f6:	bf00      	nop
 80019f8:	3718      	adds	r7, #24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bc90      	pop	{r4, r7}
 80019fe:	4770      	bx	lr
 8001a00:	20000204 	.word	0x20000204
 8001a04:	0800c000 	.word	0x0800c000
 8001a08:	0800c008 	.word	0x0800c008

08001a0c <SSD1306_display_repaint>:
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void SSD1306_display_repaint(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
	uint16_t buf_len = SSD1306_WIDTH * ((SSD1306_HEIGHT + 7) / 8);
 8001a12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a16:	80fb      	strh	r3, [r7, #6]

	SSD1306_send_com(SSD1306_PAGEADDR);
 8001a18:	2022      	movs	r0, #34	; 0x22
 8001a1a:	f7ff fc73 	bl	8001304 <SSD1306_send_com>
	SSD1306_send_com(0x00);
 8001a1e:	2000      	movs	r0, #0
 8001a20:	f7ff fc70 	bl	8001304 <SSD1306_send_com>
	SSD1306_send_com(0xFF);
 8001a24:	20ff      	movs	r0, #255	; 0xff
 8001a26:	f7ff fc6d 	bl	8001304 <SSD1306_send_com>
	SSD1306_send_com(SSD1306_COLUMNADDR);
 8001a2a:	2021      	movs	r0, #33	; 0x21
 8001a2c:	f7ff fc6a 	bl	8001304 <SSD1306_send_com>
	SSD1306_send_com(0x00);
 8001a30:	2000      	movs	r0, #0
 8001a32:	f7ff fc67 	bl	8001304 <SSD1306_send_com>

	SSD1306_send_com(SSD1306_WIDTH - 1); // Column end address
 8001a36:	207f      	movs	r0, #127	; 0x7f
 8001a38:	f7ff fc64 	bl	8001304 <SSD1306_send_com>

	platform_write_dma(SSD1306_SETSTARTLINE, buffer, buf_len);
 8001a3c:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <SSD1306_display_repaint+0x48>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	88fa      	ldrh	r2, [r7, #6]
 8001a42:	4619      	mov	r1, r3
 8001a44:	2040      	movs	r0, #64	; 0x40
 8001a46:	f7ff fc43 	bl	80012d0 <platform_write_dma>
}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20000204 	.word	0x20000204

08001a58 <SSD1306_set_rotation>:
    SSD1306_send_com(SSD1306_SETCONTRAST);
    SSD1306_send_com(contrast);
}

void SSD1306_set_rotation(uint8_t rot)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	71fb      	strb	r3, [r7, #7]
	rotation = rot;
 8001a62:	4a04      	ldr	r2, [pc, #16]	; (8001a74 <SSD1306_set_rotation+0x1c>)
 8001a64:	79fb      	ldrb	r3, [r7, #7]
 8001a66:	7013      	strb	r3, [r2, #0]
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	20000208 	.word	0x20000208

08001a78 <SSD1306_get_rotation>:

uint8_t SSD1306_get_rotation(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
	return rotation;
 8001a7c:	4b03      	ldr	r3, [pc, #12]	; (8001a8c <SSD1306_get_rotation+0x14>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	20000208 	.word	0x20000208

08001a90 <__io_putchar>:
#include "Pomiar.h"
#define SIZE_OF_BUFFER 3600
int32_t sizeOfUsedBuffer=0;

int __io_putchar(int ch)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
    if (ch == '\n') {
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2b0a      	cmp	r3, #10
 8001a9c:	d109      	bne.n	8001ab2 <__io_putchar+0x22>
        uint8_t ch2 = '\r';
 8001a9e:	230d      	movs	r3, #13
 8001aa0:	73fb      	strb	r3, [r7, #15]
        HAL_UART_Transmit(&huart2, &ch2, 1, HAL_MAX_DELAY);
 8001aa2:	f107 010f 	add.w	r1, r7, #15
 8001aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aaa:	2201      	movs	r2, #1
 8001aac:	4807      	ldr	r0, [pc, #28]	; (8001acc <__io_putchar+0x3c>)
 8001aae:	f006 fc3f 	bl	8008330 <HAL_UART_Transmit>
    }

    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001ab2:	1d39      	adds	r1, r7, #4
 8001ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab8:	2201      	movs	r2, #1
 8001aba:	4804      	ldr	r0, [pc, #16]	; (8001acc <__io_putchar+0x3c>)
 8001abc:	f006 fc38 	bl	8008330 <HAL_UART_Transmit>
    return 1;
 8001ac0:	2301      	movs	r3, #1
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20004208 	.word	0x20004208

08001ad0 <SaveLog>:

void SaveLog(ADC_pomiary *czujnik){
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
	sizeOfUsedBuffer=0;
 8001ad8:	4b1a      	ldr	r3, [pc, #104]	; (8001b44 <SaveLog+0x74>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]

	for(int i=0;i<SIZE_OF_BUFFER;i++){
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	e00e      	b.n	8001b02 <SaveLog+0x32>
		sizeOfUsedBuffer++;
 8001ae4:	4b17      	ldr	r3, [pc, #92]	; (8001b44 <SaveLog+0x74>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	4a16      	ldr	r2, [pc, #88]	; (8001b44 <SaveLog+0x74>)
 8001aec:	6013      	str	r3, [r2, #0]
		if(czujnik->Bufor[i]==0){
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	68fa      	ldr	r2, [r7, #12]
 8001af2:	3204      	adds	r2, #4
 8001af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d007      	beq.n	8001b0c <SaveLog+0x3c>
	for(int i=0;i<SIZE_OF_BUFFER;i++){
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	3301      	adds	r3, #1
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8001b08:	dbec      	blt.n	8001ae4 <SaveLog+0x14>
 8001b0a:	e000      	b.n	8001b0e <SaveLog+0x3e>

			break;
 8001b0c:	bf00      	nop
		}

	}
//	for(int i=0;i<strlen(*czujnik->Bufor);i++){
	for(int i=0;i<sizeOfUsedBuffer;i++){
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60bb      	str	r3, [r7, #8]
 8001b12:	e00c      	b.n	8001b2e <SaveLog+0x5e>
		printf("%d\t:\t%ld\n\r",i,czujnik->Bufor[i]);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68ba      	ldr	r2, [r7, #8]
 8001b18:	3204      	adds	r2, #4
 8001b1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	68b9      	ldr	r1, [r7, #8]
 8001b22:	4809      	ldr	r0, [pc, #36]	; (8001b48 <SaveLog+0x78>)
 8001b24:	f007 fe20 	bl	8009768 <iprintf>
	for(int i=0;i<sizeOfUsedBuffer;i++){
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	60bb      	str	r3, [r7, #8]
 8001b2e:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <SaveLog+0x74>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	68ba      	ldr	r2, [r7, #8]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	dbed      	blt.n	8001b14 <SaveLog+0x44>

	}


}
 8001b38:	bf00      	nop
 8001b3a:	bf00      	nop
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	2000020c 	.word	0x2000020c
 8001b48:	0800bac8 	.word	0x0800bac8

08001b4c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08a      	sub	sp, #40	; 0x28
 8001b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001b52:	f107 031c 	add.w	r3, r7, #28
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	605a      	str	r2, [r3, #4]
 8001b5c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001b5e:	1d3b      	adds	r3, r7, #4
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	611a      	str	r2, [r3, #16]
 8001b6c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001b6e:	4b35      	ldr	r3, [pc, #212]	; (8001c44 <MX_ADC1_Init+0xf8>)
 8001b70:	4a35      	ldr	r2, [pc, #212]	; (8001c48 <MX_ADC1_Init+0xfc>)
 8001b72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001b74:	4b33      	ldr	r3, [pc, #204]	; (8001c44 <MX_ADC1_Init+0xf8>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b7a:	4b32      	ldr	r3, [pc, #200]	; (8001c44 <MX_ADC1_Init+0xf8>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b80:	4b30      	ldr	r3, [pc, #192]	; (8001c44 <MX_ADC1_Init+0xf8>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001b86:	4b2f      	ldr	r3, [pc, #188]	; (8001c44 <MX_ADC1_Init+0xf8>)
 8001b88:	2201      	movs	r2, #1
 8001b8a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b8c:	4b2d      	ldr	r3, [pc, #180]	; (8001c44 <MX_ADC1_Init+0xf8>)
 8001b8e:	2204      	movs	r2, #4
 8001b90:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001b92:	4b2c      	ldr	r3, [pc, #176]	; (8001c44 <MX_ADC1_Init+0xf8>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b98:	4b2a      	ldr	r3, [pc, #168]	; (8001c44 <MX_ADC1_Init+0xf8>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8001b9e:	4b29      	ldr	r3, [pc, #164]	; (8001c44 <MX_ADC1_Init+0xf8>)
 8001ba0:	2202      	movs	r2, #2
 8001ba2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ba4:	4b27      	ldr	r3, [pc, #156]	; (8001c44 <MX_ADC1_Init+0xf8>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001bac:	4b25      	ldr	r3, [pc, #148]	; (8001c44 <MX_ADC1_Init+0xf8>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001bb2:	4b24      	ldr	r3, [pc, #144]	; (8001c44 <MX_ADC1_Init+0xf8>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001bb8:	4b22      	ldr	r3, [pc, #136]	; (8001c44 <MX_ADC1_Init+0xf8>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001bc0:	4b20      	ldr	r3, [pc, #128]	; (8001c44 <MX_ADC1_Init+0xf8>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001bc6:	4b1f      	ldr	r3, [pc, #124]	; (8001c44 <MX_ADC1_Init+0xf8>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001bce:	481d      	ldr	r0, [pc, #116]	; (8001c44 <MX_ADC1_Init+0xf8>)
 8001bd0:	f001 f84e 	bl	8002c70 <HAL_ADC_Init>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001bda:	f000 fb59 	bl	8002290 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001bde:	2300      	movs	r3, #0
 8001be0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001be2:	f107 031c 	add.w	r3, r7, #28
 8001be6:	4619      	mov	r1, r3
 8001be8:	4816      	ldr	r0, [pc, #88]	; (8001c44 <MX_ADC1_Init+0xf8>)
 8001bea:	f002 f89b 	bl	8003d24 <HAL_ADCEx_MultiModeConfigChannel>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001bf4:	f000 fb4c 	bl	8002290 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001bf8:	4b14      	ldr	r3, [pc, #80]	; (8001c4c <MX_ADC1_Init+0x100>)
 8001bfa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001bfc:	2306      	movs	r3, #6
 8001bfe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001c00:	2300      	movs	r3, #0
 8001c02:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8001c04:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <MX_ADC1_Init+0x104>)
 8001c06:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c08:	2304      	movs	r3, #4
 8001c0a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c10:	1d3b      	adds	r3, r7, #4
 8001c12:	4619      	mov	r1, r3
 8001c14:	480b      	ldr	r0, [pc, #44]	; (8001c44 <MX_ADC1_Init+0xf8>)
 8001c16:	f001 fb21 	bl	800325c <HAL_ADC_ConfigChannel>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001c20:	f000 fb36 	bl	8002290 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001c24:	230c      	movs	r3, #12
 8001c26:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c28:	1d3b      	adds	r3, r7, #4
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4805      	ldr	r0, [pc, #20]	; (8001c44 <MX_ADC1_Init+0xf8>)
 8001c2e:	f001 fb15 	bl	800325c <HAL_ADC_ConfigChannel>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 8001c38:	f000 fb2a 	bl	8002290 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c3c:	bf00      	nop
 8001c3e:	3728      	adds	r7, #40	; 0x28
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	20000234 	.word	0x20000234
 8001c48:	50040000 	.word	0x50040000
 8001c4c:	04300002 	.word	0x04300002
 8001c50:	407f0000 	.word	0x407f0000

08001c54 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b0ac      	sub	sp, #176	; 0xb0
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c5c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	609a      	str	r2, [r3, #8]
 8001c68:	60da      	str	r2, [r3, #12]
 8001c6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c6c:	f107 0314 	add.w	r3, r7, #20
 8001c70:	2288      	movs	r2, #136	; 0x88
 8001c72:	2100      	movs	r1, #0
 8001c74:	4618      	mov	r0, r3
 8001c76:	f007 f85b 	bl	8008d30 <memset>
  if(adcHandle->Instance==ADC1)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a27      	ldr	r2, [pc, #156]	; (8001d1c <HAL_ADC_MspInit+0xc8>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d146      	bne.n	8001d12 <HAL_ADC_MspInit+0xbe>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001c84:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c88:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001c8a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001c8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001c92:	2302      	movs	r3, #2
 8001c94:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001c96:	2301      	movs	r3, #1
 8001c98:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001c9a:	2308      	movs	r3, #8
 8001c9c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001c9e:	2307      	movs	r3, #7
 8001ca0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001caa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cae:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cb0:	f107 0314 	add.w	r3, r7, #20
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f005 fae1 	bl	800727c <HAL_RCCEx_PeriphCLKConfig>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001cc0:	f000 fae6 	bl	8002290 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001cc4:	4b16      	ldr	r3, [pc, #88]	; (8001d20 <HAL_ADC_MspInit+0xcc>)
 8001cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc8:	4a15      	ldr	r2, [pc, #84]	; (8001d20 <HAL_ADC_MspInit+0xcc>)
 8001cca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001cce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cd0:	4b13      	ldr	r3, [pc, #76]	; (8001d20 <HAL_ADC_MspInit+0xcc>)
 8001cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cd8:	613b      	str	r3, [r7, #16]
 8001cda:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cdc:	4b10      	ldr	r3, [pc, #64]	; (8001d20 <HAL_ADC_MspInit+0xcc>)
 8001cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce0:	4a0f      	ldr	r2, [pc, #60]	; (8001d20 <HAL_ADC_MspInit+0xcc>)
 8001ce2:	f043 0304 	orr.w	r3, r3, #4
 8001ce6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ce8:	4b0d      	ldr	r3, [pc, #52]	; (8001d20 <HAL_ADC_MspInit+0xcc>)
 8001cea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cec:	f003 0304 	and.w	r3, r3, #4
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001cfa:	230b      	movs	r3, #11
 8001cfc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d06:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4805      	ldr	r0, [pc, #20]	; (8001d24 <HAL_ADC_MspInit+0xd0>)
 8001d0e:	f002 fc11 	bl	8004534 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001d12:	bf00      	nop
 8001d14:	37b0      	adds	r7, #176	; 0xb0
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	50040000 	.word	0x50040000
 8001d20:	40021000 	.word	0x40021000
 8001d24:	48000800 	.word	0x48000800

08001d28 <displayMeas>:
char str[NUMBER_OF_CHAR_ON_DISPLAY];
char* prefix="wynik: ";
char display[NUMBER_OF_CHAR_ON_DISPLAY];


void displayMeas(uint32_t meas){
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af04      	add	r7, sp, #16
 8001d2e:	6078      	str	r0, [r7, #4]
		snprintf(str, sizeof str, "%lu", (unsigned long)meas);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4a16      	ldr	r2, [pc, #88]	; (8001d8c <displayMeas+0x64>)
 8001d34:	2112      	movs	r1, #18
 8001d36:	4816      	ldr	r0, [pc, #88]	; (8001d90 <displayMeas+0x68>)
 8001d38:	f007 fd3e 	bl	80097b8 <sniprintf>
		//strcat(display,str);

			  GFX_draw_fill_rect(1,1,120,15,BLACK);// wyczyszczenie polowy ekranu
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	230f      	movs	r3, #15
 8001d42:	2278      	movs	r2, #120	; 0x78
 8001d44:	2101      	movs	r1, #1
 8001d46:	2001      	movs	r0, #1
 8001d48:	f7ff f9fd 	bl	8001146 <GFX_draw_fill_rect>

			  GFX_draw_string(5, 1,(unsigned char*)prefix, WHITE, BLACK, 1, 1);
 8001d4c:	4b11      	ldr	r3, [pc, #68]	; (8001d94 <displayMeas+0x6c>)
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	2301      	movs	r3, #1
 8001d52:	9302      	str	r3, [sp, #8]
 8001d54:	2301      	movs	r3, #1
 8001d56:	9301      	str	r3, [sp, #4]
 8001d58:	2300      	movs	r3, #0
 8001d5a:	9300      	str	r3, [sp, #0]
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	2101      	movs	r1, #1
 8001d60:	2005      	movs	r0, #5
 8001d62:	f7ff f9b7 	bl	80010d4 <GFX_draw_string>
			  GFX_draw_string(60, 1,(unsigned char*)str, WHITE, BLACK, 1, 1);
 8001d66:	2301      	movs	r3, #1
 8001d68:	9302      	str	r3, [sp, #8]
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	9301      	str	r3, [sp, #4]
 8001d6e:	2300      	movs	r3, #0
 8001d70:	9300      	str	r3, [sp, #0]
 8001d72:	2301      	movs	r3, #1
 8001d74:	4a06      	ldr	r2, [pc, #24]	; (8001d90 <displayMeas+0x68>)
 8001d76:	2101      	movs	r1, #1
 8001d78:	203c      	movs	r0, #60	; 0x3c
 8001d7a:	f7ff f9ab 	bl	80010d4 <GFX_draw_string>
			  SSD1306_display_repaint();
 8001d7e:	f7ff fe45 	bl	8001a0c <SSD1306_display_repaint>

}
 8001d82:	bf00      	nop
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	0800badc 	.word	0x0800badc
 8001d90:	20000220 	.word	0x20000220
 8001d94:	20000000 	.word	0x20000000

08001d98 <removePause>:
void removePause(){
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af02      	add	r7, sp, #8
	 GFX_draw_fill_rect(110,20,10,10,BLACK);// usuniecie pauzy
 8001d9e:	2300      	movs	r3, #0
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	230a      	movs	r3, #10
 8001da4:	220a      	movs	r2, #10
 8001da6:	2114      	movs	r1, #20
 8001da8:	206e      	movs	r0, #110	; 0x6e
 8001daa:	f7ff f9cc 	bl	8001146 <GFX_draw_fill_rect>
	 SSD1306_display_repaint();
 8001dae:	f7ff fe2d 	bl	8001a0c <SSD1306_display_repaint>
}
 8001db2:	bf00      	nop
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <displayPause>:

void displayPause()
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af04      	add	r7, sp, #16
	GFX_draw_string(110, 20,(unsigned char*)"P", WHITE, BLACK, 1, 1);
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	9302      	str	r3, [sp, #8]
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	9300      	str	r3, [sp, #0]
 8001dca:	2301      	movs	r3, #1
 8001dcc:	4a04      	ldr	r2, [pc, #16]	; (8001de0 <displayPause+0x28>)
 8001dce:	2114      	movs	r1, #20
 8001dd0:	206e      	movs	r0, #110	; 0x6e
 8001dd2:	f7ff f97f 	bl	80010d4 <GFX_draw_string>
	SSD1306_display_repaint();
 8001dd6:	f7ff fe19 	bl	8001a0c <SSD1306_display_repaint>

}
 8001dda:	bf00      	nop
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	0800bae0 	.word	0x0800bae0

08001de4 <displayWelcome>:

void displayWelcome(){
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af04      	add	r7, sp, #16
	GFX_draw_string(5, 20,(unsigned char*)"Magnetometr", WHITE, BLACK, 1, 1);
 8001dea:	2301      	movs	r3, #1
 8001dec:	9302      	str	r3, [sp, #8]
 8001dee:	2301      	movs	r3, #1
 8001df0:	9301      	str	r3, [sp, #4]
 8001df2:	2300      	movs	r3, #0
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	2301      	movs	r3, #1
 8001df8:	4a0a      	ldr	r2, [pc, #40]	; (8001e24 <displayWelcome+0x40>)
 8001dfa:	2114      	movs	r1, #20
 8001dfc:	2005      	movs	r0, #5
 8001dfe:	f7ff f969 	bl	80010d4 <GFX_draw_string>

	GFX_draw_string(5, 1,(unsigned char*)"Press to Start", WHITE, BLACK, 1, 1);
 8001e02:	2301      	movs	r3, #1
 8001e04:	9302      	str	r3, [sp, #8]
 8001e06:	2301      	movs	r3, #1
 8001e08:	9301      	str	r3, [sp, #4]
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	9300      	str	r3, [sp, #0]
 8001e0e:	2301      	movs	r3, #1
 8001e10:	4a05      	ldr	r2, [pc, #20]	; (8001e28 <displayWelcome+0x44>)
 8001e12:	2101      	movs	r1, #1
 8001e14:	2005      	movs	r0, #5
 8001e16:	f7ff f95d 	bl	80010d4 <GFX_draw_string>
				  SSD1306_display_repaint();
 8001e1a:	f7ff fdf7 	bl	8001a0c <SSD1306_display_repaint>
}
 8001e1e:	bf00      	nop
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	0800bae4 	.word	0x0800bae4
 8001e28:	0800baf0 	.word	0x0800baf0

08001e2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e32:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <MX_DMA_Init+0x38>)
 8001e34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e36:	4a0b      	ldr	r2, [pc, #44]	; (8001e64 <MX_DMA_Init+0x38>)
 8001e38:	f043 0301 	orr.w	r3, r3, #1
 8001e3c:	6493      	str	r3, [r2, #72]	; 0x48
 8001e3e:	4b09      	ldr	r3, [pc, #36]	; (8001e64 <MX_DMA_Init+0x38>)
 8001e40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	607b      	str	r3, [r7, #4]
 8001e48:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	2010      	movs	r0, #16
 8001e50:	f002 f8f3 	bl	800403a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001e54:	2010      	movs	r0, #16
 8001e56:	f002 f90c 	bl	8004072 <HAL_NVIC_EnableIRQ>

}
 8001e5a:	bf00      	nop
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40021000 	.word	0x40021000

08001e68 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08a      	sub	sp, #40	; 0x28
 8001e6c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6e:	f107 0314 	add.w	r3, r7, #20
 8001e72:	2200      	movs	r2, #0
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	605a      	str	r2, [r3, #4]
 8001e78:	609a      	str	r2, [r3, #8]
 8001e7a:	60da      	str	r2, [r3, #12]
 8001e7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e7e:	4b2f      	ldr	r3, [pc, #188]	; (8001f3c <MX_GPIO_Init+0xd4>)
 8001e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e82:	4a2e      	ldr	r2, [pc, #184]	; (8001f3c <MX_GPIO_Init+0xd4>)
 8001e84:	f043 0304 	orr.w	r3, r3, #4
 8001e88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e8a:	4b2c      	ldr	r3, [pc, #176]	; (8001f3c <MX_GPIO_Init+0xd4>)
 8001e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e8e:	f003 0304 	and.w	r3, r3, #4
 8001e92:	613b      	str	r3, [r7, #16]
 8001e94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e96:	4b29      	ldr	r3, [pc, #164]	; (8001f3c <MX_GPIO_Init+0xd4>)
 8001e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e9a:	4a28      	ldr	r2, [pc, #160]	; (8001f3c <MX_GPIO_Init+0xd4>)
 8001e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ea0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ea2:	4b26      	ldr	r3, [pc, #152]	; (8001f3c <MX_GPIO_Init+0xd4>)
 8001ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eae:	4b23      	ldr	r3, [pc, #140]	; (8001f3c <MX_GPIO_Init+0xd4>)
 8001eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb2:	4a22      	ldr	r2, [pc, #136]	; (8001f3c <MX_GPIO_Init+0xd4>)
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eba:	4b20      	ldr	r3, [pc, #128]	; (8001f3c <MX_GPIO_Init+0xd4>)
 8001ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	60bb      	str	r3, [r7, #8]
 8001ec4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec6:	4b1d      	ldr	r3, [pc, #116]	; (8001f3c <MX_GPIO_Init+0xd4>)
 8001ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eca:	4a1c      	ldr	r2, [pc, #112]	; (8001f3c <MX_GPIO_Init+0xd4>)
 8001ecc:	f043 0302 	orr.w	r3, r3, #2
 8001ed0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ed2:	4b1a      	ldr	r3, [pc, #104]	; (8001f3c <MX_GPIO_Init+0xd4>)
 8001ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	607b      	str	r3, [r7, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001ede:	2200      	movs	r2, #0
 8001ee0:	2120      	movs	r1, #32
 8001ee2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ee6:	f002 fccf 	bl	8004888 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin;
 8001eea:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001eee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ef0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001ef4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001efa:	f107 0314 	add.w	r3, r7, #20
 8001efe:	4619      	mov	r1, r3
 8001f00:	480f      	ldr	r0, [pc, #60]	; (8001f40 <MX_GPIO_Init+0xd8>)
 8001f02:	f002 fb17 	bl	8004534 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001f06:	2320      	movs	r3, #32
 8001f08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f12:	2300      	movs	r3, #0
 8001f14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001f16:	f107 0314 	add.w	r3, r7, #20
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f20:	f002 fb08 	bl	8004534 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001f24:	2200      	movs	r2, #0
 8001f26:	2100      	movs	r1, #0
 8001f28:	2028      	movs	r0, #40	; 0x28
 8001f2a:	f002 f886 	bl	800403a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f2e:	2028      	movs	r0, #40	; 0x28
 8001f30:	f002 f89f 	bl	8004072 <HAL_NVIC_EnableIRQ>

}
 8001f34:	bf00      	nop
 8001f36:	3728      	adds	r7, #40	; 0x28
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	48000800 	.word	0x48000800

08001f44 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f48:	4b1b      	ldr	r3, [pc, #108]	; (8001fb8 <MX_I2C1_Init+0x74>)
 8001f4a:	4a1c      	ldr	r2, [pc, #112]	; (8001fbc <MX_I2C1_Init+0x78>)
 8001f4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 8001f4e:	4b1a      	ldr	r3, [pc, #104]	; (8001fb8 <MX_I2C1_Init+0x74>)
 8001f50:	4a1b      	ldr	r2, [pc, #108]	; (8001fc0 <MX_I2C1_Init+0x7c>)
 8001f52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001f54:	4b18      	ldr	r3, [pc, #96]	; (8001fb8 <MX_I2C1_Init+0x74>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f5a:	4b17      	ldr	r3, [pc, #92]	; (8001fb8 <MX_I2C1_Init+0x74>)
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f60:	4b15      	ldr	r3, [pc, #84]	; (8001fb8 <MX_I2C1_Init+0x74>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001f66:	4b14      	ldr	r3, [pc, #80]	; (8001fb8 <MX_I2C1_Init+0x74>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f6c:	4b12      	ldr	r3, [pc, #72]	; (8001fb8 <MX_I2C1_Init+0x74>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f72:	4b11      	ldr	r3, [pc, #68]	; (8001fb8 <MX_I2C1_Init+0x74>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f78:	4b0f      	ldr	r3, [pc, #60]	; (8001fb8 <MX_I2C1_Init+0x74>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f7e:	480e      	ldr	r0, [pc, #56]	; (8001fb8 <MX_I2C1_Init+0x74>)
 8001f80:	f002 fccc 	bl	800491c <HAL_I2C_Init>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001f8a:	f000 f981 	bl	8002290 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f8e:	2100      	movs	r1, #0
 8001f90:	4809      	ldr	r0, [pc, #36]	; (8001fb8 <MX_I2C1_Init+0x74>)
 8001f92:	f004 fa8b 	bl	80064ac <HAL_I2CEx_ConfigAnalogFilter>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001f9c:	f000 f978 	bl	8002290 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	4805      	ldr	r0, [pc, #20]	; (8001fb8 <MX_I2C1_Init+0x74>)
 8001fa4:	f004 facd 	bl	8006542 <HAL_I2CEx_ConfigDigitalFilter>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001fae:	f000 f96f 	bl	8002290 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	200002e0 	.word	0x200002e0
 8001fbc:	40005400 	.word	0x40005400
 8001fc0:	00702991 	.word	0x00702991

08001fc4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b0ac      	sub	sp, #176	; 0xb0
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fcc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	605a      	str	r2, [r3, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	60da      	str	r2, [r3, #12]
 8001fda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fdc:	f107 0314 	add.w	r3, r7, #20
 8001fe0:	2288      	movs	r2, #136	; 0x88
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f006 fea3 	bl	8008d30 <memset>
  if(i2cHandle->Instance==I2C1)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a39      	ldr	r2, [pc, #228]	; (80020d4 <HAL_I2C_MspInit+0x110>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d16b      	bne.n	80020cc <HAL_I2C_MspInit+0x108>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ff4:	2340      	movs	r3, #64	; 0x40
 8001ff6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ffc:	f107 0314 	add.w	r3, r7, #20
 8002000:	4618      	mov	r0, r3
 8002002:	f005 f93b 	bl	800727c <HAL_RCCEx_PeriphCLKConfig>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800200c:	f000 f940 	bl	8002290 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002010:	4b31      	ldr	r3, [pc, #196]	; (80020d8 <HAL_I2C_MspInit+0x114>)
 8002012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002014:	4a30      	ldr	r2, [pc, #192]	; (80020d8 <HAL_I2C_MspInit+0x114>)
 8002016:	f043 0302 	orr.w	r3, r3, #2
 800201a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800201c:	4b2e      	ldr	r3, [pc, #184]	; (80020d8 <HAL_I2C_MspInit+0x114>)
 800201e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	613b      	str	r3, [r7, #16]
 8002026:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002028:	23c0      	movs	r3, #192	; 0xc0
 800202a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800202e:	2312      	movs	r3, #18
 8002030:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002034:	2300      	movs	r3, #0
 8002036:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800203a:	2303      	movs	r3, #3
 800203c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002040:	2304      	movs	r3, #4
 8002042:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002046:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800204a:	4619      	mov	r1, r3
 800204c:	4823      	ldr	r0, [pc, #140]	; (80020dc <HAL_I2C_MspInit+0x118>)
 800204e:	f002 fa71 	bl	8004534 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002052:	4b21      	ldr	r3, [pc, #132]	; (80020d8 <HAL_I2C_MspInit+0x114>)
 8002054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002056:	4a20      	ldr	r2, [pc, #128]	; (80020d8 <HAL_I2C_MspInit+0x114>)
 8002058:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800205c:	6593      	str	r3, [r2, #88]	; 0x58
 800205e:	4b1e      	ldr	r3, [pc, #120]	; (80020d8 <HAL_I2C_MspInit+0x114>)
 8002060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002062:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 800206a:	4b1d      	ldr	r3, [pc, #116]	; (80020e0 <HAL_I2C_MspInit+0x11c>)
 800206c:	4a1d      	ldr	r2, [pc, #116]	; (80020e4 <HAL_I2C_MspInit+0x120>)
 800206e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_3;
 8002070:	4b1b      	ldr	r3, [pc, #108]	; (80020e0 <HAL_I2C_MspInit+0x11c>)
 8002072:	2203      	movs	r2, #3
 8002074:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002076:	4b1a      	ldr	r3, [pc, #104]	; (80020e0 <HAL_I2C_MspInit+0x11c>)
 8002078:	2210      	movs	r2, #16
 800207a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800207c:	4b18      	ldr	r3, [pc, #96]	; (80020e0 <HAL_I2C_MspInit+0x11c>)
 800207e:	2200      	movs	r2, #0
 8002080:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002082:	4b17      	ldr	r3, [pc, #92]	; (80020e0 <HAL_I2C_MspInit+0x11c>)
 8002084:	2280      	movs	r2, #128	; 0x80
 8002086:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002088:	4b15      	ldr	r3, [pc, #84]	; (80020e0 <HAL_I2C_MspInit+0x11c>)
 800208a:	2200      	movs	r2, #0
 800208c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800208e:	4b14      	ldr	r3, [pc, #80]	; (80020e0 <HAL_I2C_MspInit+0x11c>)
 8002090:	2200      	movs	r2, #0
 8002092:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002094:	4b12      	ldr	r3, [pc, #72]	; (80020e0 <HAL_I2C_MspInit+0x11c>)
 8002096:	2200      	movs	r2, #0
 8002098:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800209a:	4b11      	ldr	r3, [pc, #68]	; (80020e0 <HAL_I2C_MspInit+0x11c>)
 800209c:	2200      	movs	r2, #0
 800209e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80020a0:	480f      	ldr	r0, [pc, #60]	; (80020e0 <HAL_I2C_MspInit+0x11c>)
 80020a2:	f002 f801 	bl	80040a8 <HAL_DMA_Init>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <HAL_I2C_MspInit+0xec>
    {
      Error_Handler();
 80020ac:	f000 f8f0 	bl	8002290 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a0b      	ldr	r2, [pc, #44]	; (80020e0 <HAL_I2C_MspInit+0x11c>)
 80020b4:	639a      	str	r2, [r3, #56]	; 0x38
 80020b6:	4a0a      	ldr	r2, [pc, #40]	; (80020e0 <HAL_I2C_MspInit+0x11c>)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80020bc:	2200      	movs	r2, #0
 80020be:	2100      	movs	r1, #0
 80020c0:	201f      	movs	r0, #31
 80020c2:	f001 ffba 	bl	800403a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80020c6:	201f      	movs	r0, #31
 80020c8:	f001 ffd3 	bl	8004072 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80020cc:	bf00      	nop
 80020ce:	37b0      	adds	r7, #176	; 0xb0
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40005400 	.word	0x40005400
 80020d8:	40021000 	.word	0x40021000
 80020dc:	48000400 	.word	0x48000400
 80020e0:	20000298 	.word	0x20000298
 80020e4:	4002006c 	.word	0x4002006c

080020e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020ec:	f000 fb3a 	bl	8002764 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020f0:	f000 f81e 	bl	8002130 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020f4:	f7ff feb8 	bl	8001e68 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80020f8:	f000 fa7e 	bl	80025f8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80020fc:	f7ff fd26 	bl	8001b4c <MX_ADC1_Init>
  MX_DMA_Init();
 8002100:	f7ff fe94 	bl	8001e2c <MX_DMA_Init>
  MX_I2C1_Init();
 8002104:	f7ff ff1e 	bl	8001f44 <MX_I2C1_Init>
  MX_TIM6_Init();
 8002108:	f000 fa18 	bl	800253c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_init();
 800210c:	f7ff f90a 	bl	8001324 <SSD1306_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

// roznicowa kalibracja przetwornika
HAL_ADCEx_Calibration_Start(&hadc1,ADC_DIFFERENTIAL_ENDED);
 8002110:	4904      	ldr	r1, [pc, #16]	; (8002124 <main+0x3c>)
 8002112:	4805      	ldr	r0, [pc, #20]	; (8002128 <main+0x40>)
 8002114:	f001 fda6 	bl	8003c64 <HAL_ADCEx_Calibration_Start>
HAL_TIM_Base_Start_IT(&htim6);
 8002118:	4804      	ldr	r0, [pc, #16]	; (800212c <main+0x44>)
 800211a:	f005 fdc3 	bl	8007ca4 <HAL_TIM_Base_Start_IT>

displayWelcome();
 800211e:	f7ff fe61 	bl	8001de4 <displayWelcome>
  while (1)
 8002122:	e7fe      	b.n	8002122 <main+0x3a>
 8002124:	407f0000 	.word	0x407f0000
 8002128:	20000234 	.word	0x20000234
 800212c:	200041bc 	.word	0x200041bc

08002130 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b096      	sub	sp, #88	; 0x58
 8002134:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002136:	f107 0314 	add.w	r3, r7, #20
 800213a:	2244      	movs	r2, #68	; 0x44
 800213c:	2100      	movs	r1, #0
 800213e:	4618      	mov	r0, r3
 8002140:	f006 fdf6 	bl	8008d30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002144:	463b      	mov	r3, r7
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	605a      	str	r2, [r3, #4]
 800214c:	609a      	str	r2, [r3, #8]
 800214e:	60da      	str	r2, [r3, #12]
 8002150:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002152:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002156:	f004 fa4f 	bl	80065f8 <HAL_PWREx_ControlVoltageScaling>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002160:	f000 f896 	bl	8002290 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002164:	2302      	movs	r3, #2
 8002166:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002168:	f44f 7380 	mov.w	r3, #256	; 0x100
 800216c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800216e:	2310      	movs	r3, #16
 8002170:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002172:	2302      	movs	r3, #2
 8002174:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002176:	2302      	movs	r3, #2
 8002178:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800217a:	2301      	movs	r3, #1
 800217c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800217e:	230a      	movs	r3, #10
 8002180:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002182:	2307      	movs	r3, #7
 8002184:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002186:	2302      	movs	r3, #2
 8002188:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800218a:	2302      	movs	r3, #2
 800218c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800218e:	f107 0314 	add.w	r3, r7, #20
 8002192:	4618      	mov	r0, r3
 8002194:	f004 fa86 	bl	80066a4 <HAL_RCC_OscConfig>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800219e:	f000 f877 	bl	8002290 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021a2:	230f      	movs	r3, #15
 80021a4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021a6:	2303      	movs	r3, #3
 80021a8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021aa:	2300      	movs	r3, #0
 80021ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80021ae:	2300      	movs	r3, #0
 80021b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021b2:	2300      	movs	r3, #0
 80021b4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80021b6:	463b      	mov	r3, r7
 80021b8:	2104      	movs	r1, #4
 80021ba:	4618      	mov	r0, r3
 80021bc:	f004 fe58 	bl	8006e70 <HAL_RCC_ClockConfig>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80021c6:	f000 f863 	bl	8002290 <Error_Handler>
  }
}
 80021ca:	bf00      	nop
 80021cc:	3758      	adds	r7, #88	; 0x58
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
	...

080021d4 <HAL_TIM_PeriodElapsedCallback>:
/*function HAL_TIM_PeriodElapsedCallback
 * Obsluga przerwania licznika
 * licznik ten steruje czestotliwoscia wykonania pomiaru
 * */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  if (htim == &htim6) {
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a0a      	ldr	r2, [pc, #40]	; (8002208 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d10d      	bne.n	8002200 <HAL_TIM_PeriodElapsedCallback+0x2c>
	  if(isRunning!=0){
 80021e4:	4b09      	ldr	r3, [pc, #36]	; (800220c <HAL_TIM_PeriodElapsedCallback+0x38>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d009      	beq.n	8002200 <HAL_TIM_PeriodElapsedCallback+0x2c>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); //debug Led
 80021ec:	2120      	movs	r1, #32
 80021ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021f2:	f002 fb61 	bl	80048b8 <HAL_GPIO_TogglePin>
	  WykonajPomiar(cptr);
 80021f6:	4b06      	ldr	r3, [pc, #24]	; (8002210 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7fe ffd2 	bl	80011a4 <WykonajPomiar>
	  }
  }
}
 8002200:	bf00      	nop
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	200041bc 	.word	0x200041bc
 800220c:	20000210 	.word	0x20000210
 8002210:	20000004 	.word	0x20000004

08002214 <HAL_GPIO_EXTI_Callback>:
 * function HAL_GPIO_EXTI_Callback
 * Obsluga przerwan przycisku
 * (wlacza pomiar albo go pauzuje)
 *
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	80fb      	strh	r3, [r7, #6]
	//Blue button- Start/Pause
	if(GPIO_Pin==B1_Pin){
 800221e:	88fb      	ldrh	r3, [r7, #6]
 8002220:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002224:	d111      	bne.n	800224a <HAL_GPIO_EXTI_Callback+0x36>

		if(isRunning==0){ isRunning=1;
 8002226:	4b17      	ldr	r3, [pc, #92]	; (8002284 <HAL_GPIO_EXTI_Callback+0x70>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	f083 0301 	eor.w	r3, r3, #1
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2b00      	cmp	r3, #0
 8002232:	d005      	beq.n	8002240 <HAL_GPIO_EXTI_Callback+0x2c>
 8002234:	4b13      	ldr	r3, [pc, #76]	; (8002284 <HAL_GPIO_EXTI_Callback+0x70>)
 8002236:	2201      	movs	r2, #1
 8002238:	701a      	strb	r2, [r3, #0]
		removePause();
 800223a:	f7ff fdad 	bl	8001d98 <removePause>
 800223e:	e004      	b.n	800224a <HAL_GPIO_EXTI_Callback+0x36>
		}
		else{ 	isRunning = 0;
 8002240:	4b10      	ldr	r3, [pc, #64]	; (8002284 <HAL_GPIO_EXTI_Callback+0x70>)
 8002242:	2200      	movs	r2, #0
 8002244:	701a      	strb	r2, [r3, #0]
		displayPause();
 8002246:	f7ff fdb7 	bl	8001db8 <displayPause>
		}
	}
//przycisk do wyzwalania przesylu bufora z wynikami
	if(GPIO_Pin==B2_Pin){
 800224a:	88fb      	ldrh	r3, [r7, #6]
 800224c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002250:	d114      	bne.n	800227c <HAL_GPIO_EXTI_Callback+0x68>
		if(isRunning==1){// przeslanie bufora
 8002252:	4b0c      	ldr	r3, [pc, #48]	; (8002284 <HAL_GPIO_EXTI_Callback+0x70>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d006      	beq.n	8002268 <HAL_GPIO_EXTI_Callback+0x54>
			isPushed=1;
 800225a:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <HAL_GPIO_EXTI_Callback+0x74>)
 800225c:	2201      	movs	r2, #1
 800225e:	701a      	strb	r2, [r3, #0]
			SaveLog(czujnik.Bufor);
 8002260:	480a      	ldr	r0, [pc, #40]	; (800228c <HAL_GPIO_EXTI_Callback+0x78>)
 8002262:	f7ff fc35 	bl	8001ad0 <SaveLog>


	}


}
 8002266:	e009      	b.n	800227c <HAL_GPIO_EXTI_Callback+0x68>
		else if(isRunning==0){// klikniecie jesli pomiar w stanie pauzy- czysci bufor
 8002268:	4b06      	ldr	r3, [pc, #24]	; (8002284 <HAL_GPIO_EXTI_Callback+0x70>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	f083 0301 	eor.w	r3, r3, #1
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d002      	beq.n	800227c <HAL_GPIO_EXTI_Callback+0x68>
			ClearBufor(czujnik.Bufor);
 8002276:	4805      	ldr	r0, [pc, #20]	; (800228c <HAL_GPIO_EXTI_Callback+0x78>)
 8002278:	f7fe ffee 	bl	8001258 <ClearBufor>
}
 800227c:	bf00      	nop
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	20000210 	.word	0x20000210
 8002288:	20000211 	.word	0x20000211
 800228c:	2000033c 	.word	0x2000033c

08002290 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002294:	b672      	cpsid	i
}
 8002296:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002298:	e7fe      	b.n	8002298 <Error_Handler+0x8>
	...

0800229c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022a2:	4b0f      	ldr	r3, [pc, #60]	; (80022e0 <HAL_MspInit+0x44>)
 80022a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022a6:	4a0e      	ldr	r2, [pc, #56]	; (80022e0 <HAL_MspInit+0x44>)
 80022a8:	f043 0301 	orr.w	r3, r3, #1
 80022ac:	6613      	str	r3, [r2, #96]	; 0x60
 80022ae:	4b0c      	ldr	r3, [pc, #48]	; (80022e0 <HAL_MspInit+0x44>)
 80022b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	607b      	str	r3, [r7, #4]
 80022b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022ba:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <HAL_MspInit+0x44>)
 80022bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022be:	4a08      	ldr	r2, [pc, #32]	; (80022e0 <HAL_MspInit+0x44>)
 80022c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022c4:	6593      	str	r3, [r2, #88]	; 0x58
 80022c6:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <HAL_MspInit+0x44>)
 80022c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ce:	603b      	str	r3, [r7, #0]
 80022d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	40021000 	.word	0x40021000

080022e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022e8:	e7fe      	b.n	80022e8 <NMI_Handler+0x4>

080022ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022ea:	b480      	push	{r7}
 80022ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022ee:	e7fe      	b.n	80022ee <HardFault_Handler+0x4>

080022f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022f4:	e7fe      	b.n	80022f4 <MemManage_Handler+0x4>

080022f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022f6:	b480      	push	{r7}
 80022f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022fa:	e7fe      	b.n	80022fa <BusFault_Handler+0x4>

080022fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002300:	e7fe      	b.n	8002300 <UsageFault_Handler+0x4>

08002302 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002302:	b480      	push	{r7}
 8002304:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002306:	bf00      	nop
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002314:	bf00      	nop
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800231e:	b480      	push	{r7}
 8002320:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002322:	bf00      	nop
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002330:	f000 fa74 	bl	800281c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002334:	bf00      	nop
 8002336:	bd80      	pop	{r7, pc}

08002338 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800233c:	4802      	ldr	r0, [pc, #8]	; (8002348 <DMA1_Channel6_IRQHandler+0x10>)
 800233e:	f002 f80c 	bl	800435a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	20000298 	.word	0x20000298

0800234c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002350:	4802      	ldr	r0, [pc, #8]	; (800235c <I2C1_EV_IRQHandler+0x10>)
 8002352:	f002 fd7d 	bl	8004e50 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002356:	bf00      	nop
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	200002e0 	.word	0x200002e0

08002360 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002364:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002368:	f002 fac0 	bl	80048ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800236c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002370:	f002 fabc 	bl	80048ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002374:	bf00      	nop
 8002376:	bd80      	pop	{r7, pc}

08002378 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800237c:	4802      	ldr	r0, [pc, #8]	; (8002388 <TIM6_DAC_IRQHandler+0x10>)
 800237e:	f005 fd01 	bl	8007d84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002382:	bf00      	nop
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	200041bc 	.word	0x200041bc

0800238c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
	return 1;
 8002390:	2301      	movs	r3, #1
}
 8002392:	4618      	mov	r0, r3
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <_kill>:

int _kill(int pid, int sig)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80023a6:	f006 fc91 	bl	8008ccc <__errno>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2216      	movs	r2, #22
 80023ae:	601a      	str	r2, [r3, #0]
	return -1;
 80023b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3708      	adds	r7, #8
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <_exit>:

void _exit (int status)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80023c4:	f04f 31ff 	mov.w	r1, #4294967295
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f7ff ffe7 	bl	800239c <_kill>
	while (1) {}		/* Make sure we hang here */
 80023ce:	e7fe      	b.n	80023ce <_exit+0x12>

080023d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023dc:	2300      	movs	r3, #0
 80023de:	617b      	str	r3, [r7, #20]
 80023e0:	e00a      	b.n	80023f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80023e2:	f3af 8000 	nop.w
 80023e6:	4601      	mov	r1, r0
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	1c5a      	adds	r2, r3, #1
 80023ec:	60ba      	str	r2, [r7, #8]
 80023ee:	b2ca      	uxtb	r2, r1
 80023f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	3301      	adds	r3, #1
 80023f6:	617b      	str	r3, [r7, #20]
 80023f8:	697a      	ldr	r2, [r7, #20]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	dbf0      	blt.n	80023e2 <_read+0x12>
	}

return len;
 8002400:	687b      	ldr	r3, [r7, #4]
}
 8002402:	4618      	mov	r0, r3
 8002404:	3718      	adds	r7, #24
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b086      	sub	sp, #24
 800240e:	af00      	add	r7, sp, #0
 8002410:	60f8      	str	r0, [r7, #12]
 8002412:	60b9      	str	r1, [r7, #8]
 8002414:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002416:	2300      	movs	r3, #0
 8002418:	617b      	str	r3, [r7, #20]
 800241a:	e009      	b.n	8002430 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	1c5a      	adds	r2, r3, #1
 8002420:	60ba      	str	r2, [r7, #8]
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff fb33 	bl	8001a90 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	3301      	adds	r3, #1
 800242e:	617b      	str	r3, [r7, #20]
 8002430:	697a      	ldr	r2, [r7, #20]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	429a      	cmp	r2, r3
 8002436:	dbf1      	blt.n	800241c <_write+0x12>
	}
	return len;
 8002438:	687b      	ldr	r3, [r7, #4]
}
 800243a:	4618      	mov	r0, r3
 800243c:	3718      	adds	r7, #24
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <_close>:

int _close(int file)
{
 8002442:	b480      	push	{r7}
 8002444:	b083      	sub	sp, #12
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
	return -1;
 800244a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800244e:	4618      	mov	r0, r3
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
 8002462:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800246a:	605a      	str	r2, [r3, #4]
	return 0;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <_isatty>:

int _isatty(int file)
{
 800247a:	b480      	push	{r7}
 800247c:	b083      	sub	sp, #12
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
	return 1;
 8002482:	2301      	movs	r3, #1
}
 8002484:	4618      	mov	r0, r3
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
	return 0;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3714      	adds	r7, #20
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
	...

080024ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b086      	sub	sp, #24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024b4:	4a14      	ldr	r2, [pc, #80]	; (8002508 <_sbrk+0x5c>)
 80024b6:	4b15      	ldr	r3, [pc, #84]	; (800250c <_sbrk+0x60>)
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024c0:	4b13      	ldr	r3, [pc, #76]	; (8002510 <_sbrk+0x64>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d102      	bne.n	80024ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024c8:	4b11      	ldr	r3, [pc, #68]	; (8002510 <_sbrk+0x64>)
 80024ca:	4a12      	ldr	r2, [pc, #72]	; (8002514 <_sbrk+0x68>)
 80024cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024ce:	4b10      	ldr	r3, [pc, #64]	; (8002510 <_sbrk+0x64>)
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4413      	add	r3, r2
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d207      	bcs.n	80024ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024dc:	f006 fbf6 	bl	8008ccc <__errno>
 80024e0:	4603      	mov	r3, r0
 80024e2:	220c      	movs	r2, #12
 80024e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024e6:	f04f 33ff 	mov.w	r3, #4294967295
 80024ea:	e009      	b.n	8002500 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024ec:	4b08      	ldr	r3, [pc, #32]	; (8002510 <_sbrk+0x64>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024f2:	4b07      	ldr	r3, [pc, #28]	; (8002510 <_sbrk+0x64>)
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4413      	add	r3, r2
 80024fa:	4a05      	ldr	r2, [pc, #20]	; (8002510 <_sbrk+0x64>)
 80024fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024fe:	68fb      	ldr	r3, [r7, #12]
}
 8002500:	4618      	mov	r0, r3
 8002502:	3718      	adds	r7, #24
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	20018000 	.word	0x20018000
 800250c:	00000400 	.word	0x00000400
 8002510:	20000214 	.word	0x20000214
 8002514:	200042a0 	.word	0x200042a0

08002518 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800251c:	4b06      	ldr	r3, [pc, #24]	; (8002538 <SystemInit+0x20>)
 800251e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002522:	4a05      	ldr	r2, [pc, #20]	; (8002538 <SystemInit+0x20>)
 8002524:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002528:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800252c:	bf00      	nop
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	e000ed00 	.word	0xe000ed00

0800253c <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002542:	1d3b      	adds	r3, r7, #4
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	605a      	str	r2, [r3, #4]
 800254a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800254c:	4b15      	ldr	r3, [pc, #84]	; (80025a4 <MX_TIM6_Init+0x68>)
 800254e:	4a16      	ldr	r2, [pc, #88]	; (80025a8 <MX_TIM6_Init+0x6c>)
 8002550:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8002552:	4b14      	ldr	r3, [pc, #80]	; (80025a4 <MX_TIM6_Init+0x68>)
 8002554:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8002558:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800255a:	4b12      	ldr	r3, [pc, #72]	; (80025a4 <MX_TIM6_Init+0x68>)
 800255c:	2200      	movs	r2, #0
 800255e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8002560:	4b10      	ldr	r3, [pc, #64]	; (80025a4 <MX_TIM6_Init+0x68>)
 8002562:	f242 720f 	movw	r2, #9999	; 0x270f
 8002566:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002568:	4b0e      	ldr	r3, [pc, #56]	; (80025a4 <MX_TIM6_Init+0x68>)
 800256a:	2200      	movs	r2, #0
 800256c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800256e:	480d      	ldr	r0, [pc, #52]	; (80025a4 <MX_TIM6_Init+0x68>)
 8002570:	f005 fb40 	bl	8007bf4 <HAL_TIM_Base_Init>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800257a:	f7ff fe89 	bl	8002290 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800257e:	2300      	movs	r3, #0
 8002580:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002582:	2300      	movs	r3, #0
 8002584:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002586:	1d3b      	adds	r3, r7, #4
 8002588:	4619      	mov	r1, r3
 800258a:	4806      	ldr	r0, [pc, #24]	; (80025a4 <MX_TIM6_Init+0x68>)
 800258c:	f005 fddc 	bl	8008148 <HAL_TIMEx_MasterConfigSynchronization>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8002596:	f7ff fe7b 	bl	8002290 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800259a:	bf00      	nop
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	200041bc 	.word	0x200041bc
 80025a8:	40001000 	.word	0x40001000

080025ac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a0d      	ldr	r2, [pc, #52]	; (80025f0 <HAL_TIM_Base_MspInit+0x44>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d113      	bne.n	80025e6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80025be:	4b0d      	ldr	r3, [pc, #52]	; (80025f4 <HAL_TIM_Base_MspInit+0x48>)
 80025c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c2:	4a0c      	ldr	r2, [pc, #48]	; (80025f4 <HAL_TIM_Base_MspInit+0x48>)
 80025c4:	f043 0310 	orr.w	r3, r3, #16
 80025c8:	6593      	str	r3, [r2, #88]	; 0x58
 80025ca:	4b0a      	ldr	r3, [pc, #40]	; (80025f4 <HAL_TIM_Base_MspInit+0x48>)
 80025cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ce:	f003 0310 	and.w	r3, r3, #16
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 80025d6:	2200      	movs	r2, #0
 80025d8:	2106      	movs	r1, #6
 80025da:	2036      	movs	r0, #54	; 0x36
 80025dc:	f001 fd2d 	bl	800403a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80025e0:	2036      	movs	r0, #54	; 0x36
 80025e2:	f001 fd46 	bl	8004072 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80025e6:	bf00      	nop
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	40001000 	.word	0x40001000
 80025f4:	40021000 	.word	0x40021000

080025f8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80025fc:	4b14      	ldr	r3, [pc, #80]	; (8002650 <MX_USART2_UART_Init+0x58>)
 80025fe:	4a15      	ldr	r2, [pc, #84]	; (8002654 <MX_USART2_UART_Init+0x5c>)
 8002600:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002602:	4b13      	ldr	r3, [pc, #76]	; (8002650 <MX_USART2_UART_Init+0x58>)
 8002604:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002608:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800260a:	4b11      	ldr	r3, [pc, #68]	; (8002650 <MX_USART2_UART_Init+0x58>)
 800260c:	2200      	movs	r2, #0
 800260e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002610:	4b0f      	ldr	r3, [pc, #60]	; (8002650 <MX_USART2_UART_Init+0x58>)
 8002612:	2200      	movs	r2, #0
 8002614:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002616:	4b0e      	ldr	r3, [pc, #56]	; (8002650 <MX_USART2_UART_Init+0x58>)
 8002618:	2200      	movs	r2, #0
 800261a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800261c:	4b0c      	ldr	r3, [pc, #48]	; (8002650 <MX_USART2_UART_Init+0x58>)
 800261e:	220c      	movs	r2, #12
 8002620:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002622:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <MX_USART2_UART_Init+0x58>)
 8002624:	2200      	movs	r2, #0
 8002626:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002628:	4b09      	ldr	r3, [pc, #36]	; (8002650 <MX_USART2_UART_Init+0x58>)
 800262a:	2200      	movs	r2, #0
 800262c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800262e:	4b08      	ldr	r3, [pc, #32]	; (8002650 <MX_USART2_UART_Init+0x58>)
 8002630:	2200      	movs	r2, #0
 8002632:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002634:	4b06      	ldr	r3, [pc, #24]	; (8002650 <MX_USART2_UART_Init+0x58>)
 8002636:	2200      	movs	r2, #0
 8002638:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800263a:	4805      	ldr	r0, [pc, #20]	; (8002650 <MX_USART2_UART_Init+0x58>)
 800263c:	f005 fe2a 	bl	8008294 <HAL_UART_Init>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002646:	f7ff fe23 	bl	8002290 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800264a:	bf00      	nop
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	20004208 	.word	0x20004208
 8002654:	40004400 	.word	0x40004400

08002658 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b0ac      	sub	sp, #176	; 0xb0
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002660:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	605a      	str	r2, [r3, #4]
 800266a:	609a      	str	r2, [r3, #8]
 800266c:	60da      	str	r2, [r3, #12]
 800266e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002670:	f107 0314 	add.w	r3, r7, #20
 8002674:	2288      	movs	r2, #136	; 0x88
 8002676:	2100      	movs	r1, #0
 8002678:	4618      	mov	r0, r3
 800267a:	f006 fb59 	bl	8008d30 <memset>
  if(uartHandle->Instance==USART2)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a21      	ldr	r2, [pc, #132]	; (8002708 <HAL_UART_MspInit+0xb0>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d13b      	bne.n	8002700 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002688:	2302      	movs	r3, #2
 800268a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800268c:	2300      	movs	r3, #0
 800268e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002690:	f107 0314 	add.w	r3, r7, #20
 8002694:	4618      	mov	r0, r3
 8002696:	f004 fdf1 	bl	800727c <HAL_RCCEx_PeriphCLKConfig>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80026a0:	f7ff fdf6 	bl	8002290 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80026a4:	4b19      	ldr	r3, [pc, #100]	; (800270c <HAL_UART_MspInit+0xb4>)
 80026a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a8:	4a18      	ldr	r2, [pc, #96]	; (800270c <HAL_UART_MspInit+0xb4>)
 80026aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026ae:	6593      	str	r3, [r2, #88]	; 0x58
 80026b0:	4b16      	ldr	r3, [pc, #88]	; (800270c <HAL_UART_MspInit+0xb4>)
 80026b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b8:	613b      	str	r3, [r7, #16]
 80026ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026bc:	4b13      	ldr	r3, [pc, #76]	; (800270c <HAL_UART_MspInit+0xb4>)
 80026be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026c0:	4a12      	ldr	r2, [pc, #72]	; (800270c <HAL_UART_MspInit+0xb4>)
 80026c2:	f043 0301 	orr.w	r3, r3, #1
 80026c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026c8:	4b10      	ldr	r3, [pc, #64]	; (800270c <HAL_UART_MspInit+0xb4>)
 80026ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80026d4:	230c      	movs	r3, #12
 80026d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026da:	2302      	movs	r3, #2
 80026dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e0:	2300      	movs	r3, #0
 80026e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026e6:	2303      	movs	r3, #3
 80026e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026ec:	2307      	movs	r3, #7
 80026ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80026f6:	4619      	mov	r1, r3
 80026f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026fc:	f001 ff1a 	bl	8004534 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002700:	bf00      	nop
 8002702:	37b0      	adds	r7, #176	; 0xb0
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	40004400 	.word	0x40004400
 800270c:	40021000 	.word	0x40021000

08002710 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002710:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002748 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002714:	f7ff ff00 	bl	8002518 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002718:	480c      	ldr	r0, [pc, #48]	; (800274c <LoopForever+0x6>)
  ldr r1, =_edata
 800271a:	490d      	ldr	r1, [pc, #52]	; (8002750 <LoopForever+0xa>)
  ldr r2, =_sidata
 800271c:	4a0d      	ldr	r2, [pc, #52]	; (8002754 <LoopForever+0xe>)
  movs r3, #0
 800271e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002720:	e002      	b.n	8002728 <LoopCopyDataInit>

08002722 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002722:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002724:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002726:	3304      	adds	r3, #4

08002728 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002728:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800272a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800272c:	d3f9      	bcc.n	8002722 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800272e:	4a0a      	ldr	r2, [pc, #40]	; (8002758 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002730:	4c0a      	ldr	r4, [pc, #40]	; (800275c <LoopForever+0x16>)
  movs r3, #0
 8002732:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002734:	e001      	b.n	800273a <LoopFillZerobss>

08002736 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002736:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002738:	3204      	adds	r2, #4

0800273a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800273a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800273c:	d3fb      	bcc.n	8002736 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800273e:	f006 facb 	bl	8008cd8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002742:	f7ff fcd1 	bl	80020e8 <main>

08002746 <LoopForever>:

LoopForever:
    b LoopForever
 8002746:	e7fe      	b.n	8002746 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002748:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800274c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002750:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002754:	0800c44c 	.word	0x0800c44c
  ldr r2, =_sbss
 8002758:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 800275c:	200042a0 	.word	0x200042a0

08002760 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002760:	e7fe      	b.n	8002760 <ADC1_2_IRQHandler>
	...

08002764 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800276a:	2300      	movs	r3, #0
 800276c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800276e:	4b0c      	ldr	r3, [pc, #48]	; (80027a0 <HAL_Init+0x3c>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a0b      	ldr	r2, [pc, #44]	; (80027a0 <HAL_Init+0x3c>)
 8002774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002778:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800277a:	2003      	movs	r0, #3
 800277c:	f001 fc52 	bl	8004024 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002780:	2000      	movs	r0, #0
 8002782:	f000 f80f 	bl	80027a4 <HAL_InitTick>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d002      	beq.n	8002792 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	71fb      	strb	r3, [r7, #7]
 8002790:	e001      	b.n	8002796 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002792:	f7ff fd83 	bl	800229c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002796:	79fb      	ldrb	r3, [r7, #7]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40022000 	.word	0x40022000

080027a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80027ac:	2300      	movs	r3, #0
 80027ae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80027b0:	4b17      	ldr	r3, [pc, #92]	; (8002810 <HAL_InitTick+0x6c>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d023      	beq.n	8002800 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80027b8:	4b16      	ldr	r3, [pc, #88]	; (8002814 <HAL_InitTick+0x70>)
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	4b14      	ldr	r3, [pc, #80]	; (8002810 <HAL_InitTick+0x6c>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	4619      	mov	r1, r3
 80027c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80027ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ce:	4618      	mov	r0, r3
 80027d0:	f001 fc5d 	bl	800408e <HAL_SYSTICK_Config>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d10f      	bne.n	80027fa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2b0f      	cmp	r3, #15
 80027de:	d809      	bhi.n	80027f4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027e0:	2200      	movs	r2, #0
 80027e2:	6879      	ldr	r1, [r7, #4]
 80027e4:	f04f 30ff 	mov.w	r0, #4294967295
 80027e8:	f001 fc27 	bl	800403a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027ec:	4a0a      	ldr	r2, [pc, #40]	; (8002818 <HAL_InitTick+0x74>)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6013      	str	r3, [r2, #0]
 80027f2:	e007      	b.n	8002804 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	73fb      	strb	r3, [r7, #15]
 80027f8:	e004      	b.n	8002804 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	73fb      	strb	r3, [r7, #15]
 80027fe:	e001      	b.n	8002804 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002804:	7bfb      	ldrb	r3, [r7, #15]
}
 8002806:	4618      	mov	r0, r3
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	20000010 	.word	0x20000010
 8002814:	20000008 	.word	0x20000008
 8002818:	2000000c 	.word	0x2000000c

0800281c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002820:	4b06      	ldr	r3, [pc, #24]	; (800283c <HAL_IncTick+0x20>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	461a      	mov	r2, r3
 8002826:	4b06      	ldr	r3, [pc, #24]	; (8002840 <HAL_IncTick+0x24>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4413      	add	r3, r2
 800282c:	4a04      	ldr	r2, [pc, #16]	; (8002840 <HAL_IncTick+0x24>)
 800282e:	6013      	str	r3, [r2, #0]
}
 8002830:	bf00      	nop
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	20000010 	.word	0x20000010
 8002840:	2000428c 	.word	0x2000428c

08002844 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  return uwTick;
 8002848:	4b03      	ldr	r3, [pc, #12]	; (8002858 <HAL_GetTick+0x14>)
 800284a:	681b      	ldr	r3, [r3, #0]
}
 800284c:	4618      	mov	r0, r3
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	2000428c 	.word	0x2000428c

0800285c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	431a      	orrs	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	609a      	str	r2, [r3, #8]
}
 8002876:	bf00      	nop
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr

08002882 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002882:	b480      	push	{r7}
 8002884:	b083      	sub	sp, #12
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
 800288a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	431a      	orrs	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	609a      	str	r2, [r3, #8]
}
 800289c:	bf00      	nop
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b087      	sub	sp, #28
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
 80028d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	3360      	adds	r3, #96	; 0x60
 80028d6:	461a      	mov	r2, r3
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	4b08      	ldr	r3, [pc, #32]	; (8002908 <LL_ADC_SetOffset+0x44>)
 80028e6:	4013      	ands	r3, r2
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	430a      	orrs	r2, r1
 80028f2:	4313      	orrs	r3, r2
 80028f4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80028fc:	bf00      	nop
 80028fe:	371c      	adds	r7, #28
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	03fff000 	.word	0x03fff000

0800290c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	3360      	adds	r3, #96	; 0x60
 800291a:	461a      	mov	r2, r3
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	4413      	add	r3, r2
 8002922:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800292c:	4618      	mov	r0, r3
 800292e:	3714      	adds	r7, #20
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002938:	b480      	push	{r7}
 800293a:	b087      	sub	sp, #28
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	3360      	adds	r3, #96	; 0x60
 8002948:	461a      	mov	r2, r3
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4413      	add	r3, r2
 8002950:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	431a      	orrs	r2, r3
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002962:	bf00      	nop
 8002964:	371c      	adds	r7, #28
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr

0800296e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800296e:	b480      	push	{r7}
 8002970:	b083      	sub	sp, #12
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002982:	2301      	movs	r3, #1
 8002984:	e000      	b.n	8002988 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002994:	b480      	push	{r7}
 8002996:	b087      	sub	sp, #28
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	3330      	adds	r3, #48	; 0x30
 80029a4:	461a      	mov	r2, r3
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	0a1b      	lsrs	r3, r3, #8
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	f003 030c 	and.w	r3, r3, #12
 80029b0:	4413      	add	r3, r2
 80029b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	f003 031f 	and.w	r3, r3, #31
 80029be:	211f      	movs	r1, #31
 80029c0:	fa01 f303 	lsl.w	r3, r1, r3
 80029c4:	43db      	mvns	r3, r3
 80029c6:	401a      	ands	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	0e9b      	lsrs	r3, r3, #26
 80029cc:	f003 011f 	and.w	r1, r3, #31
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	f003 031f 	and.w	r3, r3, #31
 80029d6:	fa01 f303 	lsl.w	r3, r1, r3
 80029da:	431a      	orrs	r2, r3
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80029e0:	bf00      	nop
 80029e2:	371c      	adds	r7, #28
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b087      	sub	sp, #28
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	3314      	adds	r3, #20
 80029fc:	461a      	mov	r2, r3
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	0e5b      	lsrs	r3, r3, #25
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	f003 0304 	and.w	r3, r3, #4
 8002a08:	4413      	add	r3, r2
 8002a0a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	0d1b      	lsrs	r3, r3, #20
 8002a14:	f003 031f 	and.w	r3, r3, #31
 8002a18:	2107      	movs	r1, #7
 8002a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1e:	43db      	mvns	r3, r3
 8002a20:	401a      	ands	r2, r3
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	0d1b      	lsrs	r3, r3, #20
 8002a26:	f003 031f 	and.w	r3, r3, #31
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a30:	431a      	orrs	r2, r3
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002a36:	bf00      	nop
 8002a38:	371c      	adds	r7, #28
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
	...

08002a44 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	401a      	ands	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f003 0318 	and.w	r3, r3, #24
 8002a66:	4908      	ldr	r1, [pc, #32]	; (8002a88 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002a68:	40d9      	lsrs	r1, r3
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	400b      	ands	r3, r1
 8002a6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a72:	431a      	orrs	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002a7a:	bf00      	nop
 8002a7c:	3714      	adds	r7, #20
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	0007ffff 	.word	0x0007ffff

08002a8c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f003 031f 	and.w	r3, r3, #31
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002ad4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	6093      	str	r3, [r2, #8]
}
 8002adc:	bf00      	nop
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002af8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002afc:	d101      	bne.n	8002b02 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002afe:	2301      	movs	r3, #1
 8002b00:	e000      	b.n	8002b04 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002b20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b24:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b4c:	d101      	bne.n	8002b52 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e000      	b.n	8002b54 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b74:	f043 0201 	orr.w	r2, r3, #1
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b98:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b9c:	f043 0202 	orr.w	r2, r3, #2
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f003 0301 	and.w	r3, r3, #1
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d101      	bne.n	8002bc8 <LL_ADC_IsEnabled+0x18>
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e000      	b.n	8002bca <LL_ADC_IsEnabled+0x1a>
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr

08002bd6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b083      	sub	sp, #12
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d101      	bne.n	8002bee <LL_ADC_IsDisableOngoing+0x18>
 8002bea:	2301      	movs	r3, #1
 8002bec:	e000      	b.n	8002bf0 <LL_ADC_IsDisableOngoing+0x1a>
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c0c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c10:	f043 0204 	orr.w	r2, r3, #4
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f003 0304 	and.w	r3, r3, #4
 8002c34:	2b04      	cmp	r3, #4
 8002c36:	d101      	bne.n	8002c3c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e000      	b.n	8002c3e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b083      	sub	sp, #12
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f003 0308 	and.w	r3, r3, #8
 8002c5a:	2b08      	cmp	r3, #8
 8002c5c:	d101      	bne.n	8002c62 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e000      	b.n	8002c64 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c70:	b590      	push	{r4, r7, lr}
 8002c72:	b089      	sub	sp, #36	; 0x24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e136      	b.n	8002ef8 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d109      	bne.n	8002cac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f7fe ffdb 	bl	8001c54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff ff19 	bl	8002ae8 <LL_ADC_IsDeepPowerDownEnabled>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d004      	beq.n	8002cc6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7ff feff 	bl	8002ac4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7ff ff34 	bl	8002b38 <LL_ADC_IsInternalRegulatorEnabled>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d115      	bne.n	8002d02 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7ff ff18 	bl	8002b10 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ce0:	4b87      	ldr	r3, [pc, #540]	; (8002f00 <HAL_ADC_Init+0x290>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	099b      	lsrs	r3, r3, #6
 8002ce6:	4a87      	ldr	r2, [pc, #540]	; (8002f04 <HAL_ADC_Init+0x294>)
 8002ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cec:	099b      	lsrs	r3, r3, #6
 8002cee:	3301      	adds	r3, #1
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002cf4:	e002      	b.n	8002cfc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1f9      	bne.n	8002cf6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7ff ff16 	bl	8002b38 <LL_ADC_IsInternalRegulatorEnabled>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d10d      	bne.n	8002d2e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d16:	f043 0210 	orr.w	r2, r3, #16
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d22:	f043 0201 	orr.w	r2, r3, #1
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7ff ff76 	bl	8002c24 <LL_ADC_REG_IsConversionOngoing>
 8002d38:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d3e:	f003 0310 	and.w	r3, r3, #16
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f040 80cf 	bne.w	8002ee6 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f040 80cb 	bne.w	8002ee6 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d54:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002d58:	f043 0202 	orr.w	r2, r3, #2
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7ff ff23 	bl	8002bb0 <LL_ADC_IsEnabled>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d115      	bne.n	8002d9c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d70:	4865      	ldr	r0, [pc, #404]	; (8002f08 <HAL_ADC_Init+0x298>)
 8002d72:	f7ff ff1d 	bl	8002bb0 <LL_ADC_IsEnabled>
 8002d76:	4604      	mov	r4, r0
 8002d78:	4864      	ldr	r0, [pc, #400]	; (8002f0c <HAL_ADC_Init+0x29c>)
 8002d7a:	f7ff ff19 	bl	8002bb0 <LL_ADC_IsEnabled>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	431c      	orrs	r4, r3
 8002d82:	4863      	ldr	r0, [pc, #396]	; (8002f10 <HAL_ADC_Init+0x2a0>)
 8002d84:	f7ff ff14 	bl	8002bb0 <LL_ADC_IsEnabled>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	4323      	orrs	r3, r4
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d105      	bne.n	8002d9c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	4619      	mov	r1, r3
 8002d96:	485f      	ldr	r0, [pc, #380]	; (8002f14 <HAL_ADC_Init+0x2a4>)
 8002d98:	f7ff fd60 	bl	800285c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	7e5b      	ldrb	r3, [r3, #25]
 8002da0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002da6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002dac:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002db2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dba:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d106      	bne.n	8002dd8 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	045b      	lsls	r3, r3, #17
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d009      	beq.n	8002df4 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dec:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68da      	ldr	r2, [r3, #12]
 8002dfa:	4b47      	ldr	r3, [pc, #284]	; (8002f18 <HAL_ADC_Init+0x2a8>)
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	6812      	ldr	r2, [r2, #0]
 8002e02:	69b9      	ldr	r1, [r7, #24]
 8002e04:	430b      	orrs	r3, r1
 8002e06:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff ff09 	bl	8002c24 <LL_ADC_REG_IsConversionOngoing>
 8002e12:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff ff16 	bl	8002c4a <LL_ADC_INJ_IsConversionOngoing>
 8002e1e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d13d      	bne.n	8002ea2 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d13a      	bne.n	8002ea2 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e30:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e38:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e48:	f023 0302 	bic.w	r3, r3, #2
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	6812      	ldr	r2, [r2, #0]
 8002e50:	69b9      	ldr	r1, [r7, #24]
 8002e52:	430b      	orrs	r3, r1
 8002e54:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d118      	bne.n	8002e92 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002e6a:	f023 0304 	bic.w	r3, r3, #4
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e76:	4311      	orrs	r1, r2
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002e7c:	4311      	orrs	r1, r2
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002e82:	430a      	orrs	r2, r1
 8002e84:	431a      	orrs	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f042 0201 	orr.w	r2, r2, #1
 8002e8e:	611a      	str	r2, [r3, #16]
 8002e90:	e007      	b.n	8002ea2 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	691a      	ldr	r2, [r3, #16]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f022 0201 	bic.w	r2, r2, #1
 8002ea0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d10c      	bne.n	8002ec4 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb0:	f023 010f 	bic.w	r1, r3, #15
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	69db      	ldr	r3, [r3, #28]
 8002eb8:	1e5a      	subs	r2, r3, #1
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	631a      	str	r2, [r3, #48]	; 0x30
 8002ec2:	e007      	b.n	8002ed4 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f022 020f 	bic.w	r2, r2, #15
 8002ed2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed8:	f023 0303 	bic.w	r3, r3, #3
 8002edc:	f043 0201 	orr.w	r2, r3, #1
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	655a      	str	r2, [r3, #84]	; 0x54
 8002ee4:	e007      	b.n	8002ef6 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eea:	f043 0210 	orr.w	r2, r3, #16
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ef6:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3724      	adds	r7, #36	; 0x24
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd90      	pop	{r4, r7, pc}
 8002f00:	20000008 	.word	0x20000008
 8002f04:	053e2d63 	.word	0x053e2d63
 8002f08:	50040000 	.word	0x50040000
 8002f0c:	50040100 	.word	0x50040100
 8002f10:	50040200 	.word	0x50040200
 8002f14:	50040300 	.word	0x50040300
 8002f18:	fff0c007 	.word	0xfff0c007

08002f1c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f24:	4857      	ldr	r0, [pc, #348]	; (8003084 <HAL_ADC_Start+0x168>)
 8002f26:	f7ff fdb1 	bl	8002a8c <LL_ADC_GetMultimode>
 8002f2a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff fe77 	bl	8002c24 <LL_ADC_REG_IsConversionOngoing>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f040 809c 	bne.w	8003076 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d101      	bne.n	8002f4c <HAL_ADC_Start+0x30>
 8002f48:	2302      	movs	r3, #2
 8002f4a:	e097      	b.n	800307c <HAL_ADC_Start+0x160>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f000 fd71 	bl	8003a3c <ADC_Enable>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002f5e:	7dfb      	ldrb	r3, [r7, #23]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f040 8083 	bne.w	800306c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f6a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f6e:	f023 0301 	bic.w	r3, r3, #1
 8002f72:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a42      	ldr	r2, [pc, #264]	; (8003088 <HAL_ADC_Start+0x16c>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d002      	beq.n	8002f8a <HAL_ADC_Start+0x6e>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	e000      	b.n	8002f8c <HAL_ADC_Start+0x70>
 8002f8a:	4b40      	ldr	r3, [pc, #256]	; (800308c <HAL_ADC_Start+0x170>)
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	6812      	ldr	r2, [r2, #0]
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d002      	beq.n	8002f9a <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d105      	bne.n	8002fa6 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f9e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002faa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fb2:	d106      	bne.n	8002fc2 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb8:	f023 0206 	bic.w	r2, r3, #6
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	659a      	str	r2, [r3, #88]	; 0x58
 8002fc0:	e002      	b.n	8002fc8 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	221c      	movs	r2, #28
 8002fce:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a2a      	ldr	r2, [pc, #168]	; (8003088 <HAL_ADC_Start+0x16c>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d002      	beq.n	8002fe8 <HAL_ADC_Start+0xcc>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	e000      	b.n	8002fea <HAL_ADC_Start+0xce>
 8002fe8:	4b28      	ldr	r3, [pc, #160]	; (800308c <HAL_ADC_Start+0x170>)
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	6812      	ldr	r2, [r2, #0]
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d008      	beq.n	8003004 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d005      	beq.n	8003004 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	2b05      	cmp	r3, #5
 8002ffc:	d002      	beq.n	8003004 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	2b09      	cmp	r3, #9
 8003002:	d114      	bne.n	800302e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d007      	beq.n	8003022 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003016:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800301a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4618      	mov	r0, r3
 8003028:	f7ff fde8 	bl	8002bfc <LL_ADC_REG_StartConversion>
 800302c:	e025      	b.n	800307a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003032:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a12      	ldr	r2, [pc, #72]	; (8003088 <HAL_ADC_Start+0x16c>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d002      	beq.n	800304a <HAL_ADC_Start+0x12e>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	e000      	b.n	800304c <HAL_ADC_Start+0x130>
 800304a:	4b10      	ldr	r3, [pc, #64]	; (800308c <HAL_ADC_Start+0x170>)
 800304c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00f      	beq.n	800307a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800305e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003062:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	655a      	str	r2, [r3, #84]	; 0x54
 800306a:	e006      	b.n	800307a <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003074:	e001      	b.n	800307a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003076:	2302      	movs	r3, #2
 8003078:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800307a:	7dfb      	ldrb	r3, [r7, #23]
}
 800307c:	4618      	mov	r0, r3
 800307e:	3718      	adds	r7, #24
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	50040300 	.word	0x50040300
 8003088:	50040100 	.word	0x50040100
 800308c:	50040000 	.word	0x50040000

08003090 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b088      	sub	sp, #32
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800309a:	4866      	ldr	r0, [pc, #408]	; (8003234 <HAL_ADC_PollForConversion+0x1a4>)
 800309c:	f7ff fcf6 	bl	8002a8c <LL_ADC_GetMultimode>
 80030a0:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	2b08      	cmp	r3, #8
 80030a8:	d102      	bne.n	80030b0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80030aa:	2308      	movs	r3, #8
 80030ac:	61fb      	str	r3, [r7, #28]
 80030ae:	e02a      	b.n	8003106 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d005      	beq.n	80030c2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	2b05      	cmp	r3, #5
 80030ba:	d002      	beq.n	80030c2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	2b09      	cmp	r3, #9
 80030c0:	d111      	bne.n	80030e6 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	f003 0301 	and.w	r3, r3, #1
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d007      	beq.n	80030e0 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d4:	f043 0220 	orr.w	r2, r3, #32
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e0a4      	b.n	800322a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80030e0:	2304      	movs	r3, #4
 80030e2:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80030e4:	e00f      	b.n	8003106 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80030e6:	4853      	ldr	r0, [pc, #332]	; (8003234 <HAL_ADC_PollForConversion+0x1a4>)
 80030e8:	f7ff fcde 	bl	8002aa8 <LL_ADC_GetMultiDMATransfer>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d007      	beq.n	8003102 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f6:	f043 0220 	orr.w	r2, r3, #32
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e093      	b.n	800322a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003102:	2304      	movs	r3, #4
 8003104:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003106:	f7ff fb9d 	bl	8002844 <HAL_GetTick>
 800310a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800310c:	e021      	b.n	8003152 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003114:	d01d      	beq.n	8003152 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003116:	f7ff fb95 	bl	8002844 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	683a      	ldr	r2, [r7, #0]
 8003122:	429a      	cmp	r2, r3
 8003124:	d302      	bcc.n	800312c <HAL_ADC_PollForConversion+0x9c>
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d112      	bne.n	8003152 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	4013      	ands	r3, r2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d10b      	bne.n	8003152 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800313e:	f043 0204 	orr.w	r2, r3, #4
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e06b      	b.n	800322a <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	4013      	ands	r3, r2
 800315c:	2b00      	cmp	r3, #0
 800315e:	d0d6      	beq.n	800310e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003164:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4618      	mov	r0, r3
 8003172:	f7ff fbfc 	bl	800296e <LL_ADC_REG_IsTriggerSourceSWStart>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d01c      	beq.n	80031b6 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	7e5b      	ldrb	r3, [r3, #25]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d118      	bne.n	80031b6 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0308 	and.w	r3, r3, #8
 800318e:	2b08      	cmp	r3, #8
 8003190:	d111      	bne.n	80031b6 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003196:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d105      	bne.n	80031b6 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ae:	f043 0201 	orr.w	r2, r3, #1
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a1f      	ldr	r2, [pc, #124]	; (8003238 <HAL_ADC_PollForConversion+0x1a8>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d002      	beq.n	80031c6 <HAL_ADC_PollForConversion+0x136>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	e000      	b.n	80031c8 <HAL_ADC_PollForConversion+0x138>
 80031c6:	4b1d      	ldr	r3, [pc, #116]	; (800323c <HAL_ADC_PollForConversion+0x1ac>)
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	6812      	ldr	r2, [r2, #0]
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d008      	beq.n	80031e2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d005      	beq.n	80031e2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	2b05      	cmp	r3, #5
 80031da:	d002      	beq.n	80031e2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	2b09      	cmp	r3, #9
 80031e0:	d104      	bne.n	80031ec <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	61bb      	str	r3, [r7, #24]
 80031ea:	e00c      	b.n	8003206 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a11      	ldr	r2, [pc, #68]	; (8003238 <HAL_ADC_PollForConversion+0x1a8>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d002      	beq.n	80031fc <HAL_ADC_PollForConversion+0x16c>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	e000      	b.n	80031fe <HAL_ADC_PollForConversion+0x16e>
 80031fc:	4b0f      	ldr	r3, [pc, #60]	; (800323c <HAL_ADC_PollForConversion+0x1ac>)
 80031fe:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	2b08      	cmp	r3, #8
 800320a:	d104      	bne.n	8003216 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2208      	movs	r2, #8
 8003212:	601a      	str	r2, [r3, #0]
 8003214:	e008      	b.n	8003228 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d103      	bne.n	8003228 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	220c      	movs	r2, #12
 8003226:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3720      	adds	r7, #32
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	50040300 	.word	0x50040300
 8003238:	50040100 	.word	0x50040100
 800323c:	50040000 	.word	0x50040000

08003240 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800324e:	4618      	mov	r0, r3
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
	...

0800325c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b0b6      	sub	sp, #216	; 0xd8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003266:	2300      	movs	r3, #0
 8003268:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800326c:	2300      	movs	r3, #0
 800326e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003276:	2b01      	cmp	r3, #1
 8003278:	d101      	bne.n	800327e <HAL_ADC_ConfigChannel+0x22>
 800327a:	2302      	movs	r3, #2
 800327c:	e3c7      	b.n	8003a0e <HAL_ADC_ConfigChannel+0x7b2>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2201      	movs	r2, #1
 8003282:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4618      	mov	r0, r3
 800328c:	f7ff fcca 	bl	8002c24 <LL_ADC_REG_IsConversionOngoing>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	f040 83a8 	bne.w	80039e8 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	2b05      	cmp	r3, #5
 800329e:	d824      	bhi.n	80032ea <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	3b02      	subs	r3, #2
 80032a6:	2b03      	cmp	r3, #3
 80032a8:	d81b      	bhi.n	80032e2 <HAL_ADC_ConfigChannel+0x86>
 80032aa:	a201      	add	r2, pc, #4	; (adr r2, 80032b0 <HAL_ADC_ConfigChannel+0x54>)
 80032ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b0:	080032c1 	.word	0x080032c1
 80032b4:	080032c9 	.word	0x080032c9
 80032b8:	080032d1 	.word	0x080032d1
 80032bc:	080032d9 	.word	0x080032d9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	220c      	movs	r2, #12
 80032c4:	605a      	str	r2, [r3, #4]
          break;
 80032c6:	e011      	b.n	80032ec <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	2212      	movs	r2, #18
 80032cc:	605a      	str	r2, [r3, #4]
          break;
 80032ce:	e00d      	b.n	80032ec <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	2218      	movs	r2, #24
 80032d4:	605a      	str	r2, [r3, #4]
          break;
 80032d6:	e009      	b.n	80032ec <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032de:	605a      	str	r2, [r3, #4]
          break;
 80032e0:	e004      	b.n	80032ec <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	2206      	movs	r2, #6
 80032e6:	605a      	str	r2, [r3, #4]
          break;
 80032e8:	e000      	b.n	80032ec <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80032ea:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6818      	ldr	r0, [r3, #0]
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	6859      	ldr	r1, [r3, #4]
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	461a      	mov	r2, r3
 80032fa:	f7ff fb4b 	bl	8002994 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f7ff fc8e 	bl	8002c24 <LL_ADC_REG_IsConversionOngoing>
 8003308:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4618      	mov	r0, r3
 8003312:	f7ff fc9a 	bl	8002c4a <LL_ADC_INJ_IsConversionOngoing>
 8003316:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800331a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800331e:	2b00      	cmp	r3, #0
 8003320:	f040 81a6 	bne.w	8003670 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003324:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003328:	2b00      	cmp	r3, #0
 800332a:	f040 81a1 	bne.w	8003670 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6818      	ldr	r0, [r3, #0]
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	6819      	ldr	r1, [r3, #0]
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	461a      	mov	r2, r3
 800333c:	f7ff fb56 	bl	80029ec <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	695a      	ldr	r2, [r3, #20]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	08db      	lsrs	r3, r3, #3
 800334c:	f003 0303 	and.w	r3, r3, #3
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	fa02 f303 	lsl.w	r3, r2, r3
 8003356:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	2b04      	cmp	r3, #4
 8003360:	d00a      	beq.n	8003378 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6818      	ldr	r0, [r3, #0]
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	6919      	ldr	r1, [r3, #16]
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003372:	f7ff faa7 	bl	80028c4 <LL_ADC_SetOffset>
 8003376:	e17b      	b.n	8003670 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2100      	movs	r1, #0
 800337e:	4618      	mov	r0, r3
 8003380:	f7ff fac4 	bl	800290c <LL_ADC_GetOffsetChannel>
 8003384:	4603      	mov	r3, r0
 8003386:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10a      	bne.n	80033a4 <HAL_ADC_ConfigChannel+0x148>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2100      	movs	r1, #0
 8003394:	4618      	mov	r0, r3
 8003396:	f7ff fab9 	bl	800290c <LL_ADC_GetOffsetChannel>
 800339a:	4603      	mov	r3, r0
 800339c:	0e9b      	lsrs	r3, r3, #26
 800339e:	f003 021f 	and.w	r2, r3, #31
 80033a2:	e01e      	b.n	80033e2 <HAL_ADC_ConfigChannel+0x186>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2100      	movs	r1, #0
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7ff faae 	bl	800290c <LL_ADC_GetOffsetChannel>
 80033b0:	4603      	mov	r3, r0
 80033b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80033ba:	fa93 f3a3 	rbit	r3, r3
 80033be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80033c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80033c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80033ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d101      	bne.n	80033d6 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80033d2:	2320      	movs	r3, #32
 80033d4:	e004      	b.n	80033e0 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80033d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80033da:	fab3 f383 	clz	r3, r3
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d105      	bne.n	80033fa <HAL_ADC_ConfigChannel+0x19e>
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	0e9b      	lsrs	r3, r3, #26
 80033f4:	f003 031f 	and.w	r3, r3, #31
 80033f8:	e018      	b.n	800342c <HAL_ADC_ConfigChannel+0x1d0>
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003402:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003406:	fa93 f3a3 	rbit	r3, r3
 800340a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800340e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003412:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003416:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800341e:	2320      	movs	r3, #32
 8003420:	e004      	b.n	800342c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8003422:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003426:	fab3 f383 	clz	r3, r3
 800342a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800342c:	429a      	cmp	r2, r3
 800342e:	d106      	bne.n	800343e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2200      	movs	r2, #0
 8003436:	2100      	movs	r1, #0
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff fa7d 	bl	8002938 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2101      	movs	r1, #1
 8003444:	4618      	mov	r0, r3
 8003446:	f7ff fa61 	bl	800290c <LL_ADC_GetOffsetChannel>
 800344a:	4603      	mov	r3, r0
 800344c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003450:	2b00      	cmp	r3, #0
 8003452:	d10a      	bne.n	800346a <HAL_ADC_ConfigChannel+0x20e>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2101      	movs	r1, #1
 800345a:	4618      	mov	r0, r3
 800345c:	f7ff fa56 	bl	800290c <LL_ADC_GetOffsetChannel>
 8003460:	4603      	mov	r3, r0
 8003462:	0e9b      	lsrs	r3, r3, #26
 8003464:	f003 021f 	and.w	r2, r3, #31
 8003468:	e01e      	b.n	80034a8 <HAL_ADC_ConfigChannel+0x24c>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2101      	movs	r1, #1
 8003470:	4618      	mov	r0, r3
 8003472:	f7ff fa4b 	bl	800290c <LL_ADC_GetOffsetChannel>
 8003476:	4603      	mov	r3, r0
 8003478:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003480:	fa93 f3a3 	rbit	r3, r3
 8003484:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003488:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800348c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003490:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003494:	2b00      	cmp	r3, #0
 8003496:	d101      	bne.n	800349c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8003498:	2320      	movs	r3, #32
 800349a:	e004      	b.n	80034a6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 800349c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80034a0:	fab3 f383 	clz	r3, r3
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d105      	bne.n	80034c0 <HAL_ADC_ConfigChannel+0x264>
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	0e9b      	lsrs	r3, r3, #26
 80034ba:	f003 031f 	and.w	r3, r3, #31
 80034be:	e018      	b.n	80034f2 <HAL_ADC_ConfigChannel+0x296>
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80034cc:	fa93 f3a3 	rbit	r3, r3
 80034d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80034d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80034d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80034dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80034e4:	2320      	movs	r3, #32
 80034e6:	e004      	b.n	80034f2 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80034e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80034ec:	fab3 f383 	clz	r3, r3
 80034f0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d106      	bne.n	8003504 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2200      	movs	r2, #0
 80034fc:	2101      	movs	r1, #1
 80034fe:	4618      	mov	r0, r3
 8003500:	f7ff fa1a 	bl	8002938 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2102      	movs	r1, #2
 800350a:	4618      	mov	r0, r3
 800350c:	f7ff f9fe 	bl	800290c <LL_ADC_GetOffsetChannel>
 8003510:	4603      	mov	r3, r0
 8003512:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003516:	2b00      	cmp	r3, #0
 8003518:	d10a      	bne.n	8003530 <HAL_ADC_ConfigChannel+0x2d4>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2102      	movs	r1, #2
 8003520:	4618      	mov	r0, r3
 8003522:	f7ff f9f3 	bl	800290c <LL_ADC_GetOffsetChannel>
 8003526:	4603      	mov	r3, r0
 8003528:	0e9b      	lsrs	r3, r3, #26
 800352a:	f003 021f 	and.w	r2, r3, #31
 800352e:	e01e      	b.n	800356e <HAL_ADC_ConfigChannel+0x312>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2102      	movs	r1, #2
 8003536:	4618      	mov	r0, r3
 8003538:	f7ff f9e8 	bl	800290c <LL_ADC_GetOffsetChannel>
 800353c:	4603      	mov	r3, r0
 800353e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003542:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003546:	fa93 f3a3 	rbit	r3, r3
 800354a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800354e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003552:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003556:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800355e:	2320      	movs	r3, #32
 8003560:	e004      	b.n	800356c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003562:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003566:	fab3 f383 	clz	r3, r3
 800356a:	b2db      	uxtb	r3, r3
 800356c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003576:	2b00      	cmp	r3, #0
 8003578:	d105      	bne.n	8003586 <HAL_ADC_ConfigChannel+0x32a>
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	0e9b      	lsrs	r3, r3, #26
 8003580:	f003 031f 	and.w	r3, r3, #31
 8003584:	e016      	b.n	80035b4 <HAL_ADC_ConfigChannel+0x358>
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003592:	fa93 f3a3 	rbit	r3, r3
 8003596:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003598:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800359a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800359e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80035a6:	2320      	movs	r3, #32
 80035a8:	e004      	b.n	80035b4 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80035aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80035ae:	fab3 f383 	clz	r3, r3
 80035b2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d106      	bne.n	80035c6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2200      	movs	r2, #0
 80035be:	2102      	movs	r1, #2
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7ff f9b9 	bl	8002938 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2103      	movs	r1, #3
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7ff f99d 	bl	800290c <LL_ADC_GetOffsetChannel>
 80035d2:	4603      	mov	r3, r0
 80035d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10a      	bne.n	80035f2 <HAL_ADC_ConfigChannel+0x396>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2103      	movs	r1, #3
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7ff f992 	bl	800290c <LL_ADC_GetOffsetChannel>
 80035e8:	4603      	mov	r3, r0
 80035ea:	0e9b      	lsrs	r3, r3, #26
 80035ec:	f003 021f 	and.w	r2, r3, #31
 80035f0:	e017      	b.n	8003622 <HAL_ADC_ConfigChannel+0x3c6>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2103      	movs	r1, #3
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7ff f987 	bl	800290c <LL_ADC_GetOffsetChannel>
 80035fe:	4603      	mov	r3, r0
 8003600:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003602:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003604:	fa93 f3a3 	rbit	r3, r3
 8003608:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800360a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800360c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800360e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003610:	2b00      	cmp	r3, #0
 8003612:	d101      	bne.n	8003618 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8003614:	2320      	movs	r3, #32
 8003616:	e003      	b.n	8003620 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003618:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800361a:	fab3 f383 	clz	r3, r3
 800361e:	b2db      	uxtb	r3, r3
 8003620:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800362a:	2b00      	cmp	r3, #0
 800362c:	d105      	bne.n	800363a <HAL_ADC_ConfigChannel+0x3de>
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	0e9b      	lsrs	r3, r3, #26
 8003634:	f003 031f 	and.w	r3, r3, #31
 8003638:	e011      	b.n	800365e <HAL_ADC_ConfigChannel+0x402>
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003640:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003642:	fa93 f3a3 	rbit	r3, r3
 8003646:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003648:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800364a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800364c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8003652:	2320      	movs	r3, #32
 8003654:	e003      	b.n	800365e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8003656:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003658:	fab3 f383 	clz	r3, r3
 800365c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800365e:	429a      	cmp	r2, r3
 8003660:	d106      	bne.n	8003670 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2200      	movs	r2, #0
 8003668:	2103      	movs	r1, #3
 800366a:	4618      	mov	r0, r3
 800366c:	f7ff f964 	bl	8002938 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4618      	mov	r0, r3
 8003676:	f7ff fa9b 	bl	8002bb0 <LL_ADC_IsEnabled>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	f040 813f 	bne.w	8003900 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6818      	ldr	r0, [r3, #0]
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	6819      	ldr	r1, [r3, #0]
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	461a      	mov	r2, r3
 8003690:	f7ff f9d8 	bl	8002a44 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	4a8e      	ldr	r2, [pc, #568]	; (80038d4 <HAL_ADC_ConfigChannel+0x678>)
 800369a:	4293      	cmp	r3, r2
 800369c:	f040 8130 	bne.w	8003900 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d10b      	bne.n	80036c8 <HAL_ADC_ConfigChannel+0x46c>
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	0e9b      	lsrs	r3, r3, #26
 80036b6:	3301      	adds	r3, #1
 80036b8:	f003 031f 	and.w	r3, r3, #31
 80036bc:	2b09      	cmp	r3, #9
 80036be:	bf94      	ite	ls
 80036c0:	2301      	movls	r3, #1
 80036c2:	2300      	movhi	r3, #0
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	e019      	b.n	80036fc <HAL_ADC_ConfigChannel+0x4a0>
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036d0:	fa93 f3a3 	rbit	r3, r3
 80036d4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80036d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036d8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80036da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d101      	bne.n	80036e4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80036e0:	2320      	movs	r3, #32
 80036e2:	e003      	b.n	80036ec <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80036e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036e6:	fab3 f383 	clz	r3, r3
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	3301      	adds	r3, #1
 80036ee:	f003 031f 	and.w	r3, r3, #31
 80036f2:	2b09      	cmp	r3, #9
 80036f4:	bf94      	ite	ls
 80036f6:	2301      	movls	r3, #1
 80036f8:	2300      	movhi	r3, #0
 80036fa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d079      	beq.n	80037f4 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003708:	2b00      	cmp	r3, #0
 800370a:	d107      	bne.n	800371c <HAL_ADC_ConfigChannel+0x4c0>
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	0e9b      	lsrs	r3, r3, #26
 8003712:	3301      	adds	r3, #1
 8003714:	069b      	lsls	r3, r3, #26
 8003716:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800371a:	e015      	b.n	8003748 <HAL_ADC_ConfigChannel+0x4ec>
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003722:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003724:	fa93 f3a3 	rbit	r3, r3
 8003728:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800372a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800372c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800372e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8003734:	2320      	movs	r3, #32
 8003736:	e003      	b.n	8003740 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003738:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800373a:	fab3 f383 	clz	r3, r3
 800373e:	b2db      	uxtb	r3, r3
 8003740:	3301      	adds	r3, #1
 8003742:	069b      	lsls	r3, r3, #26
 8003744:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003750:	2b00      	cmp	r3, #0
 8003752:	d109      	bne.n	8003768 <HAL_ADC_ConfigChannel+0x50c>
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	0e9b      	lsrs	r3, r3, #26
 800375a:	3301      	adds	r3, #1
 800375c:	f003 031f 	and.w	r3, r3, #31
 8003760:	2101      	movs	r1, #1
 8003762:	fa01 f303 	lsl.w	r3, r1, r3
 8003766:	e017      	b.n	8003798 <HAL_ADC_ConfigChannel+0x53c>
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800376e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003770:	fa93 f3a3 	rbit	r3, r3
 8003774:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003776:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003778:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800377a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800377c:	2b00      	cmp	r3, #0
 800377e:	d101      	bne.n	8003784 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8003780:	2320      	movs	r3, #32
 8003782:	e003      	b.n	800378c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8003784:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003786:	fab3 f383 	clz	r3, r3
 800378a:	b2db      	uxtb	r3, r3
 800378c:	3301      	adds	r3, #1
 800378e:	f003 031f 	and.w	r3, r3, #31
 8003792:	2101      	movs	r1, #1
 8003794:	fa01 f303 	lsl.w	r3, r1, r3
 8003798:	ea42 0103 	orr.w	r1, r2, r3
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d10a      	bne.n	80037be <HAL_ADC_ConfigChannel+0x562>
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	0e9b      	lsrs	r3, r3, #26
 80037ae:	3301      	adds	r3, #1
 80037b0:	f003 021f 	and.w	r2, r3, #31
 80037b4:	4613      	mov	r3, r2
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	4413      	add	r3, r2
 80037ba:	051b      	lsls	r3, r3, #20
 80037bc:	e018      	b.n	80037f0 <HAL_ADC_ConfigChannel+0x594>
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037c6:	fa93 f3a3 	rbit	r3, r3
 80037ca:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80037cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80037d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d101      	bne.n	80037da <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80037d6:	2320      	movs	r3, #32
 80037d8:	e003      	b.n	80037e2 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80037da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037dc:	fab3 f383 	clz	r3, r3
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	3301      	adds	r3, #1
 80037e4:	f003 021f 	and.w	r2, r3, #31
 80037e8:	4613      	mov	r3, r2
 80037ea:	005b      	lsls	r3, r3, #1
 80037ec:	4413      	add	r3, r2
 80037ee:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037f0:	430b      	orrs	r3, r1
 80037f2:	e080      	b.n	80038f6 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d107      	bne.n	8003810 <HAL_ADC_ConfigChannel+0x5b4>
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	0e9b      	lsrs	r3, r3, #26
 8003806:	3301      	adds	r3, #1
 8003808:	069b      	lsls	r3, r3, #26
 800380a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800380e:	e015      	b.n	800383c <HAL_ADC_ConfigChannel+0x5e0>
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003818:	fa93 f3a3 	rbit	r3, r3
 800381c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800381e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003820:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003828:	2320      	movs	r3, #32
 800382a:	e003      	b.n	8003834 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 800382c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382e:	fab3 f383 	clz	r3, r3
 8003832:	b2db      	uxtb	r3, r3
 8003834:	3301      	adds	r3, #1
 8003836:	069b      	lsls	r3, r3, #26
 8003838:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003844:	2b00      	cmp	r3, #0
 8003846:	d109      	bne.n	800385c <HAL_ADC_ConfigChannel+0x600>
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	0e9b      	lsrs	r3, r3, #26
 800384e:	3301      	adds	r3, #1
 8003850:	f003 031f 	and.w	r3, r3, #31
 8003854:	2101      	movs	r1, #1
 8003856:	fa01 f303 	lsl.w	r3, r1, r3
 800385a:	e017      	b.n	800388c <HAL_ADC_ConfigChannel+0x630>
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	fa93 f3a3 	rbit	r3, r3
 8003868:	61fb      	str	r3, [r7, #28]
  return result;
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800386e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003870:	2b00      	cmp	r3, #0
 8003872:	d101      	bne.n	8003878 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8003874:	2320      	movs	r3, #32
 8003876:	e003      	b.n	8003880 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8003878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387a:	fab3 f383 	clz	r3, r3
 800387e:	b2db      	uxtb	r3, r3
 8003880:	3301      	adds	r3, #1
 8003882:	f003 031f 	and.w	r3, r3, #31
 8003886:	2101      	movs	r1, #1
 8003888:	fa01 f303 	lsl.w	r3, r1, r3
 800388c:	ea42 0103 	orr.w	r1, r2, r3
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003898:	2b00      	cmp	r3, #0
 800389a:	d10d      	bne.n	80038b8 <HAL_ADC_ConfigChannel+0x65c>
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	0e9b      	lsrs	r3, r3, #26
 80038a2:	3301      	adds	r3, #1
 80038a4:	f003 021f 	and.w	r2, r3, #31
 80038a8:	4613      	mov	r3, r2
 80038aa:	005b      	lsls	r3, r3, #1
 80038ac:	4413      	add	r3, r2
 80038ae:	3b1e      	subs	r3, #30
 80038b0:	051b      	lsls	r3, r3, #20
 80038b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80038b6:	e01d      	b.n	80038f4 <HAL_ADC_ConfigChannel+0x698>
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	fa93 f3a3 	rbit	r3, r3
 80038c4:	613b      	str	r3, [r7, #16]
  return result;
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d103      	bne.n	80038d8 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80038d0:	2320      	movs	r3, #32
 80038d2:	e005      	b.n	80038e0 <HAL_ADC_ConfigChannel+0x684>
 80038d4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	fab3 f383 	clz	r3, r3
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	3301      	adds	r3, #1
 80038e2:	f003 021f 	and.w	r2, r3, #31
 80038e6:	4613      	mov	r3, r2
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	4413      	add	r3, r2
 80038ec:	3b1e      	subs	r3, #30
 80038ee:	051b      	lsls	r3, r3, #20
 80038f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038f4:	430b      	orrs	r3, r1
 80038f6:	683a      	ldr	r2, [r7, #0]
 80038f8:	6892      	ldr	r2, [r2, #8]
 80038fa:	4619      	mov	r1, r3
 80038fc:	f7ff f876 	bl	80029ec <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	4b44      	ldr	r3, [pc, #272]	; (8003a18 <HAL_ADC_ConfigChannel+0x7bc>)
 8003906:	4013      	ands	r3, r2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d07a      	beq.n	8003a02 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800390c:	4843      	ldr	r0, [pc, #268]	; (8003a1c <HAL_ADC_ConfigChannel+0x7c0>)
 800390e:	f7fe ffcb 	bl	80028a8 <LL_ADC_GetCommonPathInternalCh>
 8003912:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a41      	ldr	r2, [pc, #260]	; (8003a20 <HAL_ADC_ConfigChannel+0x7c4>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d12c      	bne.n	800397a <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003920:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003924:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d126      	bne.n	800397a <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a3c      	ldr	r2, [pc, #240]	; (8003a24 <HAL_ADC_ConfigChannel+0x7c8>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d004      	beq.n	8003940 <HAL_ADC_ConfigChannel+0x6e4>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a3b      	ldr	r2, [pc, #236]	; (8003a28 <HAL_ADC_ConfigChannel+0x7cc>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d15d      	bne.n	80039fc <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003940:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003944:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003948:	4619      	mov	r1, r3
 800394a:	4834      	ldr	r0, [pc, #208]	; (8003a1c <HAL_ADC_ConfigChannel+0x7c0>)
 800394c:	f7fe ff99 	bl	8002882 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003950:	4b36      	ldr	r3, [pc, #216]	; (8003a2c <HAL_ADC_ConfigChannel+0x7d0>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	099b      	lsrs	r3, r3, #6
 8003956:	4a36      	ldr	r2, [pc, #216]	; (8003a30 <HAL_ADC_ConfigChannel+0x7d4>)
 8003958:	fba2 2303 	umull	r2, r3, r2, r3
 800395c:	099b      	lsrs	r3, r3, #6
 800395e:	1c5a      	adds	r2, r3, #1
 8003960:	4613      	mov	r3, r2
 8003962:	005b      	lsls	r3, r3, #1
 8003964:	4413      	add	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800396a:	e002      	b.n	8003972 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	3b01      	subs	r3, #1
 8003970:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1f9      	bne.n	800396c <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003978:	e040      	b.n	80039fc <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a2d      	ldr	r2, [pc, #180]	; (8003a34 <HAL_ADC_ConfigChannel+0x7d8>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d118      	bne.n	80039b6 <HAL_ADC_ConfigChannel+0x75a>
 8003984:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003988:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d112      	bne.n	80039b6 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a23      	ldr	r2, [pc, #140]	; (8003a24 <HAL_ADC_ConfigChannel+0x7c8>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d004      	beq.n	80039a4 <HAL_ADC_ConfigChannel+0x748>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a22      	ldr	r2, [pc, #136]	; (8003a28 <HAL_ADC_ConfigChannel+0x7cc>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d12d      	bne.n	8003a00 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80039a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039ac:	4619      	mov	r1, r3
 80039ae:	481b      	ldr	r0, [pc, #108]	; (8003a1c <HAL_ADC_ConfigChannel+0x7c0>)
 80039b0:	f7fe ff67 	bl	8002882 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039b4:	e024      	b.n	8003a00 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a1f      	ldr	r2, [pc, #124]	; (8003a38 <HAL_ADC_ConfigChannel+0x7dc>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d120      	bne.n	8003a02 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80039c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80039c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d11a      	bne.n	8003a02 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a14      	ldr	r2, [pc, #80]	; (8003a24 <HAL_ADC_ConfigChannel+0x7c8>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d115      	bne.n	8003a02 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80039da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80039de:	4619      	mov	r1, r3
 80039e0:	480e      	ldr	r0, [pc, #56]	; (8003a1c <HAL_ADC_ConfigChannel+0x7c0>)
 80039e2:	f7fe ff4e 	bl	8002882 <LL_ADC_SetCommonPathInternalCh>
 80039e6:	e00c      	b.n	8003a02 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ec:	f043 0220 	orr.w	r2, r3, #32
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80039fa:	e002      	b.n	8003a02 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039fc:	bf00      	nop
 80039fe:	e000      	b.n	8003a02 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a00:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003a0a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	37d8      	adds	r7, #216	; 0xd8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	80080000 	.word	0x80080000
 8003a1c:	50040300 	.word	0x50040300
 8003a20:	c7520000 	.word	0xc7520000
 8003a24:	50040000 	.word	0x50040000
 8003a28:	50040200 	.word	0x50040200
 8003a2c:	20000008 	.word	0x20000008
 8003a30:	053e2d63 	.word	0x053e2d63
 8003a34:	cb840000 	.word	0xcb840000
 8003a38:	80000001 	.word	0x80000001

08003a3c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7ff f8b1 	bl	8002bb0 <LL_ADC_IsEnabled>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d14d      	bne.n	8003af0 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	689a      	ldr	r2, [r3, #8]
 8003a5a:	4b28      	ldr	r3, [pc, #160]	; (8003afc <ADC_Enable+0xc0>)
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00d      	beq.n	8003a7e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a66:	f043 0210 	orr.w	r2, r3, #16
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a72:	f043 0201 	orr.w	r2, r3, #1
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e039      	b.n	8003af2 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7ff f86c 	bl	8002b60 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003a88:	f7fe fedc 	bl	8002844 <HAL_GetTick>
 8003a8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a8e:	e028      	b.n	8003ae2 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7ff f88b 	bl	8002bb0 <LL_ADC_IsEnabled>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d104      	bne.n	8003aaa <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7ff f85b 	bl	8002b60 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003aaa:	f7fe fecb 	bl	8002844 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d914      	bls.n	8003ae2 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d00d      	beq.n	8003ae2 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aca:	f043 0210 	orr.w	r2, r3, #16
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad6:	f043 0201 	orr.w	r2, r3, #1
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e007      	b.n	8003af2 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d1cf      	bne.n	8003a90 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	8000003f 	.word	0x8000003f

08003b00 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7ff f862 	bl	8002bd6 <LL_ADC_IsDisableOngoing>
 8003b12:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7ff f849 	bl	8002bb0 <LL_ADC_IsEnabled>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d047      	beq.n	8003bb4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d144      	bne.n	8003bb4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f003 030d 	and.w	r3, r3, #13
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d10c      	bne.n	8003b52 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7ff f823 	bl	8002b88 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2203      	movs	r2, #3
 8003b48:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b4a:	f7fe fe7b 	bl	8002844 <HAL_GetTick>
 8003b4e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b50:	e029      	b.n	8003ba6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b56:	f043 0210 	orr.w	r2, r3, #16
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b62:	f043 0201 	orr.w	r2, r3, #1
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e023      	b.n	8003bb6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003b6e:	f7fe fe69 	bl	8002844 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d914      	bls.n	8003ba6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00d      	beq.n	8003ba6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b8e:	f043 0210 	orr.w	r2, r3, #16
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b9a:	f043 0201 	orr.w	r2, r3, #1
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e007      	b.n	8003bb6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f003 0301 	and.w	r3, r3, #1
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1dc      	bne.n	8003b6e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <LL_ADC_IsEnabled>:
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b083      	sub	sp, #12
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d101      	bne.n	8003bd6 <LL_ADC_IsEnabled+0x18>
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e000      	b.n	8003bd8 <LL_ADC_IsEnabled+0x1a>
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <LL_ADC_StartCalibration>:
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003bf6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003bfa:	683a      	ldr	r2, [r7, #0]
 8003bfc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003c00:	4313      	orrs	r3, r2
 8003c02:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	609a      	str	r2, [r3, #8]
}
 8003c0a:	bf00      	nop
 8003c0c:	370c      	adds	r7, #12
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr

08003c16 <LL_ADC_IsCalibrationOnGoing>:
{
 8003c16:	b480      	push	{r7}
 8003c18:	b083      	sub	sp, #12
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c2a:	d101      	bne.n	8003c30 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e000      	b.n	8003c32 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	370c      	adds	r7, #12
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr

08003c3e <LL_ADC_REG_IsConversionOngoing>:
{
 8003c3e:	b480      	push	{r7}
 8003c40:	b083      	sub	sp, #12
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f003 0304 	and.w	r3, r3, #4
 8003c4e:	2b04      	cmp	r3, #4
 8003c50:	d101      	bne.n	8003c56 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003c52:	2301      	movs	r3, #1
 8003c54:	e000      	b.n	8003c58 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d101      	bne.n	8003c80 <HAL_ADCEx_Calibration_Start+0x1c>
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	e04d      	b.n	8003d1c <HAL_ADCEx_Calibration_Start+0xb8>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f7ff ff39 	bl	8003b00 <ADC_Disable>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003c92:	7bfb      	ldrb	r3, [r7, #15]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d136      	bne.n	8003d06 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c9c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003ca0:	f023 0302 	bic.w	r3, r3, #2
 8003ca4:	f043 0202 	orr.w	r2, r3, #2
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	6839      	ldr	r1, [r7, #0]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7ff ff96 	bl	8003be4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003cb8:	e014      	b.n	8003ce4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8003cc6:	d30d      	bcc.n	8003ce4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ccc:	f023 0312 	bic.w	r3, r3, #18
 8003cd0:	f043 0210 	orr.w	r2, r3, #16
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e01b      	b.n	8003d1c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7ff ff94 	bl	8003c16 <LL_ADC_IsCalibrationOnGoing>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d1e2      	bne.n	8003cba <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf8:	f023 0303 	bic.w	r3, r3, #3
 8003cfc:	f043 0201 	orr.w	r2, r3, #1
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	655a      	str	r2, [r3, #84]	; 0x54
 8003d04:	e005      	b.n	8003d12 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d0a:	f043 0210 	orr.w	r2, r3, #16
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003d24:	b590      	push	{r4, r7, lr}
 8003d26:	b09f      	sub	sp, #124	; 0x7c
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d101      	bne.n	8003d42 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003d3e:	2302      	movs	r3, #2
 8003d40:	e093      	b.n	8003e6a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003d4e:	2300      	movs	r3, #0
 8003d50:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a47      	ldr	r2, [pc, #284]	; (8003e74 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d102      	bne.n	8003d62 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003d5c:	4b46      	ldr	r3, [pc, #280]	; (8003e78 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003d5e:	60bb      	str	r3, [r7, #8]
 8003d60:	e001      	b.n	8003d66 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003d62:	2300      	movs	r3, #0
 8003d64:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d10b      	bne.n	8003d84 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d70:	f043 0220 	orr.w	r2, r3, #32
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e072      	b.n	8003e6a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7ff ff59 	bl	8003c3e <LL_ADC_REG_IsConversionOngoing>
 8003d8c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7ff ff53 	bl	8003c3e <LL_ADC_REG_IsConversionOngoing>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d154      	bne.n	8003e48 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003d9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d151      	bne.n	8003e48 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003da4:	4b35      	ldr	r3, [pc, #212]	; (8003e7c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003da6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d02c      	beq.n	8003e0a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003db0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	6859      	ldr	r1, [r3, #4]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003dc2:	035b      	lsls	r3, r3, #13
 8003dc4:	430b      	orrs	r3, r1
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dca:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003dcc:	4829      	ldr	r0, [pc, #164]	; (8003e74 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003dce:	f7ff fef6 	bl	8003bbe <LL_ADC_IsEnabled>
 8003dd2:	4604      	mov	r4, r0
 8003dd4:	4828      	ldr	r0, [pc, #160]	; (8003e78 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003dd6:	f7ff fef2 	bl	8003bbe <LL_ADC_IsEnabled>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	431c      	orrs	r4, r3
 8003dde:	4828      	ldr	r0, [pc, #160]	; (8003e80 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003de0:	f7ff feed 	bl	8003bbe <LL_ADC_IsEnabled>
 8003de4:	4603      	mov	r3, r0
 8003de6:	4323      	orrs	r3, r4
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d137      	bne.n	8003e5c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003dec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003df4:	f023 030f 	bic.w	r3, r3, #15
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	6811      	ldr	r1, [r2, #0]
 8003dfc:	683a      	ldr	r2, [r7, #0]
 8003dfe:	6892      	ldr	r2, [r2, #8]
 8003e00:	430a      	orrs	r2, r1
 8003e02:	431a      	orrs	r2, r3
 8003e04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e06:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e08:	e028      	b.n	8003e5c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003e0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e14:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e16:	4817      	ldr	r0, [pc, #92]	; (8003e74 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003e18:	f7ff fed1 	bl	8003bbe <LL_ADC_IsEnabled>
 8003e1c:	4604      	mov	r4, r0
 8003e1e:	4816      	ldr	r0, [pc, #88]	; (8003e78 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003e20:	f7ff fecd 	bl	8003bbe <LL_ADC_IsEnabled>
 8003e24:	4603      	mov	r3, r0
 8003e26:	431c      	orrs	r4, r3
 8003e28:	4815      	ldr	r0, [pc, #84]	; (8003e80 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003e2a:	f7ff fec8 	bl	8003bbe <LL_ADC_IsEnabled>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	4323      	orrs	r3, r4
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d112      	bne.n	8003e5c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003e36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003e3e:	f023 030f 	bic.w	r3, r3, #15
 8003e42:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e44:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e46:	e009      	b.n	8003e5c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e4c:	f043 0220 	orr.w	r2, r3, #32
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003e5a:	e000      	b.n	8003e5e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e5c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003e66:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	377c      	adds	r7, #124	; 0x7c
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd90      	pop	{r4, r7, pc}
 8003e72:	bf00      	nop
 8003e74:	50040000 	.word	0x50040000
 8003e78:	50040100 	.word	0x50040100
 8003e7c:	50040300 	.word	0x50040300
 8003e80:	50040200 	.word	0x50040200

08003e84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f003 0307 	and.w	r3, r3, #7
 8003e92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e94:	4b0c      	ldr	r3, [pc, #48]	; (8003ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e9a:	68ba      	ldr	r2, [r7, #8]
 8003e9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003eac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003eb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003eb6:	4a04      	ldr	r2, [pc, #16]	; (8003ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	60d3      	str	r3, [r2, #12]
}
 8003ebc:	bf00      	nop
 8003ebe:	3714      	adds	r7, #20
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr
 8003ec8:	e000ed00 	.word	0xe000ed00

08003ecc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ed0:	4b04      	ldr	r3, [pc, #16]	; (8003ee4 <__NVIC_GetPriorityGrouping+0x18>)
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	0a1b      	lsrs	r3, r3, #8
 8003ed6:	f003 0307 	and.w	r3, r3, #7
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr
 8003ee4:	e000ed00 	.word	0xe000ed00

08003ee8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	4603      	mov	r3, r0
 8003ef0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	db0b      	blt.n	8003f12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003efa:	79fb      	ldrb	r3, [r7, #7]
 8003efc:	f003 021f 	and.w	r2, r3, #31
 8003f00:	4907      	ldr	r1, [pc, #28]	; (8003f20 <__NVIC_EnableIRQ+0x38>)
 8003f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f06:	095b      	lsrs	r3, r3, #5
 8003f08:	2001      	movs	r0, #1
 8003f0a:	fa00 f202 	lsl.w	r2, r0, r2
 8003f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f12:	bf00      	nop
 8003f14:	370c      	adds	r7, #12
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	e000e100 	.word	0xe000e100

08003f24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	6039      	str	r1, [r7, #0]
 8003f2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	db0a      	blt.n	8003f4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	b2da      	uxtb	r2, r3
 8003f3c:	490c      	ldr	r1, [pc, #48]	; (8003f70 <__NVIC_SetPriority+0x4c>)
 8003f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f42:	0112      	lsls	r2, r2, #4
 8003f44:	b2d2      	uxtb	r2, r2
 8003f46:	440b      	add	r3, r1
 8003f48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f4c:	e00a      	b.n	8003f64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	b2da      	uxtb	r2, r3
 8003f52:	4908      	ldr	r1, [pc, #32]	; (8003f74 <__NVIC_SetPriority+0x50>)
 8003f54:	79fb      	ldrb	r3, [r7, #7]
 8003f56:	f003 030f 	and.w	r3, r3, #15
 8003f5a:	3b04      	subs	r3, #4
 8003f5c:	0112      	lsls	r2, r2, #4
 8003f5e:	b2d2      	uxtb	r2, r2
 8003f60:	440b      	add	r3, r1
 8003f62:	761a      	strb	r2, [r3, #24]
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr
 8003f70:	e000e100 	.word	0xe000e100
 8003f74:	e000ed00 	.word	0xe000ed00

08003f78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b089      	sub	sp, #36	; 0x24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f003 0307 	and.w	r3, r3, #7
 8003f8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	f1c3 0307 	rsb	r3, r3, #7
 8003f92:	2b04      	cmp	r3, #4
 8003f94:	bf28      	it	cs
 8003f96:	2304      	movcs	r3, #4
 8003f98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	3304      	adds	r3, #4
 8003f9e:	2b06      	cmp	r3, #6
 8003fa0:	d902      	bls.n	8003fa8 <NVIC_EncodePriority+0x30>
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	3b03      	subs	r3, #3
 8003fa6:	e000      	b.n	8003faa <NVIC_EncodePriority+0x32>
 8003fa8:	2300      	movs	r3, #0
 8003faa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fac:	f04f 32ff 	mov.w	r2, #4294967295
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb6:	43da      	mvns	r2, r3
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	401a      	ands	r2, r3
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fca:	43d9      	mvns	r1, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fd0:	4313      	orrs	r3, r2
         );
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3724      	adds	r7, #36	; 0x24
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
	...

08003fe0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	3b01      	subs	r3, #1
 8003fec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ff0:	d301      	bcc.n	8003ff6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e00f      	b.n	8004016 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ff6:	4a0a      	ldr	r2, [pc, #40]	; (8004020 <SysTick_Config+0x40>)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ffe:	210f      	movs	r1, #15
 8004000:	f04f 30ff 	mov.w	r0, #4294967295
 8004004:	f7ff ff8e 	bl	8003f24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004008:	4b05      	ldr	r3, [pc, #20]	; (8004020 <SysTick_Config+0x40>)
 800400a:	2200      	movs	r2, #0
 800400c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800400e:	4b04      	ldr	r3, [pc, #16]	; (8004020 <SysTick_Config+0x40>)
 8004010:	2207      	movs	r2, #7
 8004012:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3708      	adds	r7, #8
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	e000e010 	.word	0xe000e010

08004024 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f7ff ff29 	bl	8003e84 <__NVIC_SetPriorityGrouping>
}
 8004032:	bf00      	nop
 8004034:	3708      	adds	r7, #8
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}

0800403a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800403a:	b580      	push	{r7, lr}
 800403c:	b086      	sub	sp, #24
 800403e:	af00      	add	r7, sp, #0
 8004040:	4603      	mov	r3, r0
 8004042:	60b9      	str	r1, [r7, #8]
 8004044:	607a      	str	r2, [r7, #4]
 8004046:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004048:	2300      	movs	r3, #0
 800404a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800404c:	f7ff ff3e 	bl	8003ecc <__NVIC_GetPriorityGrouping>
 8004050:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	68b9      	ldr	r1, [r7, #8]
 8004056:	6978      	ldr	r0, [r7, #20]
 8004058:	f7ff ff8e 	bl	8003f78 <NVIC_EncodePriority>
 800405c:	4602      	mov	r2, r0
 800405e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004062:	4611      	mov	r1, r2
 8004064:	4618      	mov	r0, r3
 8004066:	f7ff ff5d 	bl	8003f24 <__NVIC_SetPriority>
}
 800406a:	bf00      	nop
 800406c:	3718      	adds	r7, #24
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004072:	b580      	push	{r7, lr}
 8004074:	b082      	sub	sp, #8
 8004076:	af00      	add	r7, sp, #0
 8004078:	4603      	mov	r3, r0
 800407a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800407c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004080:	4618      	mov	r0, r3
 8004082:	f7ff ff31 	bl	8003ee8 <__NVIC_EnableIRQ>
}
 8004086:	bf00      	nop
 8004088:	3708      	adds	r7, #8
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b082      	sub	sp, #8
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f7ff ffa2 	bl	8003fe0 <SysTick_Config>
 800409c:	4603      	mov	r3, r0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3708      	adds	r7, #8
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
	...

080040a8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e098      	b.n	80041ec <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	461a      	mov	r2, r3
 80040c0:	4b4d      	ldr	r3, [pc, #308]	; (80041f8 <HAL_DMA_Init+0x150>)
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d80f      	bhi.n	80040e6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	461a      	mov	r2, r3
 80040cc:	4b4b      	ldr	r3, [pc, #300]	; (80041fc <HAL_DMA_Init+0x154>)
 80040ce:	4413      	add	r3, r2
 80040d0:	4a4b      	ldr	r2, [pc, #300]	; (8004200 <HAL_DMA_Init+0x158>)
 80040d2:	fba2 2303 	umull	r2, r3, r2, r3
 80040d6:	091b      	lsrs	r3, r3, #4
 80040d8:	009a      	lsls	r2, r3, #2
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a48      	ldr	r2, [pc, #288]	; (8004204 <HAL_DMA_Init+0x15c>)
 80040e2:	641a      	str	r2, [r3, #64]	; 0x40
 80040e4:	e00e      	b.n	8004104 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	461a      	mov	r2, r3
 80040ec:	4b46      	ldr	r3, [pc, #280]	; (8004208 <HAL_DMA_Init+0x160>)
 80040ee:	4413      	add	r3, r2
 80040f0:	4a43      	ldr	r2, [pc, #268]	; (8004200 <HAL_DMA_Init+0x158>)
 80040f2:	fba2 2303 	umull	r2, r3, r2, r3
 80040f6:	091b      	lsrs	r3, r3, #4
 80040f8:	009a      	lsls	r2, r3, #2
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a42      	ldr	r2, [pc, #264]	; (800420c <HAL_DMA_Init+0x164>)
 8004102:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2202      	movs	r2, #2
 8004108:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800411a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800411e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004128:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004134:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004140:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	4313      	orrs	r3, r2
 800414c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800415e:	d039      	beq.n	80041d4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004164:	4a27      	ldr	r2, [pc, #156]	; (8004204 <HAL_DMA_Init+0x15c>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d11a      	bne.n	80041a0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800416a:	4b29      	ldr	r3, [pc, #164]	; (8004210 <HAL_DMA_Init+0x168>)
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004172:	f003 031c 	and.w	r3, r3, #28
 8004176:	210f      	movs	r1, #15
 8004178:	fa01 f303 	lsl.w	r3, r1, r3
 800417c:	43db      	mvns	r3, r3
 800417e:	4924      	ldr	r1, [pc, #144]	; (8004210 <HAL_DMA_Init+0x168>)
 8004180:	4013      	ands	r3, r2
 8004182:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004184:	4b22      	ldr	r3, [pc, #136]	; (8004210 <HAL_DMA_Init+0x168>)
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6859      	ldr	r1, [r3, #4]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004190:	f003 031c 	and.w	r3, r3, #28
 8004194:	fa01 f303 	lsl.w	r3, r1, r3
 8004198:	491d      	ldr	r1, [pc, #116]	; (8004210 <HAL_DMA_Init+0x168>)
 800419a:	4313      	orrs	r3, r2
 800419c:	600b      	str	r3, [r1, #0]
 800419e:	e019      	b.n	80041d4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80041a0:	4b1c      	ldr	r3, [pc, #112]	; (8004214 <HAL_DMA_Init+0x16c>)
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a8:	f003 031c 	and.w	r3, r3, #28
 80041ac:	210f      	movs	r1, #15
 80041ae:	fa01 f303 	lsl.w	r3, r1, r3
 80041b2:	43db      	mvns	r3, r3
 80041b4:	4917      	ldr	r1, [pc, #92]	; (8004214 <HAL_DMA_Init+0x16c>)
 80041b6:	4013      	ands	r3, r2
 80041b8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80041ba:	4b16      	ldr	r3, [pc, #88]	; (8004214 <HAL_DMA_Init+0x16c>)
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6859      	ldr	r1, [r3, #4]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c6:	f003 031c 	and.w	r3, r3, #28
 80041ca:	fa01 f303 	lsl.w	r3, r1, r3
 80041ce:	4911      	ldr	r1, [pc, #68]	; (8004214 <HAL_DMA_Init+0x16c>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2201      	movs	r2, #1
 80041de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3714      	adds	r7, #20
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr
 80041f8:	40020407 	.word	0x40020407
 80041fc:	bffdfff8 	.word	0xbffdfff8
 8004200:	cccccccd 	.word	0xcccccccd
 8004204:	40020000 	.word	0x40020000
 8004208:	bffdfbf8 	.word	0xbffdfbf8
 800420c:	40020400 	.word	0x40020400
 8004210:	400200a8 	.word	0x400200a8
 8004214:	400204a8 	.word	0x400204a8

08004218 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b086      	sub	sp, #24
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
 8004224:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004226:	2300      	movs	r3, #0
 8004228:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004230:	2b01      	cmp	r3, #1
 8004232:	d101      	bne.n	8004238 <HAL_DMA_Start_IT+0x20>
 8004234:	2302      	movs	r3, #2
 8004236:	e04b      	b.n	80042d0 <HAL_DMA_Start_IT+0xb8>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004246:	b2db      	uxtb	r3, r3
 8004248:	2b01      	cmp	r3, #1
 800424a:	d13a      	bne.n	80042c2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2202      	movs	r2, #2
 8004250:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f022 0201 	bic.w	r2, r2, #1
 8004268:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	68b9      	ldr	r1, [r7, #8]
 8004270:	68f8      	ldr	r0, [r7, #12]
 8004272:	f000 f92f 	bl	80044d4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427a:	2b00      	cmp	r3, #0
 800427c:	d008      	beq.n	8004290 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f042 020e 	orr.w	r2, r2, #14
 800428c:	601a      	str	r2, [r3, #0]
 800428e:	e00f      	b.n	80042b0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 0204 	bic.w	r2, r2, #4
 800429e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f042 020a 	orr.w	r2, r2, #10
 80042ae:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f042 0201 	orr.w	r2, r2, #1
 80042be:	601a      	str	r2, [r3, #0]
 80042c0:	e005      	b.n	80042ce <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80042ca:	2302      	movs	r3, #2
 80042cc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80042ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3718      	adds	r7, #24
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042e0:	2300      	movs	r3, #0
 80042e2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d005      	beq.n	80042fc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2204      	movs	r2, #4
 80042f4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	73fb      	strb	r3, [r7, #15]
 80042fa:	e029      	b.n	8004350 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f022 020e 	bic.w	r2, r2, #14
 800430a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f022 0201 	bic.w	r2, r2, #1
 800431a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004320:	f003 021c 	and.w	r2, r3, #28
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004328:	2101      	movs	r1, #1
 800432a:	fa01 f202 	lsl.w	r2, r1, r2
 800432e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004344:	2b00      	cmp	r3, #0
 8004346:	d003      	beq.n	8004350 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	4798      	blx	r3
    }
  }
  return status;
 8004350:	7bfb      	ldrb	r3, [r7, #15]
}
 8004352:	4618      	mov	r0, r3
 8004354:	3710      	adds	r7, #16
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800435a:	b580      	push	{r7, lr}
 800435c:	b084      	sub	sp, #16
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004376:	f003 031c 	and.w	r3, r3, #28
 800437a:	2204      	movs	r2, #4
 800437c:	409a      	lsls	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	4013      	ands	r3, r2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d026      	beq.n	80043d4 <HAL_DMA_IRQHandler+0x7a>
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	f003 0304 	and.w	r3, r3, #4
 800438c:	2b00      	cmp	r3, #0
 800438e:	d021      	beq.n	80043d4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0320 	and.w	r3, r3, #32
 800439a:	2b00      	cmp	r3, #0
 800439c:	d107      	bne.n	80043ae <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f022 0204 	bic.w	r2, r2, #4
 80043ac:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b2:	f003 021c 	and.w	r2, r3, #28
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ba:	2104      	movs	r1, #4
 80043bc:	fa01 f202 	lsl.w	r2, r1, r2
 80043c0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d071      	beq.n	80044ae <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80043d2:	e06c      	b.n	80044ae <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d8:	f003 031c 	and.w	r3, r3, #28
 80043dc:	2202      	movs	r2, #2
 80043de:	409a      	lsls	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	4013      	ands	r3, r2
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d02e      	beq.n	8004446 <HAL_DMA_IRQHandler+0xec>
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	f003 0302 	and.w	r3, r3, #2
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d029      	beq.n	8004446 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0320 	and.w	r3, r3, #32
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d10b      	bne.n	8004418 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f022 020a 	bic.w	r2, r2, #10
 800440e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800441c:	f003 021c 	and.w	r2, r3, #28
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004424:	2102      	movs	r1, #2
 8004426:	fa01 f202 	lsl.w	r2, r1, r2
 800442a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004438:	2b00      	cmp	r3, #0
 800443a:	d038      	beq.n	80044ae <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004444:	e033      	b.n	80044ae <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800444a:	f003 031c 	and.w	r3, r3, #28
 800444e:	2208      	movs	r2, #8
 8004450:	409a      	lsls	r2, r3
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	4013      	ands	r3, r2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d02a      	beq.n	80044b0 <HAL_DMA_IRQHandler+0x156>
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	f003 0308 	and.w	r3, r3, #8
 8004460:	2b00      	cmp	r3, #0
 8004462:	d025      	beq.n	80044b0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f022 020e 	bic.w	r2, r2, #14
 8004472:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004478:	f003 021c 	and.w	r2, r3, #28
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004480:	2101      	movs	r1, #1
 8004482:	fa01 f202 	lsl.w	r2, r1, r2
 8004486:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2201      	movs	r2, #1
 8004492:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d004      	beq.n	80044b0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80044ae:	bf00      	nop
 80044b0:	bf00      	nop
}
 80044b2:	3710      	adds	r7, #16
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80044c6:	b2db      	uxtb	r3, r3
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b085      	sub	sp, #20
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
 80044e0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e6:	f003 021c 	and.w	r2, r3, #28
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ee:	2101      	movs	r1, #1
 80044f0:	fa01 f202 	lsl.w	r2, r1, r2
 80044f4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	683a      	ldr	r2, [r7, #0]
 80044fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	2b10      	cmp	r3, #16
 8004504:	d108      	bne.n	8004518 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68ba      	ldr	r2, [r7, #8]
 8004514:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004516:	e007      	b.n	8004528 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68ba      	ldr	r2, [r7, #8]
 800451e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	60da      	str	r2, [r3, #12]
}
 8004528:	bf00      	nop
 800452a:	3714      	adds	r7, #20
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004534:	b480      	push	{r7}
 8004536:	b087      	sub	sp, #28
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800453e:	2300      	movs	r3, #0
 8004540:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004542:	e17f      	b.n	8004844 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	2101      	movs	r1, #1
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	fa01 f303 	lsl.w	r3, r1, r3
 8004550:	4013      	ands	r3, r2
 8004552:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2b00      	cmp	r3, #0
 8004558:	f000 8171 	beq.w	800483e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f003 0303 	and.w	r3, r3, #3
 8004564:	2b01      	cmp	r3, #1
 8004566:	d005      	beq.n	8004574 <HAL_GPIO_Init+0x40>
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f003 0303 	and.w	r3, r3, #3
 8004570:	2b02      	cmp	r3, #2
 8004572:	d130      	bne.n	80045d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	005b      	lsls	r3, r3, #1
 800457e:	2203      	movs	r2, #3
 8004580:	fa02 f303 	lsl.w	r3, r2, r3
 8004584:	43db      	mvns	r3, r3
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	4013      	ands	r3, r2
 800458a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	68da      	ldr	r2, [r3, #12]
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	005b      	lsls	r3, r3, #1
 8004594:	fa02 f303 	lsl.w	r3, r2, r3
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	4313      	orrs	r3, r2
 800459c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80045aa:	2201      	movs	r2, #1
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	fa02 f303 	lsl.w	r3, r2, r3
 80045b2:	43db      	mvns	r3, r3
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	4013      	ands	r3, r2
 80045b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	091b      	lsrs	r3, r3, #4
 80045c0:	f003 0201 	and.w	r2, r3, #1
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f003 0303 	and.w	r3, r3, #3
 80045de:	2b03      	cmp	r3, #3
 80045e0:	d118      	bne.n	8004614 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80045e8:	2201      	movs	r2, #1
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	fa02 f303 	lsl.w	r3, r2, r3
 80045f0:	43db      	mvns	r3, r3
 80045f2:	693a      	ldr	r2, [r7, #16]
 80045f4:	4013      	ands	r3, r2
 80045f6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	08db      	lsrs	r3, r3, #3
 80045fe:	f003 0201 	and.w	r2, r3, #1
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	fa02 f303 	lsl.w	r3, r2, r3
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	4313      	orrs	r3, r2
 800460c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f003 0303 	and.w	r3, r3, #3
 800461c:	2b03      	cmp	r3, #3
 800461e:	d017      	beq.n	8004650 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	005b      	lsls	r3, r3, #1
 800462a:	2203      	movs	r2, #3
 800462c:	fa02 f303 	lsl.w	r3, r2, r3
 8004630:	43db      	mvns	r3, r3
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	4013      	ands	r3, r2
 8004636:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	689a      	ldr	r2, [r3, #8]
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	005b      	lsls	r3, r3, #1
 8004640:	fa02 f303 	lsl.w	r3, r2, r3
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	4313      	orrs	r3, r2
 8004648:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f003 0303 	and.w	r3, r3, #3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d123      	bne.n	80046a4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	08da      	lsrs	r2, r3, #3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	3208      	adds	r2, #8
 8004664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004668:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	f003 0307 	and.w	r3, r3, #7
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	220f      	movs	r2, #15
 8004674:	fa02 f303 	lsl.w	r3, r2, r3
 8004678:	43db      	mvns	r3, r3
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	4013      	ands	r3, r2
 800467e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	691a      	ldr	r2, [r3, #16]
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	f003 0307 	and.w	r3, r3, #7
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	fa02 f303 	lsl.w	r3, r2, r3
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	4313      	orrs	r3, r2
 8004694:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	08da      	lsrs	r2, r3, #3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	3208      	adds	r2, #8
 800469e:	6939      	ldr	r1, [r7, #16]
 80046a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	005b      	lsls	r3, r3, #1
 80046ae:	2203      	movs	r2, #3
 80046b0:	fa02 f303 	lsl.w	r3, r2, r3
 80046b4:	43db      	mvns	r3, r3
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	4013      	ands	r3, r2
 80046ba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f003 0203 	and.w	r2, r3, #3
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	005b      	lsls	r3, r3, #1
 80046c8:	fa02 f303 	lsl.w	r3, r2, r3
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f000 80ac 	beq.w	800483e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046e6:	4b5f      	ldr	r3, [pc, #380]	; (8004864 <HAL_GPIO_Init+0x330>)
 80046e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046ea:	4a5e      	ldr	r2, [pc, #376]	; (8004864 <HAL_GPIO_Init+0x330>)
 80046ec:	f043 0301 	orr.w	r3, r3, #1
 80046f0:	6613      	str	r3, [r2, #96]	; 0x60
 80046f2:	4b5c      	ldr	r3, [pc, #368]	; (8004864 <HAL_GPIO_Init+0x330>)
 80046f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	60bb      	str	r3, [r7, #8]
 80046fc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80046fe:	4a5a      	ldr	r2, [pc, #360]	; (8004868 <HAL_GPIO_Init+0x334>)
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	089b      	lsrs	r3, r3, #2
 8004704:	3302      	adds	r3, #2
 8004706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800470a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	f003 0303 	and.w	r3, r3, #3
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	220f      	movs	r2, #15
 8004716:	fa02 f303 	lsl.w	r3, r2, r3
 800471a:	43db      	mvns	r3, r3
 800471c:	693a      	ldr	r2, [r7, #16]
 800471e:	4013      	ands	r3, r2
 8004720:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004728:	d025      	beq.n	8004776 <HAL_GPIO_Init+0x242>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a4f      	ldr	r2, [pc, #316]	; (800486c <HAL_GPIO_Init+0x338>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d01f      	beq.n	8004772 <HAL_GPIO_Init+0x23e>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a4e      	ldr	r2, [pc, #312]	; (8004870 <HAL_GPIO_Init+0x33c>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d019      	beq.n	800476e <HAL_GPIO_Init+0x23a>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a4d      	ldr	r2, [pc, #308]	; (8004874 <HAL_GPIO_Init+0x340>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d013      	beq.n	800476a <HAL_GPIO_Init+0x236>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a4c      	ldr	r2, [pc, #304]	; (8004878 <HAL_GPIO_Init+0x344>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d00d      	beq.n	8004766 <HAL_GPIO_Init+0x232>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a4b      	ldr	r2, [pc, #300]	; (800487c <HAL_GPIO_Init+0x348>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d007      	beq.n	8004762 <HAL_GPIO_Init+0x22e>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a4a      	ldr	r2, [pc, #296]	; (8004880 <HAL_GPIO_Init+0x34c>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d101      	bne.n	800475e <HAL_GPIO_Init+0x22a>
 800475a:	2306      	movs	r3, #6
 800475c:	e00c      	b.n	8004778 <HAL_GPIO_Init+0x244>
 800475e:	2307      	movs	r3, #7
 8004760:	e00a      	b.n	8004778 <HAL_GPIO_Init+0x244>
 8004762:	2305      	movs	r3, #5
 8004764:	e008      	b.n	8004778 <HAL_GPIO_Init+0x244>
 8004766:	2304      	movs	r3, #4
 8004768:	e006      	b.n	8004778 <HAL_GPIO_Init+0x244>
 800476a:	2303      	movs	r3, #3
 800476c:	e004      	b.n	8004778 <HAL_GPIO_Init+0x244>
 800476e:	2302      	movs	r3, #2
 8004770:	e002      	b.n	8004778 <HAL_GPIO_Init+0x244>
 8004772:	2301      	movs	r3, #1
 8004774:	e000      	b.n	8004778 <HAL_GPIO_Init+0x244>
 8004776:	2300      	movs	r3, #0
 8004778:	697a      	ldr	r2, [r7, #20]
 800477a:	f002 0203 	and.w	r2, r2, #3
 800477e:	0092      	lsls	r2, r2, #2
 8004780:	4093      	lsls	r3, r2
 8004782:	693a      	ldr	r2, [r7, #16]
 8004784:	4313      	orrs	r3, r2
 8004786:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004788:	4937      	ldr	r1, [pc, #220]	; (8004868 <HAL_GPIO_Init+0x334>)
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	089b      	lsrs	r3, r3, #2
 800478e:	3302      	adds	r3, #2
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004796:	4b3b      	ldr	r3, [pc, #236]	; (8004884 <HAL_GPIO_Init+0x350>)
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	43db      	mvns	r3, r3
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	4013      	ands	r3, r2
 80047a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d003      	beq.n	80047ba <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80047b2:	693a      	ldr	r2, [r7, #16]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80047ba:	4a32      	ldr	r2, [pc, #200]	; (8004884 <HAL_GPIO_Init+0x350>)
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80047c0:	4b30      	ldr	r3, [pc, #192]	; (8004884 <HAL_GPIO_Init+0x350>)
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	43db      	mvns	r3, r3
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	4013      	ands	r3, r2
 80047ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d003      	beq.n	80047e4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80047e4:	4a27      	ldr	r2, [pc, #156]	; (8004884 <HAL_GPIO_Init+0x350>)
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80047ea:	4b26      	ldr	r3, [pc, #152]	; (8004884 <HAL_GPIO_Init+0x350>)
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	43db      	mvns	r3, r3
 80047f4:	693a      	ldr	r2, [r7, #16]
 80047f6:	4013      	ands	r3, r2
 80047f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d003      	beq.n	800480e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	4313      	orrs	r3, r2
 800480c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800480e:	4a1d      	ldr	r2, [pc, #116]	; (8004884 <HAL_GPIO_Init+0x350>)
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004814:	4b1b      	ldr	r3, [pc, #108]	; (8004884 <HAL_GPIO_Init+0x350>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	43db      	mvns	r3, r3
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	4013      	ands	r3, r2
 8004822:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d003      	beq.n	8004838 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004830:	693a      	ldr	r2, [r7, #16]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	4313      	orrs	r3, r2
 8004836:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004838:	4a12      	ldr	r2, [pc, #72]	; (8004884 <HAL_GPIO_Init+0x350>)
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	3301      	adds	r3, #1
 8004842:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	fa22 f303 	lsr.w	r3, r2, r3
 800484e:	2b00      	cmp	r3, #0
 8004850:	f47f ae78 	bne.w	8004544 <HAL_GPIO_Init+0x10>
  }
}
 8004854:	bf00      	nop
 8004856:	bf00      	nop
 8004858:	371c      	adds	r7, #28
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	40021000 	.word	0x40021000
 8004868:	40010000 	.word	0x40010000
 800486c:	48000400 	.word	0x48000400
 8004870:	48000800 	.word	0x48000800
 8004874:	48000c00 	.word	0x48000c00
 8004878:	48001000 	.word	0x48001000
 800487c:	48001400 	.word	0x48001400
 8004880:	48001800 	.word	0x48001800
 8004884:	40010400 	.word	0x40010400

08004888 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	460b      	mov	r3, r1
 8004892:	807b      	strh	r3, [r7, #2]
 8004894:	4613      	mov	r3, r2
 8004896:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004898:	787b      	ldrb	r3, [r7, #1]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d003      	beq.n	80048a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800489e:	887a      	ldrh	r2, [r7, #2]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80048a4:	e002      	b.n	80048ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80048a6:	887a      	ldrh	r2, [r7, #2]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80048ac:	bf00      	nop
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	460b      	mov	r3, r1
 80048c2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	695b      	ldr	r3, [r3, #20]
 80048c8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80048ca:	887a      	ldrh	r2, [r7, #2]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	4013      	ands	r3, r2
 80048d0:	041a      	lsls	r2, r3, #16
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	43d9      	mvns	r1, r3
 80048d6:	887b      	ldrh	r3, [r7, #2]
 80048d8:	400b      	ands	r3, r1
 80048da:	431a      	orrs	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	619a      	str	r2, [r3, #24]
}
 80048e0:	bf00      	nop
 80048e2:	3714      	adds	r7, #20
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	4603      	mov	r3, r0
 80048f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80048f6:	4b08      	ldr	r3, [pc, #32]	; (8004918 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048f8:	695a      	ldr	r2, [r3, #20]
 80048fa:	88fb      	ldrh	r3, [r7, #6]
 80048fc:	4013      	ands	r3, r2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d006      	beq.n	8004910 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004902:	4a05      	ldr	r2, [pc, #20]	; (8004918 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004904:	88fb      	ldrh	r3, [r7, #6]
 8004906:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004908:	88fb      	ldrh	r3, [r7, #6]
 800490a:	4618      	mov	r0, r3
 800490c:	f7fd fc82 	bl	8002214 <HAL_GPIO_EXTI_Callback>
  }
}
 8004910:	bf00      	nop
 8004912:	3708      	adds	r7, #8
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	40010400 	.word	0x40010400

0800491c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d101      	bne.n	800492e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e081      	b.n	8004a32 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d106      	bne.n	8004948 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f7fd fb3e 	bl	8001fc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2224      	movs	r2, #36	; 0x24
 800494c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f022 0201 	bic.w	r2, r2, #1
 800495e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685a      	ldr	r2, [r3, #4]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800496c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	689a      	ldr	r2, [r3, #8]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800497c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d107      	bne.n	8004996 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	689a      	ldr	r2, [r3, #8]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004992:	609a      	str	r2, [r3, #8]
 8004994:	e006      	b.n	80049a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	689a      	ldr	r2, [r3, #8]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80049a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d104      	bne.n	80049b6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	6812      	ldr	r2, [r2, #0]
 80049c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80049c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68da      	ldr	r2, [r3, #12]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	691a      	ldr	r2, [r3, #16]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	430a      	orrs	r2, r1
 80049f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	69d9      	ldr	r1, [r3, #28]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a1a      	ldr	r2, [r3, #32]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	430a      	orrs	r2, r1
 8004a02:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f042 0201 	orr.w	r2, r2, #1
 8004a12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2220      	movs	r2, #32
 8004a1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3708      	adds	r7, #8
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
	...

08004a3c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b088      	sub	sp, #32
 8004a40:	af02      	add	r7, sp, #8
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	4608      	mov	r0, r1
 8004a46:	4611      	mov	r1, r2
 8004a48:	461a      	mov	r2, r3
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	817b      	strh	r3, [r7, #10]
 8004a4e:	460b      	mov	r3, r1
 8004a50:	813b      	strh	r3, [r7, #8]
 8004a52:	4613      	mov	r3, r2
 8004a54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	2b20      	cmp	r3, #32
 8004a60:	f040 80f9 	bne.w	8004c56 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a64:	6a3b      	ldr	r3, [r7, #32]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d002      	beq.n	8004a70 <HAL_I2C_Mem_Write+0x34>
 8004a6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d105      	bne.n	8004a7c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a76:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e0ed      	b.n	8004c58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d101      	bne.n	8004a8a <HAL_I2C_Mem_Write+0x4e>
 8004a86:	2302      	movs	r3, #2
 8004a88:	e0e6      	b.n	8004c58 <HAL_I2C_Mem_Write+0x21c>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004a92:	f7fd fed7 	bl	8002844 <HAL_GetTick>
 8004a96:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	9300      	str	r3, [sp, #0]
 8004a9c:	2319      	movs	r3, #25
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f001 fa64 	bl	8005f72 <I2C_WaitOnFlagUntilTimeout>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d001      	beq.n	8004ab4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e0d1      	b.n	8004c58 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2221      	movs	r2, #33	; 0x21
 8004ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2240      	movs	r2, #64	; 0x40
 8004ac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6a3a      	ldr	r2, [r7, #32]
 8004ace:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004ad4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004adc:	88f8      	ldrh	r0, [r7, #6]
 8004ade:	893a      	ldrh	r2, [r7, #8]
 8004ae0:	8979      	ldrh	r1, [r7, #10]
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	9301      	str	r3, [sp, #4]
 8004ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae8:	9300      	str	r3, [sp, #0]
 8004aea:	4603      	mov	r3, r0
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f000 fd07 	bl	8005500 <I2C_RequestMemoryWrite>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d005      	beq.n	8004b04 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e0a9      	b.n	8004c58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	2bff      	cmp	r3, #255	; 0xff
 8004b0c:	d90e      	bls.n	8004b2c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	22ff      	movs	r2, #255	; 0xff
 8004b12:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b18:	b2da      	uxtb	r2, r3
 8004b1a:	8979      	ldrh	r1, [r7, #10]
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	9300      	str	r3, [sp, #0]
 8004b20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	f001 fbcd 	bl	80062c4 <I2C_TransferConfig>
 8004b2a:	e00f      	b.n	8004b4c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b3a:	b2da      	uxtb	r2, r3
 8004b3c:	8979      	ldrh	r1, [r7, #10]
 8004b3e:	2300      	movs	r3, #0
 8004b40:	9300      	str	r3, [sp, #0]
 8004b42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b46:	68f8      	ldr	r0, [r7, #12]
 8004b48:	f001 fbbc 	bl	80062c4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b4c:	697a      	ldr	r2, [r7, #20]
 8004b4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	f001 fa4e 	bl	8005ff2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d001      	beq.n	8004b60 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e07b      	b.n	8004c58 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b64:	781a      	ldrb	r2, [r3, #0]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b70:	1c5a      	adds	r2, r3, #1
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d034      	beq.n	8004c04 <HAL_I2C_Mem_Write+0x1c8>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d130      	bne.n	8004c04 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	9300      	str	r3, [sp, #0]
 8004ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba8:	2200      	movs	r2, #0
 8004baa:	2180      	movs	r1, #128	; 0x80
 8004bac:	68f8      	ldr	r0, [r7, #12]
 8004bae:	f001 f9e0 	bl	8005f72 <I2C_WaitOnFlagUntilTimeout>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d001      	beq.n	8004bbc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e04d      	b.n	8004c58 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	2bff      	cmp	r3, #255	; 0xff
 8004bc4:	d90e      	bls.n	8004be4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	22ff      	movs	r2, #255	; 0xff
 8004bca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	8979      	ldrh	r1, [r7, #10]
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	9300      	str	r3, [sp, #0]
 8004bd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004bdc:	68f8      	ldr	r0, [r7, #12]
 8004bde:	f001 fb71 	bl	80062c4 <I2C_TransferConfig>
 8004be2:	e00f      	b.n	8004c04 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004be8:	b29a      	uxth	r2, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bf2:	b2da      	uxtb	r2, r3
 8004bf4:	8979      	ldrh	r1, [r7, #10]
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	9300      	str	r3, [sp, #0]
 8004bfa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004bfe:	68f8      	ldr	r0, [r7, #12]
 8004c00:	f001 fb60 	bl	80062c4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d19e      	bne.n	8004b4c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c0e:	697a      	ldr	r2, [r7, #20]
 8004c10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	f001 fa2d 	bl	8006072 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d001      	beq.n	8004c22 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e01a      	b.n	8004c58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2220      	movs	r2, #32
 8004c28:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	6859      	ldr	r1, [r3, #4]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	4b0a      	ldr	r3, [pc, #40]	; (8004c60 <HAL_I2C_Mem_Write+0x224>)
 8004c36:	400b      	ands	r3, r1
 8004c38:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2220      	movs	r2, #32
 8004c3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c52:	2300      	movs	r3, #0
 8004c54:	e000      	b.n	8004c58 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004c56:	2302      	movs	r3, #2
  }
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3718      	adds	r7, #24
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	fe00e800 	.word	0xfe00e800

08004c64 <HAL_I2C_Mem_Write_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                        uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b08a      	sub	sp, #40	; 0x28
 8004c68:	af02      	add	r7, sp, #8
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	4608      	mov	r0, r1
 8004c6e:	4611      	mov	r1, r2
 8004c70:	461a      	mov	r2, r3
 8004c72:	4603      	mov	r3, r0
 8004c74:	817b      	strh	r3, [r7, #10]
 8004c76:	460b      	mov	r3, r1
 8004c78:	813b      	strh	r3, [r7, #8]
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b20      	cmp	r3, #32
 8004c88:	f040 80d5 	bne.w	8004e36 <HAL_I2C_Mem_Write_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d002      	beq.n	8004c98 <HAL_I2C_Mem_Write_DMA+0x34>
 8004c92:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d105      	bne.n	8004ca4 <HAL_I2C_Mem_Write_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c9e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e0c9      	b.n	8004e38 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cb2:	d101      	bne.n	8004cb8 <HAL_I2C_Mem_Write_DMA+0x54>
    {
      return HAL_BUSY;
 8004cb4:	2302      	movs	r3, #2
 8004cb6:	e0bf      	b.n	8004e38 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d101      	bne.n	8004cc6 <HAL_I2C_Mem_Write_DMA+0x62>
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	e0b8      	b.n	8004e38 <HAL_I2C_Mem_Write_DMA+0x1d4>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004cce:	f7fd fdb9 	bl	8002844 <HAL_GetTick>
 8004cd2:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2221      	movs	r2, #33	; 0x21
 8004cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2240      	movs	r2, #64	; 0x40
 8004ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8004cf4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	4a51      	ldr	r2, [pc, #324]	; (8004e40 <HAL_I2C_Mem_Write_DMA+0x1dc>)
 8004cfa:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	4a51      	ldr	r2, [pc, #324]	; (8004e44 <HAL_I2C_Mem_Write_DMA+0x1e0>)
 8004d00:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	2bff      	cmp	r3, #255	; 0xff
 8004d0a:	d906      	bls.n	8004d1a <HAL_I2C_Mem_Write_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	22ff      	movs	r2, #255	; 0xff
 8004d10:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8004d12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d16:	61fb      	str	r3, [r7, #28]
 8004d18:	e007      	b.n	8004d2a <HAL_I2C_Mem_Write_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d1e:	b29a      	uxth	r2, r3
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004d24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d28:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart)
 8004d2a:	88f8      	ldrh	r0, [r7, #6]
 8004d2c:	893a      	ldrh	r2, [r7, #8]
 8004d2e:	8979      	ldrh	r1, [r7, #10]
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	9301      	str	r3, [sp, #4]
 8004d34:	2319      	movs	r3, #25
 8004d36:	9300      	str	r3, [sp, #0]
 8004d38:	4603      	mov	r3, r0
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f000 fbe0 	bl	8005500 <I2C_RequestMemoryWrite>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d005      	beq.n	8004d52 <HAL_I2C_Mem_Write_DMA+0xee>
        != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e072      	b.n	8004e38 <HAL_I2C_Mem_Write_DMA+0x1d4>
    }


    if (hi2c->hdmatx != NULL)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d020      	beq.n	8004d9c <HAL_I2C_Mem_Write_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5e:	4a3a      	ldr	r2, [pc, #232]	; (8004e48 <HAL_I2C_Mem_Write_DMA+0x1e4>)
 8004d60:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d66:	4a39      	ldr	r2, [pc, #228]	; (8004e4c <HAL_I2C_Mem_Write_DMA+0x1e8>)
 8004d68:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d6e:	2200      	movs	r2, #0
 8004d70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->hdmatx->XferAbortCallback = NULL;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d76:	2200      	movs	r2, #0
 8004d78:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004d7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	3328      	adds	r3, #40	; 0x28
 8004d86:	461a      	mov	r2, r3
                                       hi2c->XferSize);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8004d8c:	f7ff fa44 	bl	8004218 <HAL_DMA_Start_IT>
 8004d90:	4603      	mov	r3, r0
 8004d92:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8004d94:	7dfb      	ldrb	r3, [r7, #23]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d139      	bne.n	8004e0e <HAL_I2C_Mem_Write_DMA+0x1aa>
 8004d9a:	e013      	b.n	8004dc4 <HAL_I2C_Mem_Write_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2220      	movs	r2, #32
 8004da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004db0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e039      	b.n	8004e38 <HAL_I2C_Mem_Write_DMA+0x1d4>
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dc8:	b2da      	uxtb	r2, r3
 8004dca:	8979      	ldrh	r1, [r7, #10]
 8004dcc:	2300      	movs	r3, #0
 8004dce:	9300      	str	r3, [sp, #0]
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	68f8      	ldr	r0, [r7, #12]
 8004dd4:	f001 fa76 	bl	80062c4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004df2:	2110      	movs	r1, #16
 8004df4:	68f8      	ldr	r0, [r7, #12]
 8004df6:	f001 fa97 	bl	8006328 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e08:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	e014      	b.n	8004e38 <HAL_I2C_Mem_Write_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2220      	movs	r2, #32
 8004e12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e22:	f043 0210 	orr.w	r2, r3, #16
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e000      	b.n	8004e38 <HAL_I2C_Mem_Write_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 8004e36:	2302      	movs	r3, #2
  }
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3720      	adds	r7, #32
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	ffff0000 	.word	0xffff0000
 8004e44:	0800515b 	.word	0x0800515b
 8004e48:	08005e73 	.word	0x08005e73
 8004e4c:	08005f09 	.word	0x08005f09

08004e50 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d005      	beq.n	8004e7c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e74:	68ba      	ldr	r2, [r7, #8]
 8004e76:	68f9      	ldr	r1, [r7, #12]
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	4798      	blx	r3
  }
}
 8004e7c:	bf00      	nop
 8004e7e:	3710      	adds	r7, #16
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004e8c:	bf00      	nop
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004ea0:	bf00      	nop
 8004ea2:	370c      	adds	r7, #12
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr

08004eac <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004eb4:	bf00      	nop
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004ec8:	bf00      	nop
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	460b      	mov	r3, r1
 8004ede:	70fb      	strb	r3, [r7, #3]
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004ee4:	bf00      	nop
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004ef8:	bf00      	nop
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004f0c:	bf00      	nop
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b086      	sub	sp, #24
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f64:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d101      	bne.n	8004f78 <I2C_Slave_ISR_IT+0x24>
 8004f74:	2302      	movs	r3, #2
 8004f76:	e0ec      	b.n	8005152 <I2C_Slave_ISR_IT+0x1fe>
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	095b      	lsrs	r3, r3, #5
 8004f84:	f003 0301 	and.w	r3, r3, #1
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d009      	beq.n	8004fa0 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	095b      	lsrs	r3, r3, #5
 8004f90:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d003      	beq.n	8004fa0 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004f98:	6939      	ldr	r1, [r7, #16]
 8004f9a:	68f8      	ldr	r0, [r7, #12]
 8004f9c:	f000 fcee 	bl	800597c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	091b      	lsrs	r3, r3, #4
 8004fa4:	f003 0301 	and.w	r3, r3, #1
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d04d      	beq.n	8005048 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	091b      	lsrs	r3, r3, #4
 8004fb0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d047      	beq.n	8005048 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d128      	bne.n	8005014 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	2b28      	cmp	r3, #40	; 0x28
 8004fcc:	d108      	bne.n	8004fe0 <I2C_Slave_ISR_IT+0x8c>
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004fd4:	d104      	bne.n	8004fe0 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004fd6:	6939      	ldr	r1, [r7, #16]
 8004fd8:	68f8      	ldr	r0, [r7, #12]
 8004fda:	f000 fdd9 	bl	8005b90 <I2C_ITListenCplt>
 8004fde:	e032      	b.n	8005046 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	2b29      	cmp	r3, #41	; 0x29
 8004fea:	d10e      	bne.n	800500a <I2C_Slave_ISR_IT+0xb6>
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ff2:	d00a      	beq.n	800500a <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2210      	movs	r2, #16
 8004ffa:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004ffc:	68f8      	ldr	r0, [r7, #12]
 8004ffe:	f000 ff14 	bl	8005e2a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005002:	68f8      	ldr	r0, [r7, #12]
 8005004:	f000 fb91 	bl	800572a <I2C_ITSlaveSeqCplt>
 8005008:	e01d      	b.n	8005046 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2210      	movs	r2, #16
 8005010:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005012:	e096      	b.n	8005142 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2210      	movs	r2, #16
 800501a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005020:	f043 0204 	orr.w	r2, r3, #4
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d004      	beq.n	8005038 <I2C_Slave_ISR_IT+0xe4>
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005034:	f040 8085 	bne.w	8005142 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800503c:	4619      	mov	r1, r3
 800503e:	68f8      	ldr	r0, [r7, #12]
 8005040:	f000 fdfc 	bl	8005c3c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005044:	e07d      	b.n	8005142 <I2C_Slave_ISR_IT+0x1ee>
 8005046:	e07c      	b.n	8005142 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	089b      	lsrs	r3, r3, #2
 800504c:	f003 0301 	and.w	r3, r3, #1
 8005050:	2b00      	cmp	r3, #0
 8005052:	d030      	beq.n	80050b6 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	089b      	lsrs	r3, r3, #2
 8005058:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800505c:	2b00      	cmp	r3, #0
 800505e:	d02a      	beq.n	80050b6 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005064:	b29b      	uxth	r3, r3
 8005066:	2b00      	cmp	r3, #0
 8005068:	d018      	beq.n	800509c <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005074:	b2d2      	uxtb	r2, r2
 8005076:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507c:	1c5a      	adds	r2, r3, #1
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005086:	3b01      	subs	r3, #1
 8005088:	b29a      	uxth	r2, r3
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005092:	b29b      	uxth	r3, r3
 8005094:	3b01      	subs	r3, #1
 8005096:	b29a      	uxth	r2, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d14f      	bne.n	8005146 <I2C_Slave_ISR_IT+0x1f2>
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80050ac:	d04b      	beq.n	8005146 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	f000 fb3b 	bl	800572a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80050b4:	e047      	b.n	8005146 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	08db      	lsrs	r3, r3, #3
 80050ba:	f003 0301 	and.w	r3, r3, #1
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00a      	beq.n	80050d8 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	08db      	lsrs	r3, r3, #3
 80050c6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d004      	beq.n	80050d8 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80050ce:	6939      	ldr	r1, [r7, #16]
 80050d0:	68f8      	ldr	r0, [r7, #12]
 80050d2:	f000 fa69 	bl	80055a8 <I2C_ITAddrCplt>
 80050d6:	e037      	b.n	8005148 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	085b      	lsrs	r3, r3, #1
 80050dc:	f003 0301 	and.w	r3, r3, #1
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d031      	beq.n	8005148 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	085b      	lsrs	r3, r3, #1
 80050e8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d02b      	beq.n	8005148 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d018      	beq.n	800512c <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fe:	781a      	ldrb	r2, [r3, #0]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510a:	1c5a      	adds	r2, r3, #1
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005114:	b29b      	uxth	r3, r3
 8005116:	3b01      	subs	r3, #1
 8005118:	b29a      	uxth	r2, r3
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005122:	3b01      	subs	r3, #1
 8005124:	b29a      	uxth	r2, r3
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	851a      	strh	r2, [r3, #40]	; 0x28
 800512a:	e00d      	b.n	8005148 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005132:	d002      	beq.n	800513a <I2C_Slave_ISR_IT+0x1e6>
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d106      	bne.n	8005148 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	f000 faf5 	bl	800572a <I2C_ITSlaveSeqCplt>
 8005140:	e002      	b.n	8005148 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8005142:	bf00      	nop
 8005144:	e000      	b.n	8005148 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8005146:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3718      	adds	r7, #24
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}

0800515a <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800515a:	b580      	push	{r7, lr}
 800515c:	b088      	sub	sp, #32
 800515e:	af02      	add	r7, sp, #8
 8005160:	60f8      	str	r0, [r7, #12]
 8005162:	60b9      	str	r1, [r7, #8]
 8005164:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800516c:	2b01      	cmp	r3, #1
 800516e:	d101      	bne.n	8005174 <I2C_Master_ISR_DMA+0x1a>
 8005170:	2302      	movs	r3, #2
 8005172:	e0e1      	b.n	8005338 <I2C_Master_ISR_DMA+0x1de>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	091b      	lsrs	r3, r3, #4
 8005180:	f003 0301 	and.w	r3, r3, #1
 8005184:	2b00      	cmp	r3, #0
 8005186:	d017      	beq.n	80051b8 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	091b      	lsrs	r3, r3, #4
 800518c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005190:	2b00      	cmp	r3, #0
 8005192:	d011      	beq.n	80051b8 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2210      	movs	r2, #16
 800519a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051a0:	f043 0204 	orr.w	r2, r3, #4
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80051a8:	2120      	movs	r1, #32
 80051aa:	68f8      	ldr	r0, [r7, #12]
 80051ac:	f001 f8bc 	bl	8006328 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f000 fe3a 	bl	8005e2a <I2C_Flush_TXDR>
 80051b6:	e0ba      	b.n	800532e <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	09db      	lsrs	r3, r3, #7
 80051bc:	f003 0301 	and.w	r3, r3, #1
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d072      	beq.n	80052aa <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	099b      	lsrs	r3, r3, #6
 80051c8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d06c      	beq.n	80052aa <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051de:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d04e      	beq.n	8005288 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051f6:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	2bff      	cmp	r3, #255	; 0xff
 8005200:	d906      	bls.n	8005210 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	22ff      	movs	r2, #255	; 0xff
 8005206:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8005208:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800520c:	617b      	str	r3, [r7, #20]
 800520e:	e010      	b.n	8005232 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005214:	b29a      	uxth	r2, r3
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005222:	d003      	beq.n	800522c <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005228:	617b      	str	r3, [r7, #20]
 800522a:	e002      	b.n	8005232 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800522c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005230:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005236:	b2da      	uxtb	r2, r3
 8005238:	8a79      	ldrh	r1, [r7, #18]
 800523a:	2300      	movs	r3, #0
 800523c:	9300      	str	r3, [sp, #0]
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	68f8      	ldr	r0, [r7, #12]
 8005242:	f001 f83f 	bl	80062c4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800524a:	b29a      	uxth	r2, r3
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	b29a      	uxth	r2, r3
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800525e:	b2db      	uxtb	r3, r3
 8005260:	2b22      	cmp	r3, #34	; 0x22
 8005262:	d108      	bne.n	8005276 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005272:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005274:	e05b      	b.n	800532e <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005284:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005286:	e052      	b.n	800532e <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005292:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005296:	d003      	beq.n	80052a0 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f000 fa09 	bl	80056b0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800529e:	e046      	b.n	800532e <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80052a0:	2140      	movs	r1, #64	; 0x40
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	f000 fcca 	bl	8005c3c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80052a8:	e041      	b.n	800532e <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	099b      	lsrs	r3, r3, #6
 80052ae:	f003 0301 	and.w	r3, r3, #1
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d029      	beq.n	800530a <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	099b      	lsrs	r3, r3, #6
 80052ba:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d023      	beq.n	800530a <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d119      	bne.n	8005300 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052da:	d027      	beq.n	800532c <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80052e4:	d108      	bne.n	80052f8 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	685a      	ldr	r2, [r3, #4]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052f4:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80052f6:	e019      	b.n	800532c <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80052f8:	68f8      	ldr	r0, [r7, #12]
 80052fa:	f000 f9d9 	bl	80056b0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80052fe:	e015      	b.n	800532c <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005300:	2140      	movs	r1, #64	; 0x40
 8005302:	68f8      	ldr	r0, [r7, #12]
 8005304:	f000 fc9a 	bl	8005c3c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005308:	e010      	b.n	800532c <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	095b      	lsrs	r3, r3, #5
 800530e:	f003 0301 	and.w	r3, r3, #1
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00b      	beq.n	800532e <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	095b      	lsrs	r3, r3, #5
 800531a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800531e:	2b00      	cmp	r3, #0
 8005320:	d005      	beq.n	800532e <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005322:	68b9      	ldr	r1, [r7, #8]
 8005324:	68f8      	ldr	r0, [r7, #12]
 8005326:	f000 fa5f 	bl	80057e8 <I2C_ITMasterCplt>
 800532a:	e000      	b.n	800532e <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800532c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	3718      	adds	r7, #24
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b088      	sub	sp, #32
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005350:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8005352:	2300      	movs	r3, #0
 8005354:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800535c:	2b01      	cmp	r3, #1
 800535e:	d101      	bne.n	8005364 <I2C_Slave_ISR_DMA+0x24>
 8005360:	2302      	movs	r3, #2
 8005362:	e0c9      	b.n	80054f8 <I2C_Slave_ISR_DMA+0x1b8>
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	095b      	lsrs	r3, r3, #5
 8005370:	f003 0301 	and.w	r3, r3, #1
 8005374:	2b00      	cmp	r3, #0
 8005376:	d009      	beq.n	800538c <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	095b      	lsrs	r3, r3, #5
 800537c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005380:	2b00      	cmp	r3, #0
 8005382:	d003      	beq.n	800538c <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8005384:	68b9      	ldr	r1, [r7, #8]
 8005386:	68f8      	ldr	r0, [r7, #12]
 8005388:	f000 faf8 	bl	800597c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	091b      	lsrs	r3, r3, #4
 8005390:	f003 0301 	and.w	r3, r3, #1
 8005394:	2b00      	cmp	r3, #0
 8005396:	f000 809a 	beq.w	80054ce <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	091b      	lsrs	r3, r3, #4
 800539e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	f000 8093 	beq.w	80054ce <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	0b9b      	lsrs	r3, r3, #14
 80053ac:	f003 0301 	and.w	r3, r3, #1
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d105      	bne.n	80053c0 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	0bdb      	lsrs	r3, r3, #15
 80053b8:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d07f      	beq.n	80054c0 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d00d      	beq.n	80053e4 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	0bdb      	lsrs	r3, r3, #15
 80053cc:	f003 0301 	and.w	r3, r3, #1
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d007      	beq.n	80053e4 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d101      	bne.n	80053e4 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 80053e0:	2301      	movs	r3, #1
 80053e2:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d00d      	beq.n	8005408 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	0b9b      	lsrs	r3, r3, #14
 80053f0:	f003 0301 	and.w	r3, r3, #1
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d007      	beq.n	8005408 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d101      	bne.n	8005408 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8005404:	2301      	movs	r3, #1
 8005406:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	2b01      	cmp	r3, #1
 800540c:	d128      	bne.n	8005460 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005414:	b2db      	uxtb	r3, r3
 8005416:	2b28      	cmp	r3, #40	; 0x28
 8005418:	d108      	bne.n	800542c <I2C_Slave_ISR_DMA+0xec>
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005420:	d104      	bne.n	800542c <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8005422:	68b9      	ldr	r1, [r7, #8]
 8005424:	68f8      	ldr	r0, [r7, #12]
 8005426:	f000 fbb3 	bl	8005b90 <I2C_ITListenCplt>
 800542a:	e048      	b.n	80054be <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005432:	b2db      	uxtb	r3, r3
 8005434:	2b29      	cmp	r3, #41	; 0x29
 8005436:	d10e      	bne.n	8005456 <I2C_Slave_ISR_DMA+0x116>
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800543e:	d00a      	beq.n	8005456 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2210      	movs	r2, #16
 8005446:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8005448:	68f8      	ldr	r0, [r7, #12]
 800544a:	f000 fcee 	bl	8005e2a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800544e:	68f8      	ldr	r0, [r7, #12]
 8005450:	f000 f96b 	bl	800572a <I2C_ITSlaveSeqCplt>
 8005454:	e033      	b.n	80054be <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2210      	movs	r2, #16
 800545c:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800545e:	e034      	b.n	80054ca <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2210      	movs	r2, #16
 8005466:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800546c:	f043 0204 	orr.w	r2, r3, #4
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800547a:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d003      	beq.n	800548a <I2C_Slave_ISR_DMA+0x14a>
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005488:	d11f      	bne.n	80054ca <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800548a:	7dfb      	ldrb	r3, [r7, #23]
 800548c:	2b21      	cmp	r3, #33	; 0x21
 800548e:	d002      	beq.n	8005496 <I2C_Slave_ISR_DMA+0x156>
 8005490:	7dfb      	ldrb	r3, [r7, #23]
 8005492:	2b29      	cmp	r3, #41	; 0x29
 8005494:	d103      	bne.n	800549e <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2221      	movs	r2, #33	; 0x21
 800549a:	631a      	str	r2, [r3, #48]	; 0x30
 800549c:	e008      	b.n	80054b0 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800549e:	7dfb      	ldrb	r3, [r7, #23]
 80054a0:	2b22      	cmp	r3, #34	; 0x22
 80054a2:	d002      	beq.n	80054aa <I2C_Slave_ISR_DMA+0x16a>
 80054a4:	7dfb      	ldrb	r3, [r7, #23]
 80054a6:	2b2a      	cmp	r3, #42	; 0x2a
 80054a8:	d102      	bne.n	80054b0 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2222      	movs	r2, #34	; 0x22
 80054ae:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054b4:	4619      	mov	r1, r3
 80054b6:	68f8      	ldr	r0, [r7, #12]
 80054b8:	f000 fbc0 	bl	8005c3c <I2C_ITError>
      if (treatdmanack == 1U)
 80054bc:	e005      	b.n	80054ca <I2C_Slave_ISR_DMA+0x18a>
 80054be:	e004      	b.n	80054ca <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2210      	movs	r2, #16
 80054c6:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80054c8:	e011      	b.n	80054ee <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 80054ca:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80054cc:	e00f      	b.n	80054ee <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	08db      	lsrs	r3, r3, #3
 80054d2:	f003 0301 	and.w	r3, r3, #1
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d009      	beq.n	80054ee <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	08db      	lsrs	r3, r3, #3
 80054de:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d003      	beq.n	80054ee <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80054e6:	68b9      	ldr	r1, [r7, #8]
 80054e8:	68f8      	ldr	r0, [r7, #12]
 80054ea:	f000 f85d 	bl	80055a8 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3720      	adds	r7, #32
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b086      	sub	sp, #24
 8005504:	af02      	add	r7, sp, #8
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	4608      	mov	r0, r1
 800550a:	4611      	mov	r1, r2
 800550c:	461a      	mov	r2, r3
 800550e:	4603      	mov	r3, r0
 8005510:	817b      	strh	r3, [r7, #10]
 8005512:	460b      	mov	r3, r1
 8005514:	813b      	strh	r3, [r7, #8]
 8005516:	4613      	mov	r3, r2
 8005518:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800551a:	88fb      	ldrh	r3, [r7, #6]
 800551c:	b2da      	uxtb	r2, r3
 800551e:	8979      	ldrh	r1, [r7, #10]
 8005520:	4b20      	ldr	r3, [pc, #128]	; (80055a4 <I2C_RequestMemoryWrite+0xa4>)
 8005522:	9300      	str	r3, [sp, #0]
 8005524:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005528:	68f8      	ldr	r0, [r7, #12]
 800552a:	f000 fecb 	bl	80062c4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800552e:	69fa      	ldr	r2, [r7, #28]
 8005530:	69b9      	ldr	r1, [r7, #24]
 8005532:	68f8      	ldr	r0, [r7, #12]
 8005534:	f000 fd5d 	bl	8005ff2 <I2C_WaitOnTXISFlagUntilTimeout>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d001      	beq.n	8005542 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e02c      	b.n	800559c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005542:	88fb      	ldrh	r3, [r7, #6]
 8005544:	2b01      	cmp	r3, #1
 8005546:	d105      	bne.n	8005554 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005548:	893b      	ldrh	r3, [r7, #8]
 800554a:	b2da      	uxtb	r2, r3
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	629a      	str	r2, [r3, #40]	; 0x28
 8005552:	e015      	b.n	8005580 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005554:	893b      	ldrh	r3, [r7, #8]
 8005556:	0a1b      	lsrs	r3, r3, #8
 8005558:	b29b      	uxth	r3, r3
 800555a:	b2da      	uxtb	r2, r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005562:	69fa      	ldr	r2, [r7, #28]
 8005564:	69b9      	ldr	r1, [r7, #24]
 8005566:	68f8      	ldr	r0, [r7, #12]
 8005568:	f000 fd43 	bl	8005ff2 <I2C_WaitOnTXISFlagUntilTimeout>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d001      	beq.n	8005576 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e012      	b.n	800559c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005576:	893b      	ldrh	r3, [r7, #8]
 8005578:	b2da      	uxtb	r2, r3
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	9300      	str	r3, [sp, #0]
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	2200      	movs	r2, #0
 8005588:	2180      	movs	r1, #128	; 0x80
 800558a:	68f8      	ldr	r0, [r7, #12]
 800558c:	f000 fcf1 	bl	8005f72 <I2C_WaitOnFlagUntilTimeout>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d001      	beq.n	800559a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e000      	b.n	800559c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	3710      	adds	r7, #16
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	80002000 	.word	0x80002000

080055a8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80055be:	2b28      	cmp	r3, #40	; 0x28
 80055c0:	d16a      	bne.n	8005698 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	699b      	ldr	r3, [r3, #24]
 80055c8:	0c1b      	lsrs	r3, r3, #16
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	f003 0301 	and.w	r3, r3, #1
 80055d0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	699b      	ldr	r3, [r3, #24]
 80055d8:	0c1b      	lsrs	r3, r3, #16
 80055da:	b29b      	uxth	r3, r3
 80055dc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80055e0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055ee:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80055fc:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	2b02      	cmp	r3, #2
 8005604:	d138      	bne.n	8005678 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005606:	897b      	ldrh	r3, [r7, #10]
 8005608:	09db      	lsrs	r3, r3, #7
 800560a:	b29a      	uxth	r2, r3
 800560c:	89bb      	ldrh	r3, [r7, #12]
 800560e:	4053      	eors	r3, r2
 8005610:	b29b      	uxth	r3, r3
 8005612:	f003 0306 	and.w	r3, r3, #6
 8005616:	2b00      	cmp	r3, #0
 8005618:	d11c      	bne.n	8005654 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800561a:	897b      	ldrh	r3, [r7, #10]
 800561c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005622:	1c5a      	adds	r2, r3, #1
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800562c:	2b02      	cmp	r3, #2
 800562e:	d13b      	bne.n	80056a8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2208      	movs	r2, #8
 800563c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005646:	89ba      	ldrh	r2, [r7, #12]
 8005648:	7bfb      	ldrb	r3, [r7, #15]
 800564a:	4619      	mov	r1, r3
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f7ff fc41 	bl	8004ed4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005652:	e029      	b.n	80056a8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8005654:	893b      	ldrh	r3, [r7, #8]
 8005656:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005658:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 fec7 	bl	80063f0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800566a:	89ba      	ldrh	r2, [r7, #12]
 800566c:	7bfb      	ldrb	r3, [r7, #15]
 800566e:	4619      	mov	r1, r3
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f7ff fc2f 	bl	8004ed4 <HAL_I2C_AddrCallback>
}
 8005676:	e017      	b.n	80056a8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005678:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 feb7 	bl	80063f0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800568a:	89ba      	ldrh	r2, [r7, #12]
 800568c:	7bfb      	ldrb	r3, [r7, #15]
 800568e:	4619      	mov	r1, r3
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f7ff fc1f 	bl	8004ed4 <HAL_I2C_AddrCallback>
}
 8005696:	e007      	b.n	80056a8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2208      	movs	r2, #8
 800569e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80056a8:	bf00      	nop
 80056aa:	3710      	adds	r7, #16
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b082      	sub	sp, #8
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	2b21      	cmp	r3, #33	; 0x21
 80056ca:	d115      	bne.n	80056f8 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2220      	movs	r2, #32
 80056d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2211      	movs	r2, #17
 80056d8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80056e0:	2101      	movs	r1, #1
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 fe84 	bl	80063f0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f7ff fbc7 	bl	8004e84 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80056f6:	e014      	b.n	8005722 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2220      	movs	r2, #32
 80056fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2212      	movs	r2, #18
 8005704:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800570c:	2102      	movs	r1, #2
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 fe6e 	bl	80063f0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f7ff fbbb 	bl	8004e98 <HAL_I2C_MasterRxCpltCallback>
}
 8005722:	bf00      	nop
 8005724:	3708      	adds	r7, #8
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}

0800572a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800572a:	b580      	push	{r7, lr}
 800572c:	b084      	sub	sp, #16
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	0b9b      	lsrs	r3, r3, #14
 8005746:	f003 0301 	and.w	r3, r3, #1
 800574a:	2b00      	cmp	r3, #0
 800574c:	d008      	beq.n	8005760 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800575c:	601a      	str	r2, [r3, #0]
 800575e:	e00d      	b.n	800577c <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	0bdb      	lsrs	r3, r3, #15
 8005764:	f003 0301 	and.w	r3, r3, #1
 8005768:	2b00      	cmp	r3, #0
 800576a:	d007      	beq.n	800577c <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800577a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005782:	b2db      	uxtb	r3, r3
 8005784:	2b29      	cmp	r3, #41	; 0x29
 8005786:	d112      	bne.n	80057ae <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2228      	movs	r2, #40	; 0x28
 800578c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2221      	movs	r2, #33	; 0x21
 8005794:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005796:	2101      	movs	r1, #1
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 fe29 	bl	80063f0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f7ff fb80 	bl	8004eac <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80057ac:	e017      	b.n	80057de <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	2b2a      	cmp	r3, #42	; 0x2a
 80057b8:	d111      	bne.n	80057de <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2228      	movs	r2, #40	; 0x28
 80057be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2222      	movs	r2, #34	; 0x22
 80057c6:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80057c8:	2102      	movs	r1, #2
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 fe10 	bl	80063f0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f7ff fb71 	bl	8004ec0 <HAL_I2C_SlaveRxCpltCallback>
}
 80057de:	bf00      	nop
 80057e0:	3710      	adds	r7, #16
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
	...

080057e8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b086      	sub	sp, #24
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2220      	movs	r2, #32
 80057fc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005804:	b2db      	uxtb	r3, r3
 8005806:	2b21      	cmp	r3, #33	; 0x21
 8005808:	d107      	bne.n	800581a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800580a:	2101      	movs	r1, #1
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 fdef 	bl	80063f0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2211      	movs	r2, #17
 8005816:	631a      	str	r2, [r3, #48]	; 0x30
 8005818:	e00c      	b.n	8005834 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005820:	b2db      	uxtb	r3, r3
 8005822:	2b22      	cmp	r3, #34	; 0x22
 8005824:	d106      	bne.n	8005834 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005826:	2102      	movs	r1, #2
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 fde1 	bl	80063f0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2212      	movs	r2, #18
 8005832:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	6859      	ldr	r1, [r3, #4]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	4b4d      	ldr	r3, [pc, #308]	; (8005974 <I2C_ITMasterCplt+0x18c>)
 8005840:	400b      	ands	r3, r1
 8005842:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a4a      	ldr	r2, [pc, #296]	; (8005978 <I2C_ITMasterCplt+0x190>)
 800584e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	091b      	lsrs	r3, r3, #4
 8005854:	f003 0301 	and.w	r3, r3, #1
 8005858:	2b00      	cmp	r3, #0
 800585a:	d009      	beq.n	8005870 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2210      	movs	r2, #16
 8005862:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005868:	f043 0204 	orr.w	r2, r3, #4
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005876:	b2db      	uxtb	r3, r3
 8005878:	2b60      	cmp	r3, #96	; 0x60
 800587a:	d10b      	bne.n	8005894 <I2C_ITMasterCplt+0xac>
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	089b      	lsrs	r3, r3, #2
 8005880:	f003 0301 	and.w	r3, r3, #1
 8005884:	2b00      	cmp	r3, #0
 8005886:	d005      	beq.n	8005894 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588e:	b2db      	uxtb	r3, r3
 8005890:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8005892:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 fac8 	bl	8005e2a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800589e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	2b60      	cmp	r3, #96	; 0x60
 80058aa:	d002      	beq.n	80058b2 <I2C_ITMasterCplt+0xca>
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d006      	beq.n	80058c0 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058b6:	4619      	mov	r1, r3
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 f9bf 	bl	8005c3c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80058be:	e054      	b.n	800596a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	2b21      	cmp	r3, #33	; 0x21
 80058ca:	d124      	bne.n	8005916 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2220      	movs	r2, #32
 80058d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	2b40      	cmp	r3, #64	; 0x40
 80058e4:	d10b      	bne.n	80058fe <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f7ff fb04 	bl	8004f04 <HAL_I2C_MemTxCpltCallback>
}
 80058fc:	e035      	b.n	800596a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f7ff fab8 	bl	8004e84 <HAL_I2C_MasterTxCpltCallback>
}
 8005914:	e029      	b.n	800596a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800591c:	b2db      	uxtb	r3, r3
 800591e:	2b22      	cmp	r3, #34	; 0x22
 8005920:	d123      	bne.n	800596a <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2220      	movs	r2, #32
 8005926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005936:	b2db      	uxtb	r3, r3
 8005938:	2b40      	cmp	r3, #64	; 0x40
 800593a:	d10b      	bne.n	8005954 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f7ff fae3 	bl	8004f18 <HAL_I2C_MemRxCpltCallback>
}
 8005952:	e00a      	b.n	800596a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f7ff fa97 	bl	8004e98 <HAL_I2C_MasterRxCpltCallback>
}
 800596a:	bf00      	nop
 800596c:	3718      	adds	r7, #24
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop
 8005974:	fe00e800 	.word	0xfe00e800
 8005978:	ffff0000 	.word	0xffff0000

0800597c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b086      	sub	sp, #24
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005998:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2220      	movs	r2, #32
 80059a0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80059a2:	7bfb      	ldrb	r3, [r7, #15]
 80059a4:	2b21      	cmp	r3, #33	; 0x21
 80059a6:	d002      	beq.n	80059ae <I2C_ITSlaveCplt+0x32>
 80059a8:	7bfb      	ldrb	r3, [r7, #15]
 80059aa:	2b29      	cmp	r3, #41	; 0x29
 80059ac:	d108      	bne.n	80059c0 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80059ae:	f248 0101 	movw	r1, #32769	; 0x8001
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 fd1c 	bl	80063f0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2221      	movs	r2, #33	; 0x21
 80059bc:	631a      	str	r2, [r3, #48]	; 0x30
 80059be:	e00d      	b.n	80059dc <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80059c0:	7bfb      	ldrb	r3, [r7, #15]
 80059c2:	2b22      	cmp	r3, #34	; 0x22
 80059c4:	d002      	beq.n	80059cc <I2C_ITSlaveCplt+0x50>
 80059c6:	7bfb      	ldrb	r3, [r7, #15]
 80059c8:	2b2a      	cmp	r3, #42	; 0x2a
 80059ca:	d107      	bne.n	80059dc <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80059cc:	f248 0102 	movw	r1, #32770	; 0x8002
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 fd0d 	bl	80063f0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2222      	movs	r2, #34	; 0x22
 80059da:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	685a      	ldr	r2, [r3, #4]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059ea:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	6859      	ldr	r1, [r3, #4]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	4b64      	ldr	r3, [pc, #400]	; (8005b88 <I2C_ITSlaveCplt+0x20c>)
 80059f8:	400b      	ands	r3, r1
 80059fa:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f000 fa14 	bl	8005e2a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	0b9b      	lsrs	r3, r3, #14
 8005a06:	f003 0301 	and.w	r3, r3, #1
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d013      	beq.n	8005a36 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005a1c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d020      	beq.n	8005a68 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	b29a      	uxth	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005a34:	e018      	b.n	8005a68 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	0bdb      	lsrs	r3, r3, #15
 8005a3a:	f003 0301 	and.w	r3, r3, #1
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d012      	beq.n	8005a68 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a50:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d006      	beq.n	8005a68 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	b29a      	uxth	r2, r3
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	089b      	lsrs	r3, r3, #2
 8005a6c:	f003 0301 	and.w	r3, r3, #1
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d020      	beq.n	8005ab6 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	f023 0304 	bic.w	r3, r3, #4
 8005a7a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a86:	b2d2      	uxtb	r2, r2
 8005a88:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8e:	1c5a      	adds	r2, r3, #1
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00c      	beq.n	8005ab6 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d005      	beq.n	8005acc <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ac4:	f043 0204 	orr.w	r2, r3, #4
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d010      	beq.n	8005b04 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f000 f8a7 	bl	8005c3c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	2b28      	cmp	r3, #40	; 0x28
 8005af8:	d141      	bne.n	8005b7e <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005afa:	6979      	ldr	r1, [r7, #20]
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 f847 	bl	8005b90 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005b02:	e03c      	b.n	8005b7e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b08:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005b0c:	d014      	beq.n	8005b38 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f7ff fe0b 	bl	800572a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a1d      	ldr	r2, [pc, #116]	; (8005b8c <I2C_ITSlaveCplt+0x210>)
 8005b18:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2220      	movs	r2, #32
 8005b1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f7ff f9dd 	bl	8004ef0 <HAL_I2C_ListenCpltCallback>
}
 8005b36:	e022      	b.n	8005b7e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	2b22      	cmp	r3, #34	; 0x22
 8005b42:	d10e      	bne.n	8005b62 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2220      	movs	r2, #32
 8005b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f7ff f9b0 	bl	8004ec0 <HAL_I2C_SlaveRxCpltCallback>
}
 8005b60:	e00d      	b.n	8005b7e <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2220      	movs	r2, #32
 8005b66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f7ff f997 	bl	8004eac <HAL_I2C_SlaveTxCpltCallback>
}
 8005b7e:	bf00      	nop
 8005b80:	3718      	adds	r7, #24
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	fe00e800 	.word	0xfe00e800
 8005b8c:	ffff0000 	.word	0xffff0000

08005b90 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a26      	ldr	r2, [pc, #152]	; (8005c38 <I2C_ITListenCplt+0xa8>)
 8005b9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2220      	movs	r2, #32
 8005baa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	089b      	lsrs	r3, r3, #2
 8005bc0:	f003 0301 	and.w	r3, r3, #1
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d022      	beq.n	8005c0e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd2:	b2d2      	uxtb	r2, r2
 8005bd4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bda:	1c5a      	adds	r2, r3, #1
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d012      	beq.n	8005c0e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bec:	3b01      	subs	r3, #1
 8005bee:	b29a      	uxth	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	3b01      	subs	r3, #1
 8005bfc:	b29a      	uxth	r2, r3
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c06:	f043 0204 	orr.w	r2, r3, #4
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005c0e:	f248 0103 	movw	r1, #32771	; 0x8003
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 fbec 	bl	80063f0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2210      	movs	r2, #16
 8005c1e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f7ff f961 	bl	8004ef0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005c2e:	bf00      	nop
 8005c30:	3708      	adds	r7, #8
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	ffff0000 	.word	0xffff0000

08005c3c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a5d      	ldr	r2, [pc, #372]	; (8005dd0 <I2C_ITError+0x194>)
 8005c5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	431a      	orrs	r2, r3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005c6e:	7bfb      	ldrb	r3, [r7, #15]
 8005c70:	2b28      	cmp	r3, #40	; 0x28
 8005c72:	d005      	beq.n	8005c80 <I2C_ITError+0x44>
 8005c74:	7bfb      	ldrb	r3, [r7, #15]
 8005c76:	2b29      	cmp	r3, #41	; 0x29
 8005c78:	d002      	beq.n	8005c80 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005c7a:	7bfb      	ldrb	r3, [r7, #15]
 8005c7c:	2b2a      	cmp	r3, #42	; 0x2a
 8005c7e:	d10b      	bne.n	8005c98 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005c80:	2103      	movs	r1, #3
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 fbb4 	bl	80063f0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2228      	movs	r2, #40	; 0x28
 8005c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a50      	ldr	r2, [pc, #320]	; (8005dd4 <I2C_ITError+0x198>)
 8005c94:	635a      	str	r2, [r3, #52]	; 0x34
 8005c96:	e011      	b.n	8005cbc <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005c98:	f248 0103 	movw	r1, #32771	; 0x8003
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 fba7 	bl	80063f0 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	2b60      	cmp	r3, #96	; 0x60
 8005cac:	d003      	beq.n	8005cb6 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2220      	movs	r2, #32
 8005cb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc0:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d039      	beq.n	8005d3e <I2C_ITError+0x102>
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	2b11      	cmp	r3, #17
 8005cce:	d002      	beq.n	8005cd6 <I2C_ITError+0x9a>
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	2b21      	cmp	r3, #33	; 0x21
 8005cd4:	d133      	bne.n	8005d3e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ce0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ce4:	d107      	bne.n	8005cf6 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005cf4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f7fe fbdc 	bl	80044b8 <HAL_DMA_GetState>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d017      	beq.n	8005d36 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d0a:	4a33      	ldr	r2, [pc, #204]	; (8005dd8 <I2C_ITError+0x19c>)
 8005d0c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f7fe fadc 	bl	80042d8 <HAL_DMA_Abort_IT>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d04d      	beq.n	8005dc2 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d30:	4610      	mov	r0, r2
 8005d32:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005d34:	e045      	b.n	8005dc2 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 f850 	bl	8005ddc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005d3c:	e041      	b.n	8005dc2 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d039      	beq.n	8005dba <I2C_ITError+0x17e>
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	2b12      	cmp	r3, #18
 8005d4a:	d002      	beq.n	8005d52 <I2C_ITError+0x116>
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	2b22      	cmp	r3, #34	; 0x22
 8005d50:	d133      	bne.n	8005dba <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d60:	d107      	bne.n	8005d72 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d70:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7fe fb9e 	bl	80044b8 <HAL_DMA_GetState>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d017      	beq.n	8005db2 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d86:	4a14      	ldr	r2, [pc, #80]	; (8005dd8 <I2C_ITError+0x19c>)
 8005d88:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7fe fa9e 	bl	80042d8 <HAL_DMA_Abort_IT>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d011      	beq.n	8005dc6 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005dac:	4610      	mov	r0, r2
 8005dae:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005db0:	e009      	b.n	8005dc6 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 f812 	bl	8005ddc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005db8:	e005      	b.n	8005dc6 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 f80e 	bl	8005ddc <I2C_TreatErrorCallback>
  }
}
 8005dc0:	e002      	b.n	8005dc8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005dc2:	bf00      	nop
 8005dc4:	e000      	b.n	8005dc8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005dc6:	bf00      	nop
}
 8005dc8:	bf00      	nop
 8005dca:	3710      	adds	r7, #16
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	ffff0000 	.word	0xffff0000
 8005dd4:	08004f55 	.word	0x08004f55
 8005dd8:	08005f37 	.word	0x08005f37

08005ddc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b082      	sub	sp, #8
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	2b60      	cmp	r3, #96	; 0x60
 8005dee:	d10e      	bne.n	8005e0e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2220      	movs	r2, #32
 8005df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f7ff f89a 	bl	8004f40 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005e0c:	e009      	b.n	8005e22 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f7ff f885 	bl	8004f2c <HAL_I2C_ErrorCallback>
}
 8005e22:	bf00      	nop
 8005e24:	3708      	adds	r7, #8
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}

08005e2a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	b083      	sub	sp, #12
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	699b      	ldr	r3, [r3, #24]
 8005e38:	f003 0302 	and.w	r3, r3, #2
 8005e3c:	2b02      	cmp	r3, #2
 8005e3e:	d103      	bne.n	8005e48 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2200      	movs	r2, #0
 8005e46:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	699b      	ldr	r3, [r3, #24]
 8005e4e:	f003 0301 	and.w	r3, r3, #1
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d007      	beq.n	8005e66 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	699a      	ldr	r2, [r3, #24]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f042 0201 	orr.w	r2, r2, #1
 8005e64:	619a      	str	r2, [r3, #24]
  }
}
 8005e66:	bf00      	nop
 8005e68:	370c      	adds	r7, #12
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr

08005e72 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005e72:	b580      	push	{r7, lr}
 8005e74:	b084      	sub	sp, #16
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e7e:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005e8e:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d104      	bne.n	8005ea4 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005e9a:	2120      	movs	r1, #32
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f000 fa43 	bl	8006328 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8005ea2:	e02d      	b.n	8005f00 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8005eac:	441a      	add	r2, r3
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	2bff      	cmp	r3, #255	; 0xff
 8005eba:	d903      	bls.n	8005ec4 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	22ff      	movs	r2, #255	; 0xff
 8005ec0:	851a      	strh	r2, [r3, #40]	; 0x28
 8005ec2:	e004      	b.n	8005ece <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ec8:	b29a      	uxth	r2, r3
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	3328      	adds	r3, #40	; 0x28
 8005ede:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8005ee4:	f7fe f998 	bl	8004218 <HAL_DMA_Start_IT>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d004      	beq.n	8005ef8 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8005eee:	2110      	movs	r1, #16
 8005ef0:	68f8      	ldr	r0, [r7, #12]
 8005ef2:	f7ff fea3 	bl	8005c3c <I2C_ITError>
}
 8005ef6:	e003      	b.n	8005f00 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8005ef8:	2140      	movs	r1, #64	; 0x40
 8005efa:	68f8      	ldr	r0, [r7, #12]
 8005efc:	f000 fa14 	bl	8006328 <I2C_Enable_IRQ>
}
 8005f00:	bf00      	nop
 8005f02:	3710      	adds	r7, #16
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f14:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	685a      	ldr	r2, [r3, #4]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f24:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8005f26:	2110      	movs	r1, #16
 8005f28:	68f8      	ldr	r0, [r7, #12]
 8005f2a:	f7ff fe87 	bl	8005c3c <I2C_ITError>
}
 8005f2e:	bf00      	nop
 8005f30:	3710      	adds	r7, #16
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}

08005f36 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005f36:	b580      	push	{r7, lr}
 8005f38:	b084      	sub	sp, #16
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f42:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d003      	beq.n	8005f54 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f50:	2200      	movs	r2, #0
 8005f52:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d003      	beq.n	8005f64 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f60:	2200      	movs	r2, #0
 8005f62:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8005f64:	68f8      	ldr	r0, [r7, #12]
 8005f66:	f7ff ff39 	bl	8005ddc <I2C_TreatErrorCallback>
}
 8005f6a:	bf00      	nop
 8005f6c:	3710      	adds	r7, #16
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}

08005f72 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005f72:	b580      	push	{r7, lr}
 8005f74:	b084      	sub	sp, #16
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	60f8      	str	r0, [r7, #12]
 8005f7a:	60b9      	str	r1, [r7, #8]
 8005f7c:	603b      	str	r3, [r7, #0]
 8005f7e:	4613      	mov	r3, r2
 8005f80:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f82:	e022      	b.n	8005fca <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f8a:	d01e      	beq.n	8005fca <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f8c:	f7fc fc5a 	bl	8002844 <HAL_GetTick>
 8005f90:	4602      	mov	r2, r0
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	1ad3      	subs	r3, r2, r3
 8005f96:	683a      	ldr	r2, [r7, #0]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d302      	bcc.n	8005fa2 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d113      	bne.n	8005fca <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fa6:	f043 0220 	orr.w	r2, r3, #32
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2220      	movs	r2, #32
 8005fb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e00f      	b.n	8005fea <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	699a      	ldr	r2, [r3, #24]
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	4013      	ands	r3, r2
 8005fd4:	68ba      	ldr	r2, [r7, #8]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	bf0c      	ite	eq
 8005fda:	2301      	moveq	r3, #1
 8005fdc:	2300      	movne	r3, #0
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	79fb      	ldrb	r3, [r7, #7]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d0cd      	beq.n	8005f84 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3710      	adds	r7, #16
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}

08005ff2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005ff2:	b580      	push	{r7, lr}
 8005ff4:	b084      	sub	sp, #16
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	60f8      	str	r0, [r7, #12]
 8005ffa:	60b9      	str	r1, [r7, #8]
 8005ffc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005ffe:	e02c      	b.n	800605a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	68b9      	ldr	r1, [r7, #8]
 8006004:	68f8      	ldr	r0, [r7, #12]
 8006006:	f000 f871 	bl	80060ec <I2C_IsErrorOccurred>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d001      	beq.n	8006014 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	e02a      	b.n	800606a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800601a:	d01e      	beq.n	800605a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800601c:	f7fc fc12 	bl	8002844 <HAL_GetTick>
 8006020:	4602      	mov	r2, r0
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	68ba      	ldr	r2, [r7, #8]
 8006028:	429a      	cmp	r2, r3
 800602a:	d302      	bcc.n	8006032 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d113      	bne.n	800605a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006036:	f043 0220 	orr.w	r2, r3, #32
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2220      	movs	r2, #32
 8006042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2200      	movs	r2, #0
 800604a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2200      	movs	r2, #0
 8006052:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e007      	b.n	800606a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	699b      	ldr	r3, [r3, #24]
 8006060:	f003 0302 	and.w	r3, r3, #2
 8006064:	2b02      	cmp	r3, #2
 8006066:	d1cb      	bne.n	8006000 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3710      	adds	r7, #16
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}

08006072 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006072:	b580      	push	{r7, lr}
 8006074:	b084      	sub	sp, #16
 8006076:	af00      	add	r7, sp, #0
 8006078:	60f8      	str	r0, [r7, #12]
 800607a:	60b9      	str	r1, [r7, #8]
 800607c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800607e:	e028      	b.n	80060d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	68b9      	ldr	r1, [r7, #8]
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f000 f831 	bl	80060ec <I2C_IsErrorOccurred>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d001      	beq.n	8006094 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	e026      	b.n	80060e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006094:	f7fc fbd6 	bl	8002844 <HAL_GetTick>
 8006098:	4602      	mov	r2, r0
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	1ad3      	subs	r3, r2, r3
 800609e:	68ba      	ldr	r2, [r7, #8]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d302      	bcc.n	80060aa <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d113      	bne.n	80060d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ae:	f043 0220 	orr.w	r2, r3, #32
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2220      	movs	r2, #32
 80060ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	e007      	b.n	80060e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	699b      	ldr	r3, [r3, #24]
 80060d8:	f003 0320 	and.w	r3, r3, #32
 80060dc:	2b20      	cmp	r3, #32
 80060de:	d1cf      	bne.n	8006080 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3710      	adds	r7, #16
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
	...

080060ec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b08a      	sub	sp, #40	; 0x28
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060f8:	2300      	movs	r3, #0
 80060fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006106:	2300      	movs	r3, #0
 8006108:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	f003 0310 	and.w	r3, r3, #16
 8006114:	2b00      	cmp	r3, #0
 8006116:	d075      	beq.n	8006204 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2210      	movs	r2, #16
 800611e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006120:	e056      	b.n	80061d0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006128:	d052      	beq.n	80061d0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800612a:	f7fc fb8b 	bl	8002844 <HAL_GetTick>
 800612e:	4602      	mov	r2, r0
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	68ba      	ldr	r2, [r7, #8]
 8006136:	429a      	cmp	r2, r3
 8006138:	d302      	bcc.n	8006140 <I2C_IsErrorOccurred+0x54>
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d147      	bne.n	80061d0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800614a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006152:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	699b      	ldr	r3, [r3, #24]
 800615a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800615e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006162:	d12e      	bne.n	80061c2 <I2C_IsErrorOccurred+0xd6>
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800616a:	d02a      	beq.n	80061c2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800616c:	7cfb      	ldrb	r3, [r7, #19]
 800616e:	2b20      	cmp	r3, #32
 8006170:	d027      	beq.n	80061c2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	685a      	ldr	r2, [r3, #4]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006180:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006182:	f7fc fb5f 	bl	8002844 <HAL_GetTick>
 8006186:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006188:	e01b      	b.n	80061c2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800618a:	f7fc fb5b 	bl	8002844 <HAL_GetTick>
 800618e:	4602      	mov	r2, r0
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	1ad3      	subs	r3, r2, r3
 8006194:	2b19      	cmp	r3, #25
 8006196:	d914      	bls.n	80061c2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800619c:	f043 0220 	orr.w	r2, r3, #32
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2220      	movs	r2, #32
 80061a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2200      	movs	r2, #0
 80061b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	699b      	ldr	r3, [r3, #24]
 80061c8:	f003 0320 	and.w	r3, r3, #32
 80061cc:	2b20      	cmp	r3, #32
 80061ce:	d1dc      	bne.n	800618a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	699b      	ldr	r3, [r3, #24]
 80061d6:	f003 0320 	and.w	r3, r3, #32
 80061da:	2b20      	cmp	r3, #32
 80061dc:	d003      	beq.n	80061e6 <I2C_IsErrorOccurred+0xfa>
 80061de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d09d      	beq.n	8006122 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80061e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d103      	bne.n	80061f6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	2220      	movs	r2, #32
 80061f4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80061f6:	6a3b      	ldr	r3, [r7, #32]
 80061f8:	f043 0304 	orr.w	r3, r3, #4
 80061fc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	699b      	ldr	r3, [r3, #24]
 800620a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00b      	beq.n	800622e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006216:	6a3b      	ldr	r3, [r7, #32]
 8006218:	f043 0301 	orr.w	r3, r3, #1
 800621c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006226:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006234:	2b00      	cmp	r3, #0
 8006236:	d00b      	beq.n	8006250 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006238:	6a3b      	ldr	r3, [r7, #32]
 800623a:	f043 0308 	orr.w	r3, r3, #8
 800623e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006248:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00b      	beq.n	8006272 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800625a:	6a3b      	ldr	r3, [r7, #32]
 800625c:	f043 0302 	orr.w	r3, r3, #2
 8006260:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f44f 7200 	mov.w	r2, #512	; 0x200
 800626a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006272:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006276:	2b00      	cmp	r3, #0
 8006278:	d01c      	beq.n	80062b4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800627a:	68f8      	ldr	r0, [r7, #12]
 800627c:	f7ff fdd5 	bl	8005e2a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	6859      	ldr	r1, [r3, #4]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	4b0d      	ldr	r3, [pc, #52]	; (80062c0 <I2C_IsErrorOccurred+0x1d4>)
 800628c:	400b      	ands	r3, r1
 800628e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006294:	6a3b      	ldr	r3, [r7, #32]
 8006296:	431a      	orrs	r2, r3
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2220      	movs	r2, #32
 80062a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80062b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3728      	adds	r7, #40	; 0x28
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	fe00e800 	.word	0xfe00e800

080062c4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b087      	sub	sp, #28
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	607b      	str	r3, [r7, #4]
 80062ce:	460b      	mov	r3, r1
 80062d0:	817b      	strh	r3, [r7, #10]
 80062d2:	4613      	mov	r3, r2
 80062d4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80062d6:	897b      	ldrh	r3, [r7, #10]
 80062d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80062dc:	7a7b      	ldrb	r3, [r7, #9]
 80062de:	041b      	lsls	r3, r3, #16
 80062e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80062e4:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80062ea:	6a3b      	ldr	r3, [r7, #32]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80062f2:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	685a      	ldr	r2, [r3, #4]
 80062fa:	6a3b      	ldr	r3, [r7, #32]
 80062fc:	0d5b      	lsrs	r3, r3, #21
 80062fe:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006302:	4b08      	ldr	r3, [pc, #32]	; (8006324 <I2C_TransferConfig+0x60>)
 8006304:	430b      	orrs	r3, r1
 8006306:	43db      	mvns	r3, r3
 8006308:	ea02 0103 	and.w	r1, r2, r3
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	697a      	ldr	r2, [r7, #20]
 8006312:	430a      	orrs	r2, r1
 8006314:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006316:	bf00      	nop
 8006318:	371c      	adds	r7, #28
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	03ff63ff 	.word	0x03ff63ff

08006328 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006328:	b480      	push	{r7}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	460b      	mov	r3, r1
 8006332:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006334:	2300      	movs	r3, #0
 8006336:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800633c:	4a2a      	ldr	r2, [pc, #168]	; (80063e8 <I2C_Enable_IRQ+0xc0>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d004      	beq.n	800634c <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8006346:	4a29      	ldr	r2, [pc, #164]	; (80063ec <I2C_Enable_IRQ+0xc4>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d11d      	bne.n	8006388 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800634c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006350:	2b00      	cmp	r3, #0
 8006352:	da03      	bge.n	800635c <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800635a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800635c:	887b      	ldrh	r3, [r7, #2]
 800635e:	2b10      	cmp	r3, #16
 8006360:	d103      	bne.n	800636a <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8006368:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800636a:	887b      	ldrh	r3, [r7, #2]
 800636c:	2b20      	cmp	r3, #32
 800636e:	d103      	bne.n	8006378 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006376:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006378:	887b      	ldrh	r3, [r7, #2]
 800637a:	2b40      	cmp	r3, #64	; 0x40
 800637c:	d125      	bne.n	80063ca <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006384:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006386:	e020      	b.n	80063ca <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006388:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800638c:	2b00      	cmp	r3, #0
 800638e:	da03      	bge.n	8006398 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006396:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006398:	887b      	ldrh	r3, [r7, #2]
 800639a:	f003 0301 	and.w	r3, r3, #1
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d003      	beq.n	80063aa <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80063a8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80063aa:	887b      	ldrh	r3, [r7, #2]
 80063ac:	f003 0302 	and.w	r3, r3, #2
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d003      	beq.n	80063bc <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80063ba:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80063bc:	887b      	ldrh	r3, [r7, #2]
 80063be:	2b20      	cmp	r3, #32
 80063c0:	d103      	bne.n	80063ca <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f043 0320 	orr.w	r3, r3, #32
 80063c8:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	6819      	ldr	r1, [r3, #0]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	430a      	orrs	r2, r1
 80063d8:	601a      	str	r2, [r3, #0]
}
 80063da:	bf00      	nop
 80063dc:	3714      	adds	r7, #20
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr
 80063e6:	bf00      	nop
 80063e8:	0800515b 	.word	0x0800515b
 80063ec:	08005341 	.word	0x08005341

080063f0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b085      	sub	sp, #20
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	460b      	mov	r3, r1
 80063fa:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80063fc:	2300      	movs	r3, #0
 80063fe:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006400:	887b      	ldrh	r3, [r7, #2]
 8006402:	f003 0301 	and.w	r3, r3, #1
 8006406:	2b00      	cmp	r3, #0
 8006408:	d00f      	beq.n	800642a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8006410:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006418:	b2db      	uxtb	r3, r3
 800641a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800641e:	2b28      	cmp	r3, #40	; 0x28
 8006420:	d003      	beq.n	800642a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8006428:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800642a:	887b      	ldrh	r3, [r7, #2]
 800642c:	f003 0302 	and.w	r3, r3, #2
 8006430:	2b00      	cmp	r3, #0
 8006432:	d00f      	beq.n	8006454 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800643a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006442:	b2db      	uxtb	r3, r3
 8006444:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006448:	2b28      	cmp	r3, #40	; 0x28
 800644a:	d003      	beq.n	8006454 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8006452:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006454:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006458:	2b00      	cmp	r3, #0
 800645a:	da03      	bge.n	8006464 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006462:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006464:	887b      	ldrh	r3, [r7, #2]
 8006466:	2b10      	cmp	r3, #16
 8006468:	d103      	bne.n	8006472 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8006470:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006472:	887b      	ldrh	r3, [r7, #2]
 8006474:	2b20      	cmp	r3, #32
 8006476:	d103      	bne.n	8006480 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f043 0320 	orr.w	r3, r3, #32
 800647e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006480:	887b      	ldrh	r3, [r7, #2]
 8006482:	2b40      	cmp	r3, #64	; 0x40
 8006484:	d103      	bne.n	800648e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800648c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	6819      	ldr	r1, [r3, #0]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	43da      	mvns	r2, r3
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	400a      	ands	r2, r1
 800649e:	601a      	str	r2, [r3, #0]
}
 80064a0:	bf00      	nop
 80064a2:	3714      	adds	r7, #20
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	2b20      	cmp	r3, #32
 80064c0:	d138      	bne.n	8006534 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d101      	bne.n	80064d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80064cc:	2302      	movs	r3, #2
 80064ce:	e032      	b.n	8006536 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2224      	movs	r2, #36	; 0x24
 80064dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f022 0201 	bic.w	r2, r2, #1
 80064ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80064fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	6819      	ldr	r1, [r3, #0]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	683a      	ldr	r2, [r7, #0]
 800650c:	430a      	orrs	r2, r1
 800650e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f042 0201 	orr.w	r2, r2, #1
 800651e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2220      	movs	r2, #32
 8006524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006530:	2300      	movs	r3, #0
 8006532:	e000      	b.n	8006536 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006534:	2302      	movs	r3, #2
  }
}
 8006536:	4618      	mov	r0, r3
 8006538:	370c      	adds	r7, #12
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr

08006542 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006542:	b480      	push	{r7}
 8006544:	b085      	sub	sp, #20
 8006546:	af00      	add	r7, sp, #0
 8006548:	6078      	str	r0, [r7, #4]
 800654a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006552:	b2db      	uxtb	r3, r3
 8006554:	2b20      	cmp	r3, #32
 8006556:	d139      	bne.n	80065cc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800655e:	2b01      	cmp	r3, #1
 8006560:	d101      	bne.n	8006566 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006562:	2302      	movs	r3, #2
 8006564:	e033      	b.n	80065ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2201      	movs	r2, #1
 800656a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2224      	movs	r2, #36	; 0x24
 8006572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f022 0201 	bic.w	r2, r2, #1
 8006584:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006594:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	021b      	lsls	r3, r3, #8
 800659a:	68fa      	ldr	r2, [r7, #12]
 800659c:	4313      	orrs	r3, r2
 800659e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f042 0201 	orr.w	r2, r2, #1
 80065b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2220      	movs	r2, #32
 80065bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80065c8:	2300      	movs	r3, #0
 80065ca:	e000      	b.n	80065ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80065cc:	2302      	movs	r3, #2
  }
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3714      	adds	r7, #20
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr
	...

080065dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80065dc:	b480      	push	{r7}
 80065de:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80065e0:	4b04      	ldr	r3, [pc, #16]	; (80065f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr
 80065f2:	bf00      	nop
 80065f4:	40007000 	.word	0x40007000

080065f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b085      	sub	sp, #20
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006606:	d130      	bne.n	800666a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006608:	4b23      	ldr	r3, [pc, #140]	; (8006698 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006610:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006614:	d038      	beq.n	8006688 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006616:	4b20      	ldr	r3, [pc, #128]	; (8006698 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800661e:	4a1e      	ldr	r2, [pc, #120]	; (8006698 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006620:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006624:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006626:	4b1d      	ldr	r3, [pc, #116]	; (800669c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	2232      	movs	r2, #50	; 0x32
 800662c:	fb02 f303 	mul.w	r3, r2, r3
 8006630:	4a1b      	ldr	r2, [pc, #108]	; (80066a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006632:	fba2 2303 	umull	r2, r3, r2, r3
 8006636:	0c9b      	lsrs	r3, r3, #18
 8006638:	3301      	adds	r3, #1
 800663a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800663c:	e002      	b.n	8006644 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	3b01      	subs	r3, #1
 8006642:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006644:	4b14      	ldr	r3, [pc, #80]	; (8006698 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006646:	695b      	ldr	r3, [r3, #20]
 8006648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800664c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006650:	d102      	bne.n	8006658 <HAL_PWREx_ControlVoltageScaling+0x60>
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1f2      	bne.n	800663e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006658:	4b0f      	ldr	r3, [pc, #60]	; (8006698 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800665a:	695b      	ldr	r3, [r3, #20]
 800665c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006660:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006664:	d110      	bne.n	8006688 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	e00f      	b.n	800668a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800666a:	4b0b      	ldr	r3, [pc, #44]	; (8006698 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006672:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006676:	d007      	beq.n	8006688 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006678:	4b07      	ldr	r3, [pc, #28]	; (8006698 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006680:	4a05      	ldr	r2, [pc, #20]	; (8006698 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006682:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006686:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006688:	2300      	movs	r3, #0
}
 800668a:	4618      	mov	r0, r3
 800668c:	3714      	adds	r7, #20
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr
 8006696:	bf00      	nop
 8006698:	40007000 	.word	0x40007000
 800669c:	20000008 	.word	0x20000008
 80066a0:	431bde83 	.word	0x431bde83

080066a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b088      	sub	sp, #32
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d101      	bne.n	80066b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e3d4      	b.n	8006e60 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066b6:	4ba1      	ldr	r3, [pc, #644]	; (800693c <HAL_RCC_OscConfig+0x298>)
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	f003 030c 	and.w	r3, r3, #12
 80066be:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80066c0:	4b9e      	ldr	r3, [pc, #632]	; (800693c <HAL_RCC_OscConfig+0x298>)
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	f003 0303 	and.w	r3, r3, #3
 80066c8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f003 0310 	and.w	r3, r3, #16
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	f000 80e4 	beq.w	80068a0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d007      	beq.n	80066ee <HAL_RCC_OscConfig+0x4a>
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	2b0c      	cmp	r3, #12
 80066e2:	f040 808b 	bne.w	80067fc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	f040 8087 	bne.w	80067fc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80066ee:	4b93      	ldr	r3, [pc, #588]	; (800693c <HAL_RCC_OscConfig+0x298>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 0302 	and.w	r3, r3, #2
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d005      	beq.n	8006706 <HAL_RCC_OscConfig+0x62>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	699b      	ldr	r3, [r3, #24]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d101      	bne.n	8006706 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	e3ac      	b.n	8006e60 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a1a      	ldr	r2, [r3, #32]
 800670a:	4b8c      	ldr	r3, [pc, #560]	; (800693c <HAL_RCC_OscConfig+0x298>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f003 0308 	and.w	r3, r3, #8
 8006712:	2b00      	cmp	r3, #0
 8006714:	d004      	beq.n	8006720 <HAL_RCC_OscConfig+0x7c>
 8006716:	4b89      	ldr	r3, [pc, #548]	; (800693c <HAL_RCC_OscConfig+0x298>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800671e:	e005      	b.n	800672c <HAL_RCC_OscConfig+0x88>
 8006720:	4b86      	ldr	r3, [pc, #536]	; (800693c <HAL_RCC_OscConfig+0x298>)
 8006722:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006726:	091b      	lsrs	r3, r3, #4
 8006728:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800672c:	4293      	cmp	r3, r2
 800672e:	d223      	bcs.n	8006778 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6a1b      	ldr	r3, [r3, #32]
 8006734:	4618      	mov	r0, r3
 8006736:	f000 fd41 	bl	80071bc <RCC_SetFlashLatencyFromMSIRange>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d001      	beq.n	8006744 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	e38d      	b.n	8006e60 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006744:	4b7d      	ldr	r3, [pc, #500]	; (800693c <HAL_RCC_OscConfig+0x298>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a7c      	ldr	r2, [pc, #496]	; (800693c <HAL_RCC_OscConfig+0x298>)
 800674a:	f043 0308 	orr.w	r3, r3, #8
 800674e:	6013      	str	r3, [r2, #0]
 8006750:	4b7a      	ldr	r3, [pc, #488]	; (800693c <HAL_RCC_OscConfig+0x298>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6a1b      	ldr	r3, [r3, #32]
 800675c:	4977      	ldr	r1, [pc, #476]	; (800693c <HAL_RCC_OscConfig+0x298>)
 800675e:	4313      	orrs	r3, r2
 8006760:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006762:	4b76      	ldr	r3, [pc, #472]	; (800693c <HAL_RCC_OscConfig+0x298>)
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	69db      	ldr	r3, [r3, #28]
 800676e:	021b      	lsls	r3, r3, #8
 8006770:	4972      	ldr	r1, [pc, #456]	; (800693c <HAL_RCC_OscConfig+0x298>)
 8006772:	4313      	orrs	r3, r2
 8006774:	604b      	str	r3, [r1, #4]
 8006776:	e025      	b.n	80067c4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006778:	4b70      	ldr	r3, [pc, #448]	; (800693c <HAL_RCC_OscConfig+0x298>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a6f      	ldr	r2, [pc, #444]	; (800693c <HAL_RCC_OscConfig+0x298>)
 800677e:	f043 0308 	orr.w	r3, r3, #8
 8006782:	6013      	str	r3, [r2, #0]
 8006784:	4b6d      	ldr	r3, [pc, #436]	; (800693c <HAL_RCC_OscConfig+0x298>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6a1b      	ldr	r3, [r3, #32]
 8006790:	496a      	ldr	r1, [pc, #424]	; (800693c <HAL_RCC_OscConfig+0x298>)
 8006792:	4313      	orrs	r3, r2
 8006794:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006796:	4b69      	ldr	r3, [pc, #420]	; (800693c <HAL_RCC_OscConfig+0x298>)
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	69db      	ldr	r3, [r3, #28]
 80067a2:	021b      	lsls	r3, r3, #8
 80067a4:	4965      	ldr	r1, [pc, #404]	; (800693c <HAL_RCC_OscConfig+0x298>)
 80067a6:	4313      	orrs	r3, r2
 80067a8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d109      	bne.n	80067c4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6a1b      	ldr	r3, [r3, #32]
 80067b4:	4618      	mov	r0, r3
 80067b6:	f000 fd01 	bl	80071bc <RCC_SetFlashLatencyFromMSIRange>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d001      	beq.n	80067c4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	e34d      	b.n	8006e60 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80067c4:	f000 fc36 	bl	8007034 <HAL_RCC_GetSysClockFreq>
 80067c8:	4602      	mov	r2, r0
 80067ca:	4b5c      	ldr	r3, [pc, #368]	; (800693c <HAL_RCC_OscConfig+0x298>)
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	091b      	lsrs	r3, r3, #4
 80067d0:	f003 030f 	and.w	r3, r3, #15
 80067d4:	495a      	ldr	r1, [pc, #360]	; (8006940 <HAL_RCC_OscConfig+0x29c>)
 80067d6:	5ccb      	ldrb	r3, [r1, r3]
 80067d8:	f003 031f 	and.w	r3, r3, #31
 80067dc:	fa22 f303 	lsr.w	r3, r2, r3
 80067e0:	4a58      	ldr	r2, [pc, #352]	; (8006944 <HAL_RCC_OscConfig+0x2a0>)
 80067e2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80067e4:	4b58      	ldr	r3, [pc, #352]	; (8006948 <HAL_RCC_OscConfig+0x2a4>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4618      	mov	r0, r3
 80067ea:	f7fb ffdb 	bl	80027a4 <HAL_InitTick>
 80067ee:	4603      	mov	r3, r0
 80067f0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80067f2:	7bfb      	ldrb	r3, [r7, #15]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d052      	beq.n	800689e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80067f8:	7bfb      	ldrb	r3, [r7, #15]
 80067fa:	e331      	b.n	8006e60 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	699b      	ldr	r3, [r3, #24]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d032      	beq.n	800686a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006804:	4b4d      	ldr	r3, [pc, #308]	; (800693c <HAL_RCC_OscConfig+0x298>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a4c      	ldr	r2, [pc, #304]	; (800693c <HAL_RCC_OscConfig+0x298>)
 800680a:	f043 0301 	orr.w	r3, r3, #1
 800680e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006810:	f7fc f818 	bl	8002844 <HAL_GetTick>
 8006814:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006816:	e008      	b.n	800682a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006818:	f7fc f814 	bl	8002844 <HAL_GetTick>
 800681c:	4602      	mov	r2, r0
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	1ad3      	subs	r3, r2, r3
 8006822:	2b02      	cmp	r3, #2
 8006824:	d901      	bls.n	800682a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8006826:	2303      	movs	r3, #3
 8006828:	e31a      	b.n	8006e60 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800682a:	4b44      	ldr	r3, [pc, #272]	; (800693c <HAL_RCC_OscConfig+0x298>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 0302 	and.w	r3, r3, #2
 8006832:	2b00      	cmp	r3, #0
 8006834:	d0f0      	beq.n	8006818 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006836:	4b41      	ldr	r3, [pc, #260]	; (800693c <HAL_RCC_OscConfig+0x298>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a40      	ldr	r2, [pc, #256]	; (800693c <HAL_RCC_OscConfig+0x298>)
 800683c:	f043 0308 	orr.w	r3, r3, #8
 8006840:	6013      	str	r3, [r2, #0]
 8006842:	4b3e      	ldr	r3, [pc, #248]	; (800693c <HAL_RCC_OscConfig+0x298>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a1b      	ldr	r3, [r3, #32]
 800684e:	493b      	ldr	r1, [pc, #236]	; (800693c <HAL_RCC_OscConfig+0x298>)
 8006850:	4313      	orrs	r3, r2
 8006852:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006854:	4b39      	ldr	r3, [pc, #228]	; (800693c <HAL_RCC_OscConfig+0x298>)
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	69db      	ldr	r3, [r3, #28]
 8006860:	021b      	lsls	r3, r3, #8
 8006862:	4936      	ldr	r1, [pc, #216]	; (800693c <HAL_RCC_OscConfig+0x298>)
 8006864:	4313      	orrs	r3, r2
 8006866:	604b      	str	r3, [r1, #4]
 8006868:	e01a      	b.n	80068a0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800686a:	4b34      	ldr	r3, [pc, #208]	; (800693c <HAL_RCC_OscConfig+0x298>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a33      	ldr	r2, [pc, #204]	; (800693c <HAL_RCC_OscConfig+0x298>)
 8006870:	f023 0301 	bic.w	r3, r3, #1
 8006874:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006876:	f7fb ffe5 	bl	8002844 <HAL_GetTick>
 800687a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800687c:	e008      	b.n	8006890 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800687e:	f7fb ffe1 	bl	8002844 <HAL_GetTick>
 8006882:	4602      	mov	r2, r0
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	1ad3      	subs	r3, r2, r3
 8006888:	2b02      	cmp	r3, #2
 800688a:	d901      	bls.n	8006890 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800688c:	2303      	movs	r3, #3
 800688e:	e2e7      	b.n	8006e60 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006890:	4b2a      	ldr	r3, [pc, #168]	; (800693c <HAL_RCC_OscConfig+0x298>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 0302 	and.w	r3, r3, #2
 8006898:	2b00      	cmp	r3, #0
 800689a:	d1f0      	bne.n	800687e <HAL_RCC_OscConfig+0x1da>
 800689c:	e000      	b.n	80068a0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800689e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 0301 	and.w	r3, r3, #1
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d074      	beq.n	8006996 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80068ac:	69bb      	ldr	r3, [r7, #24]
 80068ae:	2b08      	cmp	r3, #8
 80068b0:	d005      	beq.n	80068be <HAL_RCC_OscConfig+0x21a>
 80068b2:	69bb      	ldr	r3, [r7, #24]
 80068b4:	2b0c      	cmp	r3, #12
 80068b6:	d10e      	bne.n	80068d6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	2b03      	cmp	r3, #3
 80068bc:	d10b      	bne.n	80068d6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068be:	4b1f      	ldr	r3, [pc, #124]	; (800693c <HAL_RCC_OscConfig+0x298>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d064      	beq.n	8006994 <HAL_RCC_OscConfig+0x2f0>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d160      	bne.n	8006994 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	e2c4      	b.n	8006e60 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068de:	d106      	bne.n	80068ee <HAL_RCC_OscConfig+0x24a>
 80068e0:	4b16      	ldr	r3, [pc, #88]	; (800693c <HAL_RCC_OscConfig+0x298>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a15      	ldr	r2, [pc, #84]	; (800693c <HAL_RCC_OscConfig+0x298>)
 80068e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068ea:	6013      	str	r3, [r2, #0]
 80068ec:	e01d      	b.n	800692a <HAL_RCC_OscConfig+0x286>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80068f6:	d10c      	bne.n	8006912 <HAL_RCC_OscConfig+0x26e>
 80068f8:	4b10      	ldr	r3, [pc, #64]	; (800693c <HAL_RCC_OscConfig+0x298>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a0f      	ldr	r2, [pc, #60]	; (800693c <HAL_RCC_OscConfig+0x298>)
 80068fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006902:	6013      	str	r3, [r2, #0]
 8006904:	4b0d      	ldr	r3, [pc, #52]	; (800693c <HAL_RCC_OscConfig+0x298>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a0c      	ldr	r2, [pc, #48]	; (800693c <HAL_RCC_OscConfig+0x298>)
 800690a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800690e:	6013      	str	r3, [r2, #0]
 8006910:	e00b      	b.n	800692a <HAL_RCC_OscConfig+0x286>
 8006912:	4b0a      	ldr	r3, [pc, #40]	; (800693c <HAL_RCC_OscConfig+0x298>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a09      	ldr	r2, [pc, #36]	; (800693c <HAL_RCC_OscConfig+0x298>)
 8006918:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800691c:	6013      	str	r3, [r2, #0]
 800691e:	4b07      	ldr	r3, [pc, #28]	; (800693c <HAL_RCC_OscConfig+0x298>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a06      	ldr	r2, [pc, #24]	; (800693c <HAL_RCC_OscConfig+0x298>)
 8006924:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006928:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d01c      	beq.n	800696c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006932:	f7fb ff87 	bl	8002844 <HAL_GetTick>
 8006936:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006938:	e011      	b.n	800695e <HAL_RCC_OscConfig+0x2ba>
 800693a:	bf00      	nop
 800693c:	40021000 	.word	0x40021000
 8006940:	0800c010 	.word	0x0800c010
 8006944:	20000008 	.word	0x20000008
 8006948:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800694c:	f7fb ff7a 	bl	8002844 <HAL_GetTick>
 8006950:	4602      	mov	r2, r0
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	2b64      	cmp	r3, #100	; 0x64
 8006958:	d901      	bls.n	800695e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800695a:	2303      	movs	r3, #3
 800695c:	e280      	b.n	8006e60 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800695e:	4baf      	ldr	r3, [pc, #700]	; (8006c1c <HAL_RCC_OscConfig+0x578>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006966:	2b00      	cmp	r3, #0
 8006968:	d0f0      	beq.n	800694c <HAL_RCC_OscConfig+0x2a8>
 800696a:	e014      	b.n	8006996 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800696c:	f7fb ff6a 	bl	8002844 <HAL_GetTick>
 8006970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006972:	e008      	b.n	8006986 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006974:	f7fb ff66 	bl	8002844 <HAL_GetTick>
 8006978:	4602      	mov	r2, r0
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	2b64      	cmp	r3, #100	; 0x64
 8006980:	d901      	bls.n	8006986 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006982:	2303      	movs	r3, #3
 8006984:	e26c      	b.n	8006e60 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006986:	4ba5      	ldr	r3, [pc, #660]	; (8006c1c <HAL_RCC_OscConfig+0x578>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800698e:	2b00      	cmp	r3, #0
 8006990:	d1f0      	bne.n	8006974 <HAL_RCC_OscConfig+0x2d0>
 8006992:	e000      	b.n	8006996 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006994:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f003 0302 	and.w	r3, r3, #2
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d060      	beq.n	8006a64 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80069a2:	69bb      	ldr	r3, [r7, #24]
 80069a4:	2b04      	cmp	r3, #4
 80069a6:	d005      	beq.n	80069b4 <HAL_RCC_OscConfig+0x310>
 80069a8:	69bb      	ldr	r3, [r7, #24]
 80069aa:	2b0c      	cmp	r3, #12
 80069ac:	d119      	bne.n	80069e2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	2b02      	cmp	r3, #2
 80069b2:	d116      	bne.n	80069e2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80069b4:	4b99      	ldr	r3, [pc, #612]	; (8006c1c <HAL_RCC_OscConfig+0x578>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d005      	beq.n	80069cc <HAL_RCC_OscConfig+0x328>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d101      	bne.n	80069cc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	e249      	b.n	8006e60 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069cc:	4b93      	ldr	r3, [pc, #588]	; (8006c1c <HAL_RCC_OscConfig+0x578>)
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	061b      	lsls	r3, r3, #24
 80069da:	4990      	ldr	r1, [pc, #576]	; (8006c1c <HAL_RCC_OscConfig+0x578>)
 80069dc:	4313      	orrs	r3, r2
 80069de:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80069e0:	e040      	b.n	8006a64 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d023      	beq.n	8006a32 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80069ea:	4b8c      	ldr	r3, [pc, #560]	; (8006c1c <HAL_RCC_OscConfig+0x578>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a8b      	ldr	r2, [pc, #556]	; (8006c1c <HAL_RCC_OscConfig+0x578>)
 80069f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069f6:	f7fb ff25 	bl	8002844 <HAL_GetTick>
 80069fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80069fc:	e008      	b.n	8006a10 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069fe:	f7fb ff21 	bl	8002844 <HAL_GetTick>
 8006a02:	4602      	mov	r2, r0
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	1ad3      	subs	r3, r2, r3
 8006a08:	2b02      	cmp	r3, #2
 8006a0a:	d901      	bls.n	8006a10 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006a0c:	2303      	movs	r3, #3
 8006a0e:	e227      	b.n	8006e60 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a10:	4b82      	ldr	r3, [pc, #520]	; (8006c1c <HAL_RCC_OscConfig+0x578>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d0f0      	beq.n	80069fe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a1c:	4b7f      	ldr	r3, [pc, #508]	; (8006c1c <HAL_RCC_OscConfig+0x578>)
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	691b      	ldr	r3, [r3, #16]
 8006a28:	061b      	lsls	r3, r3, #24
 8006a2a:	497c      	ldr	r1, [pc, #496]	; (8006c1c <HAL_RCC_OscConfig+0x578>)
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	604b      	str	r3, [r1, #4]
 8006a30:	e018      	b.n	8006a64 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a32:	4b7a      	ldr	r3, [pc, #488]	; (8006c1c <HAL_RCC_OscConfig+0x578>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a79      	ldr	r2, [pc, #484]	; (8006c1c <HAL_RCC_OscConfig+0x578>)
 8006a38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a3e:	f7fb ff01 	bl	8002844 <HAL_GetTick>
 8006a42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006a44:	e008      	b.n	8006a58 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a46:	f7fb fefd 	bl	8002844 <HAL_GetTick>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	1ad3      	subs	r3, r2, r3
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	d901      	bls.n	8006a58 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006a54:	2303      	movs	r3, #3
 8006a56:	e203      	b.n	8006e60 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006a58:	4b70      	ldr	r3, [pc, #448]	; (8006c1c <HAL_RCC_OscConfig+0x578>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d1f0      	bne.n	8006a46 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f003 0308 	and.w	r3, r3, #8
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d03c      	beq.n	8006aea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	695b      	ldr	r3, [r3, #20]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d01c      	beq.n	8006ab2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a78:	4b68      	ldr	r3, [pc, #416]	; (8006c1c <HAL_RCC_OscConfig+0x578>)
 8006a7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a7e:	4a67      	ldr	r2, [pc, #412]	; (8006c1c <HAL_RCC_OscConfig+0x578>)
 8006a80:	f043 0301 	orr.w	r3, r3, #1
 8006a84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a88:	f7fb fedc 	bl	8002844 <HAL_GetTick>
 8006a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006a8e:	e008      	b.n	8006aa2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a90:	f7fb fed8 	bl	8002844 <HAL_GetTick>
 8006a94:	4602      	mov	r2, r0
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	1ad3      	subs	r3, r2, r3
 8006a9a:	2b02      	cmp	r3, #2
 8006a9c:	d901      	bls.n	8006aa2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006a9e:	2303      	movs	r3, #3
 8006aa0:	e1de      	b.n	8006e60 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006aa2:	4b5e      	ldr	r3, [pc, #376]	; (8006c1c <HAL_RCC_OscConfig+0x578>)
 8006aa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006aa8:	f003 0302 	and.w	r3, r3, #2
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d0ef      	beq.n	8006a90 <HAL_RCC_OscConfig+0x3ec>
 8006ab0:	e01b      	b.n	8006aea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ab2:	4b5a      	ldr	r3, [pc, #360]	; (8006c1c <HAL_RCC_OscConfig+0x578>)
 8006ab4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ab8:	4a58      	ldr	r2, [pc, #352]	; (8006c1c <HAL_RCC_OscConfig+0x578>)
 8006aba:	f023 0301 	bic.w	r3, r3, #1
 8006abe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ac2:	f7fb febf 	bl	8002844 <HAL_GetTick>
 8006ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006ac8:	e008      	b.n	8006adc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006aca:	f7fb febb 	bl	8002844 <HAL_GetTick>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	1ad3      	subs	r3, r2, r3
 8006ad4:	2b02      	cmp	r3, #2
 8006ad6:	d901      	bls.n	8006adc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006ad8:	2303      	movs	r3, #3
 8006ada:	e1c1      	b.n	8006e60 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006adc:	4b4f      	ldr	r3, [pc, #316]	; (8006c1c <HAL_RCC_OscConfig+0x578>)
 8006ade:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ae2:	f003 0302 	and.w	r3, r3, #2
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d1ef      	bne.n	8006aca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 0304 	and.w	r3, r3, #4
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	f000 80a6 	beq.w	8006c44 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006af8:	2300      	movs	r3, #0
 8006afa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006afc:	4b47      	ldr	r3, [pc, #284]	; (8006c1c <HAL_RCC_OscConfig+0x578>)
 8006afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d10d      	bne.n	8006b24 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b08:	4b44      	ldr	r3, [pc, #272]	; (8006c1c <HAL_RCC_OscConfig+0x578>)
 8006b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b0c:	4a43      	ldr	r2, [pc, #268]	; (8006c1c <HAL_RCC_OscConfig+0x578>)
 8006b0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b12:	6593      	str	r3, [r2, #88]	; 0x58
 8006b14:	4b41      	ldr	r3, [pc, #260]	; (8006c1c <HAL_RCC_OscConfig+0x578>)
 8006b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b1c:	60bb      	str	r3, [r7, #8]
 8006b1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b20:	2301      	movs	r3, #1
 8006b22:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b24:	4b3e      	ldr	r3, [pc, #248]	; (8006c20 <HAL_RCC_OscConfig+0x57c>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d118      	bne.n	8006b62 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b30:	4b3b      	ldr	r3, [pc, #236]	; (8006c20 <HAL_RCC_OscConfig+0x57c>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a3a      	ldr	r2, [pc, #232]	; (8006c20 <HAL_RCC_OscConfig+0x57c>)
 8006b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b3a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b3c:	f7fb fe82 	bl	8002844 <HAL_GetTick>
 8006b40:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b42:	e008      	b.n	8006b56 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b44:	f7fb fe7e 	bl	8002844 <HAL_GetTick>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	d901      	bls.n	8006b56 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006b52:	2303      	movs	r3, #3
 8006b54:	e184      	b.n	8006e60 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b56:	4b32      	ldr	r3, [pc, #200]	; (8006c20 <HAL_RCC_OscConfig+0x57c>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d0f0      	beq.n	8006b44 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d108      	bne.n	8006b7c <HAL_RCC_OscConfig+0x4d8>
 8006b6a:	4b2c      	ldr	r3, [pc, #176]	; (8006c1c <HAL_RCC_OscConfig+0x578>)
 8006b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b70:	4a2a      	ldr	r2, [pc, #168]	; (8006c1c <HAL_RCC_OscConfig+0x578>)
 8006b72:	f043 0301 	orr.w	r3, r3, #1
 8006b76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006b7a:	e024      	b.n	8006bc6 <HAL_RCC_OscConfig+0x522>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	2b05      	cmp	r3, #5
 8006b82:	d110      	bne.n	8006ba6 <HAL_RCC_OscConfig+0x502>
 8006b84:	4b25      	ldr	r3, [pc, #148]	; (8006c1c <HAL_RCC_OscConfig+0x578>)
 8006b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b8a:	4a24      	ldr	r2, [pc, #144]	; (8006c1c <HAL_RCC_OscConfig+0x578>)
 8006b8c:	f043 0304 	orr.w	r3, r3, #4
 8006b90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006b94:	4b21      	ldr	r3, [pc, #132]	; (8006c1c <HAL_RCC_OscConfig+0x578>)
 8006b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b9a:	4a20      	ldr	r2, [pc, #128]	; (8006c1c <HAL_RCC_OscConfig+0x578>)
 8006b9c:	f043 0301 	orr.w	r3, r3, #1
 8006ba0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006ba4:	e00f      	b.n	8006bc6 <HAL_RCC_OscConfig+0x522>
 8006ba6:	4b1d      	ldr	r3, [pc, #116]	; (8006c1c <HAL_RCC_OscConfig+0x578>)
 8006ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bac:	4a1b      	ldr	r2, [pc, #108]	; (8006c1c <HAL_RCC_OscConfig+0x578>)
 8006bae:	f023 0301 	bic.w	r3, r3, #1
 8006bb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006bb6:	4b19      	ldr	r3, [pc, #100]	; (8006c1c <HAL_RCC_OscConfig+0x578>)
 8006bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bbc:	4a17      	ldr	r2, [pc, #92]	; (8006c1c <HAL_RCC_OscConfig+0x578>)
 8006bbe:	f023 0304 	bic.w	r3, r3, #4
 8006bc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d016      	beq.n	8006bfc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bce:	f7fb fe39 	bl	8002844 <HAL_GetTick>
 8006bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006bd4:	e00a      	b.n	8006bec <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bd6:	f7fb fe35 	bl	8002844 <HAL_GetTick>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	1ad3      	subs	r3, r2, r3
 8006be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d901      	bls.n	8006bec <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8006be8:	2303      	movs	r3, #3
 8006bea:	e139      	b.n	8006e60 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006bec:	4b0b      	ldr	r3, [pc, #44]	; (8006c1c <HAL_RCC_OscConfig+0x578>)
 8006bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bf2:	f003 0302 	and.w	r3, r3, #2
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d0ed      	beq.n	8006bd6 <HAL_RCC_OscConfig+0x532>
 8006bfa:	e01a      	b.n	8006c32 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bfc:	f7fb fe22 	bl	8002844 <HAL_GetTick>
 8006c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006c02:	e00f      	b.n	8006c24 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c04:	f7fb fe1e 	bl	8002844 <HAL_GetTick>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	1ad3      	subs	r3, r2, r3
 8006c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d906      	bls.n	8006c24 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006c16:	2303      	movs	r3, #3
 8006c18:	e122      	b.n	8006e60 <HAL_RCC_OscConfig+0x7bc>
 8006c1a:	bf00      	nop
 8006c1c:	40021000 	.word	0x40021000
 8006c20:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006c24:	4b90      	ldr	r3, [pc, #576]	; (8006e68 <HAL_RCC_OscConfig+0x7c4>)
 8006c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c2a:	f003 0302 	and.w	r3, r3, #2
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d1e8      	bne.n	8006c04 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c32:	7ffb      	ldrb	r3, [r7, #31]
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d105      	bne.n	8006c44 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c38:	4b8b      	ldr	r3, [pc, #556]	; (8006e68 <HAL_RCC_OscConfig+0x7c4>)
 8006c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c3c:	4a8a      	ldr	r2, [pc, #552]	; (8006e68 <HAL_RCC_OscConfig+0x7c4>)
 8006c3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c42:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	f000 8108 	beq.w	8006e5e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	f040 80d0 	bne.w	8006df8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006c58:	4b83      	ldr	r3, [pc, #524]	; (8006e68 <HAL_RCC_OscConfig+0x7c4>)
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	f003 0203 	and.w	r2, r3, #3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d130      	bne.n	8006cce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c76:	3b01      	subs	r3, #1
 8006c78:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d127      	bne.n	8006cce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c88:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d11f      	bne.n	8006cce <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006c98:	2a07      	cmp	r2, #7
 8006c9a:	bf14      	ite	ne
 8006c9c:	2201      	movne	r2, #1
 8006c9e:	2200      	moveq	r2, #0
 8006ca0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d113      	bne.n	8006cce <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cb0:	085b      	lsrs	r3, r3, #1
 8006cb2:	3b01      	subs	r3, #1
 8006cb4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d109      	bne.n	8006cce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc4:	085b      	lsrs	r3, r3, #1
 8006cc6:	3b01      	subs	r3, #1
 8006cc8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d06e      	beq.n	8006dac <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006cce:	69bb      	ldr	r3, [r7, #24]
 8006cd0:	2b0c      	cmp	r3, #12
 8006cd2:	d069      	beq.n	8006da8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006cd4:	4b64      	ldr	r3, [pc, #400]	; (8006e68 <HAL_RCC_OscConfig+0x7c4>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d105      	bne.n	8006cec <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006ce0:	4b61      	ldr	r3, [pc, #388]	; (8006e68 <HAL_RCC_OscConfig+0x7c4>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d001      	beq.n	8006cf0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	e0b7      	b.n	8006e60 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006cf0:	4b5d      	ldr	r3, [pc, #372]	; (8006e68 <HAL_RCC_OscConfig+0x7c4>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a5c      	ldr	r2, [pc, #368]	; (8006e68 <HAL_RCC_OscConfig+0x7c4>)
 8006cf6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006cfa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006cfc:	f7fb fda2 	bl	8002844 <HAL_GetTick>
 8006d00:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d02:	e008      	b.n	8006d16 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d04:	f7fb fd9e 	bl	8002844 <HAL_GetTick>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	1ad3      	subs	r3, r2, r3
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	d901      	bls.n	8006d16 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8006d12:	2303      	movs	r3, #3
 8006d14:	e0a4      	b.n	8006e60 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d16:	4b54      	ldr	r3, [pc, #336]	; (8006e68 <HAL_RCC_OscConfig+0x7c4>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d1f0      	bne.n	8006d04 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006d22:	4b51      	ldr	r3, [pc, #324]	; (8006e68 <HAL_RCC_OscConfig+0x7c4>)
 8006d24:	68da      	ldr	r2, [r3, #12]
 8006d26:	4b51      	ldr	r3, [pc, #324]	; (8006e6c <HAL_RCC_OscConfig+0x7c8>)
 8006d28:	4013      	ands	r3, r2
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006d32:	3a01      	subs	r2, #1
 8006d34:	0112      	lsls	r2, r2, #4
 8006d36:	4311      	orrs	r1, r2
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006d3c:	0212      	lsls	r2, r2, #8
 8006d3e:	4311      	orrs	r1, r2
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006d44:	0852      	lsrs	r2, r2, #1
 8006d46:	3a01      	subs	r2, #1
 8006d48:	0552      	lsls	r2, r2, #21
 8006d4a:	4311      	orrs	r1, r2
 8006d4c:	687a      	ldr	r2, [r7, #4]
 8006d4e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006d50:	0852      	lsrs	r2, r2, #1
 8006d52:	3a01      	subs	r2, #1
 8006d54:	0652      	lsls	r2, r2, #25
 8006d56:	4311      	orrs	r1, r2
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006d5c:	0912      	lsrs	r2, r2, #4
 8006d5e:	0452      	lsls	r2, r2, #17
 8006d60:	430a      	orrs	r2, r1
 8006d62:	4941      	ldr	r1, [pc, #260]	; (8006e68 <HAL_RCC_OscConfig+0x7c4>)
 8006d64:	4313      	orrs	r3, r2
 8006d66:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006d68:	4b3f      	ldr	r3, [pc, #252]	; (8006e68 <HAL_RCC_OscConfig+0x7c4>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a3e      	ldr	r2, [pc, #248]	; (8006e68 <HAL_RCC_OscConfig+0x7c4>)
 8006d6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d72:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006d74:	4b3c      	ldr	r3, [pc, #240]	; (8006e68 <HAL_RCC_OscConfig+0x7c4>)
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	4a3b      	ldr	r2, [pc, #236]	; (8006e68 <HAL_RCC_OscConfig+0x7c4>)
 8006d7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d7e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006d80:	f7fb fd60 	bl	8002844 <HAL_GetTick>
 8006d84:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d86:	e008      	b.n	8006d9a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d88:	f7fb fd5c 	bl	8002844 <HAL_GetTick>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	1ad3      	subs	r3, r2, r3
 8006d92:	2b02      	cmp	r3, #2
 8006d94:	d901      	bls.n	8006d9a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8006d96:	2303      	movs	r3, #3
 8006d98:	e062      	b.n	8006e60 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d9a:	4b33      	ldr	r3, [pc, #204]	; (8006e68 <HAL_RCC_OscConfig+0x7c4>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d0f0      	beq.n	8006d88 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006da6:	e05a      	b.n	8006e5e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	e059      	b.n	8006e60 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006dac:	4b2e      	ldr	r3, [pc, #184]	; (8006e68 <HAL_RCC_OscConfig+0x7c4>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d152      	bne.n	8006e5e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006db8:	4b2b      	ldr	r3, [pc, #172]	; (8006e68 <HAL_RCC_OscConfig+0x7c4>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a2a      	ldr	r2, [pc, #168]	; (8006e68 <HAL_RCC_OscConfig+0x7c4>)
 8006dbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006dc2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006dc4:	4b28      	ldr	r3, [pc, #160]	; (8006e68 <HAL_RCC_OscConfig+0x7c4>)
 8006dc6:	68db      	ldr	r3, [r3, #12]
 8006dc8:	4a27      	ldr	r2, [pc, #156]	; (8006e68 <HAL_RCC_OscConfig+0x7c4>)
 8006dca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006dce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006dd0:	f7fb fd38 	bl	8002844 <HAL_GetTick>
 8006dd4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006dd6:	e008      	b.n	8006dea <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dd8:	f7fb fd34 	bl	8002844 <HAL_GetTick>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	1ad3      	subs	r3, r2, r3
 8006de2:	2b02      	cmp	r3, #2
 8006de4:	d901      	bls.n	8006dea <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8006de6:	2303      	movs	r3, #3
 8006de8:	e03a      	b.n	8006e60 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006dea:	4b1f      	ldr	r3, [pc, #124]	; (8006e68 <HAL_RCC_OscConfig+0x7c4>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d0f0      	beq.n	8006dd8 <HAL_RCC_OscConfig+0x734>
 8006df6:	e032      	b.n	8006e5e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006df8:	69bb      	ldr	r3, [r7, #24]
 8006dfa:	2b0c      	cmp	r3, #12
 8006dfc:	d02d      	beq.n	8006e5a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dfe:	4b1a      	ldr	r3, [pc, #104]	; (8006e68 <HAL_RCC_OscConfig+0x7c4>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a19      	ldr	r2, [pc, #100]	; (8006e68 <HAL_RCC_OscConfig+0x7c4>)
 8006e04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e08:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8006e0a:	4b17      	ldr	r3, [pc, #92]	; (8006e68 <HAL_RCC_OscConfig+0x7c4>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d105      	bne.n	8006e22 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006e16:	4b14      	ldr	r3, [pc, #80]	; (8006e68 <HAL_RCC_OscConfig+0x7c4>)
 8006e18:	68db      	ldr	r3, [r3, #12]
 8006e1a:	4a13      	ldr	r2, [pc, #76]	; (8006e68 <HAL_RCC_OscConfig+0x7c4>)
 8006e1c:	f023 0303 	bic.w	r3, r3, #3
 8006e20:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006e22:	4b11      	ldr	r3, [pc, #68]	; (8006e68 <HAL_RCC_OscConfig+0x7c4>)
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	4a10      	ldr	r2, [pc, #64]	; (8006e68 <HAL_RCC_OscConfig+0x7c4>)
 8006e28:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006e2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e30:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e32:	f7fb fd07 	bl	8002844 <HAL_GetTick>
 8006e36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e38:	e008      	b.n	8006e4c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e3a:	f7fb fd03 	bl	8002844 <HAL_GetTick>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	1ad3      	subs	r3, r2, r3
 8006e44:	2b02      	cmp	r3, #2
 8006e46:	d901      	bls.n	8006e4c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8006e48:	2303      	movs	r3, #3
 8006e4a:	e009      	b.n	8006e60 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e4c:	4b06      	ldr	r3, [pc, #24]	; (8006e68 <HAL_RCC_OscConfig+0x7c4>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d1f0      	bne.n	8006e3a <HAL_RCC_OscConfig+0x796>
 8006e58:	e001      	b.n	8006e5e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e000      	b.n	8006e60 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3720      	adds	r7, #32
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	40021000 	.word	0x40021000
 8006e6c:	f99d808c 	.word	0xf99d808c

08006e70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d101      	bne.n	8006e84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	e0c8      	b.n	8007016 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006e84:	4b66      	ldr	r3, [pc, #408]	; (8007020 <HAL_RCC_ClockConfig+0x1b0>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 0307 	and.w	r3, r3, #7
 8006e8c:	683a      	ldr	r2, [r7, #0]
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d910      	bls.n	8006eb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e92:	4b63      	ldr	r3, [pc, #396]	; (8007020 <HAL_RCC_ClockConfig+0x1b0>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f023 0207 	bic.w	r2, r3, #7
 8006e9a:	4961      	ldr	r1, [pc, #388]	; (8007020 <HAL_RCC_ClockConfig+0x1b0>)
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ea2:	4b5f      	ldr	r3, [pc, #380]	; (8007020 <HAL_RCC_ClockConfig+0x1b0>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f003 0307 	and.w	r3, r3, #7
 8006eaa:	683a      	ldr	r2, [r7, #0]
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d001      	beq.n	8006eb4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e0b0      	b.n	8007016 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 0301 	and.w	r3, r3, #1
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d04c      	beq.n	8006f5a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	2b03      	cmp	r3, #3
 8006ec6:	d107      	bne.n	8006ed8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ec8:	4b56      	ldr	r3, [pc, #344]	; (8007024 <HAL_RCC_ClockConfig+0x1b4>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d121      	bne.n	8006f18 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e09e      	b.n	8007016 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	2b02      	cmp	r3, #2
 8006ede:	d107      	bne.n	8006ef0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ee0:	4b50      	ldr	r3, [pc, #320]	; (8007024 <HAL_RCC_ClockConfig+0x1b4>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d115      	bne.n	8006f18 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	e092      	b.n	8007016 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d107      	bne.n	8006f08 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006ef8:	4b4a      	ldr	r3, [pc, #296]	; (8007024 <HAL_RCC_ClockConfig+0x1b4>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 0302 	and.w	r3, r3, #2
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d109      	bne.n	8006f18 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	e086      	b.n	8007016 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006f08:	4b46      	ldr	r3, [pc, #280]	; (8007024 <HAL_RCC_ClockConfig+0x1b4>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d101      	bne.n	8006f18 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006f14:	2301      	movs	r3, #1
 8006f16:	e07e      	b.n	8007016 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006f18:	4b42      	ldr	r3, [pc, #264]	; (8007024 <HAL_RCC_ClockConfig+0x1b4>)
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	f023 0203 	bic.w	r2, r3, #3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	493f      	ldr	r1, [pc, #252]	; (8007024 <HAL_RCC_ClockConfig+0x1b4>)
 8006f26:	4313      	orrs	r3, r2
 8006f28:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f2a:	f7fb fc8b 	bl	8002844 <HAL_GetTick>
 8006f2e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f30:	e00a      	b.n	8006f48 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f32:	f7fb fc87 	bl	8002844 <HAL_GetTick>
 8006f36:	4602      	mov	r2, r0
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	1ad3      	subs	r3, r2, r3
 8006f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d901      	bls.n	8006f48 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8006f44:	2303      	movs	r3, #3
 8006f46:	e066      	b.n	8007016 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f48:	4b36      	ldr	r3, [pc, #216]	; (8007024 <HAL_RCC_ClockConfig+0x1b4>)
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	f003 020c 	and.w	r2, r3, #12
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d1eb      	bne.n	8006f32 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f003 0302 	and.w	r3, r3, #2
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d008      	beq.n	8006f78 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f66:	4b2f      	ldr	r3, [pc, #188]	; (8007024 <HAL_RCC_ClockConfig+0x1b4>)
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	492c      	ldr	r1, [pc, #176]	; (8007024 <HAL_RCC_ClockConfig+0x1b4>)
 8006f74:	4313      	orrs	r3, r2
 8006f76:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f78:	4b29      	ldr	r3, [pc, #164]	; (8007020 <HAL_RCC_ClockConfig+0x1b0>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 0307 	and.w	r3, r3, #7
 8006f80:	683a      	ldr	r2, [r7, #0]
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d210      	bcs.n	8006fa8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f86:	4b26      	ldr	r3, [pc, #152]	; (8007020 <HAL_RCC_ClockConfig+0x1b0>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f023 0207 	bic.w	r2, r3, #7
 8006f8e:	4924      	ldr	r1, [pc, #144]	; (8007020 <HAL_RCC_ClockConfig+0x1b0>)
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	4313      	orrs	r3, r2
 8006f94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f96:	4b22      	ldr	r3, [pc, #136]	; (8007020 <HAL_RCC_ClockConfig+0x1b0>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f003 0307 	and.w	r3, r3, #7
 8006f9e:	683a      	ldr	r2, [r7, #0]
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d001      	beq.n	8006fa8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e036      	b.n	8007016 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f003 0304 	and.w	r3, r3, #4
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d008      	beq.n	8006fc6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006fb4:	4b1b      	ldr	r3, [pc, #108]	; (8007024 <HAL_RCC_ClockConfig+0x1b4>)
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	4918      	ldr	r1, [pc, #96]	; (8007024 <HAL_RCC_ClockConfig+0x1b4>)
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f003 0308 	and.w	r3, r3, #8
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d009      	beq.n	8006fe6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006fd2:	4b14      	ldr	r3, [pc, #80]	; (8007024 <HAL_RCC_ClockConfig+0x1b4>)
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	691b      	ldr	r3, [r3, #16]
 8006fde:	00db      	lsls	r3, r3, #3
 8006fe0:	4910      	ldr	r1, [pc, #64]	; (8007024 <HAL_RCC_ClockConfig+0x1b4>)
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006fe6:	f000 f825 	bl	8007034 <HAL_RCC_GetSysClockFreq>
 8006fea:	4602      	mov	r2, r0
 8006fec:	4b0d      	ldr	r3, [pc, #52]	; (8007024 <HAL_RCC_ClockConfig+0x1b4>)
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	091b      	lsrs	r3, r3, #4
 8006ff2:	f003 030f 	and.w	r3, r3, #15
 8006ff6:	490c      	ldr	r1, [pc, #48]	; (8007028 <HAL_RCC_ClockConfig+0x1b8>)
 8006ff8:	5ccb      	ldrb	r3, [r1, r3]
 8006ffa:	f003 031f 	and.w	r3, r3, #31
 8006ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8007002:	4a0a      	ldr	r2, [pc, #40]	; (800702c <HAL_RCC_ClockConfig+0x1bc>)
 8007004:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007006:	4b0a      	ldr	r3, [pc, #40]	; (8007030 <HAL_RCC_ClockConfig+0x1c0>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4618      	mov	r0, r3
 800700c:	f7fb fbca 	bl	80027a4 <HAL_InitTick>
 8007010:	4603      	mov	r3, r0
 8007012:	72fb      	strb	r3, [r7, #11]

  return status;
 8007014:	7afb      	ldrb	r3, [r7, #11]
}
 8007016:	4618      	mov	r0, r3
 8007018:	3710      	adds	r7, #16
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop
 8007020:	40022000 	.word	0x40022000
 8007024:	40021000 	.word	0x40021000
 8007028:	0800c010 	.word	0x0800c010
 800702c:	20000008 	.word	0x20000008
 8007030:	2000000c 	.word	0x2000000c

08007034 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007034:	b480      	push	{r7}
 8007036:	b089      	sub	sp, #36	; 0x24
 8007038:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800703a:	2300      	movs	r3, #0
 800703c:	61fb      	str	r3, [r7, #28]
 800703e:	2300      	movs	r3, #0
 8007040:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007042:	4b3e      	ldr	r3, [pc, #248]	; (800713c <HAL_RCC_GetSysClockFreq+0x108>)
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	f003 030c 	and.w	r3, r3, #12
 800704a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800704c:	4b3b      	ldr	r3, [pc, #236]	; (800713c <HAL_RCC_GetSysClockFreq+0x108>)
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	f003 0303 	and.w	r3, r3, #3
 8007054:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d005      	beq.n	8007068 <HAL_RCC_GetSysClockFreq+0x34>
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	2b0c      	cmp	r3, #12
 8007060:	d121      	bne.n	80070a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2b01      	cmp	r3, #1
 8007066:	d11e      	bne.n	80070a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007068:	4b34      	ldr	r3, [pc, #208]	; (800713c <HAL_RCC_GetSysClockFreq+0x108>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 0308 	and.w	r3, r3, #8
 8007070:	2b00      	cmp	r3, #0
 8007072:	d107      	bne.n	8007084 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007074:	4b31      	ldr	r3, [pc, #196]	; (800713c <HAL_RCC_GetSysClockFreq+0x108>)
 8007076:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800707a:	0a1b      	lsrs	r3, r3, #8
 800707c:	f003 030f 	and.w	r3, r3, #15
 8007080:	61fb      	str	r3, [r7, #28]
 8007082:	e005      	b.n	8007090 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007084:	4b2d      	ldr	r3, [pc, #180]	; (800713c <HAL_RCC_GetSysClockFreq+0x108>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	091b      	lsrs	r3, r3, #4
 800708a:	f003 030f 	and.w	r3, r3, #15
 800708e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007090:	4a2b      	ldr	r2, [pc, #172]	; (8007140 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007098:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d10d      	bne.n	80070bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80070a0:	69fb      	ldr	r3, [r7, #28]
 80070a2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80070a4:	e00a      	b.n	80070bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	2b04      	cmp	r3, #4
 80070aa:	d102      	bne.n	80070b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80070ac:	4b25      	ldr	r3, [pc, #148]	; (8007144 <HAL_RCC_GetSysClockFreq+0x110>)
 80070ae:	61bb      	str	r3, [r7, #24]
 80070b0:	e004      	b.n	80070bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	2b08      	cmp	r3, #8
 80070b6:	d101      	bne.n	80070bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80070b8:	4b23      	ldr	r3, [pc, #140]	; (8007148 <HAL_RCC_GetSysClockFreq+0x114>)
 80070ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	2b0c      	cmp	r3, #12
 80070c0:	d134      	bne.n	800712c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80070c2:	4b1e      	ldr	r3, [pc, #120]	; (800713c <HAL_RCC_GetSysClockFreq+0x108>)
 80070c4:	68db      	ldr	r3, [r3, #12]
 80070c6:	f003 0303 	and.w	r3, r3, #3
 80070ca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	2b02      	cmp	r3, #2
 80070d0:	d003      	beq.n	80070da <HAL_RCC_GetSysClockFreq+0xa6>
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	2b03      	cmp	r3, #3
 80070d6:	d003      	beq.n	80070e0 <HAL_RCC_GetSysClockFreq+0xac>
 80070d8:	e005      	b.n	80070e6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80070da:	4b1a      	ldr	r3, [pc, #104]	; (8007144 <HAL_RCC_GetSysClockFreq+0x110>)
 80070dc:	617b      	str	r3, [r7, #20]
      break;
 80070de:	e005      	b.n	80070ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80070e0:	4b19      	ldr	r3, [pc, #100]	; (8007148 <HAL_RCC_GetSysClockFreq+0x114>)
 80070e2:	617b      	str	r3, [r7, #20]
      break;
 80070e4:	e002      	b.n	80070ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	617b      	str	r3, [r7, #20]
      break;
 80070ea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80070ec:	4b13      	ldr	r3, [pc, #76]	; (800713c <HAL_RCC_GetSysClockFreq+0x108>)
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	091b      	lsrs	r3, r3, #4
 80070f2:	f003 0307 	and.w	r3, r3, #7
 80070f6:	3301      	adds	r3, #1
 80070f8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80070fa:	4b10      	ldr	r3, [pc, #64]	; (800713c <HAL_RCC_GetSysClockFreq+0x108>)
 80070fc:	68db      	ldr	r3, [r3, #12]
 80070fe:	0a1b      	lsrs	r3, r3, #8
 8007100:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007104:	697a      	ldr	r2, [r7, #20]
 8007106:	fb02 f203 	mul.w	r2, r2, r3
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007110:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007112:	4b0a      	ldr	r3, [pc, #40]	; (800713c <HAL_RCC_GetSysClockFreq+0x108>)
 8007114:	68db      	ldr	r3, [r3, #12]
 8007116:	0e5b      	lsrs	r3, r3, #25
 8007118:	f003 0303 	and.w	r3, r3, #3
 800711c:	3301      	adds	r3, #1
 800711e:	005b      	lsls	r3, r3, #1
 8007120:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007122:	697a      	ldr	r2, [r7, #20]
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	fbb2 f3f3 	udiv	r3, r2, r3
 800712a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800712c:	69bb      	ldr	r3, [r7, #24]
}
 800712e:	4618      	mov	r0, r3
 8007130:	3724      	adds	r7, #36	; 0x24
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr
 800713a:	bf00      	nop
 800713c:	40021000 	.word	0x40021000
 8007140:	0800c028 	.word	0x0800c028
 8007144:	00f42400 	.word	0x00f42400
 8007148:	007a1200 	.word	0x007a1200

0800714c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800714c:	b480      	push	{r7}
 800714e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007150:	4b03      	ldr	r3, [pc, #12]	; (8007160 <HAL_RCC_GetHCLKFreq+0x14>)
 8007152:	681b      	ldr	r3, [r3, #0]
}
 8007154:	4618      	mov	r0, r3
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr
 800715e:	bf00      	nop
 8007160:	20000008 	.word	0x20000008

08007164 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007168:	f7ff fff0 	bl	800714c <HAL_RCC_GetHCLKFreq>
 800716c:	4602      	mov	r2, r0
 800716e:	4b06      	ldr	r3, [pc, #24]	; (8007188 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	0a1b      	lsrs	r3, r3, #8
 8007174:	f003 0307 	and.w	r3, r3, #7
 8007178:	4904      	ldr	r1, [pc, #16]	; (800718c <HAL_RCC_GetPCLK1Freq+0x28>)
 800717a:	5ccb      	ldrb	r3, [r1, r3]
 800717c:	f003 031f 	and.w	r3, r3, #31
 8007180:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007184:	4618      	mov	r0, r3
 8007186:	bd80      	pop	{r7, pc}
 8007188:	40021000 	.word	0x40021000
 800718c:	0800c020 	.word	0x0800c020

08007190 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007194:	f7ff ffda 	bl	800714c <HAL_RCC_GetHCLKFreq>
 8007198:	4602      	mov	r2, r0
 800719a:	4b06      	ldr	r3, [pc, #24]	; (80071b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	0adb      	lsrs	r3, r3, #11
 80071a0:	f003 0307 	and.w	r3, r3, #7
 80071a4:	4904      	ldr	r1, [pc, #16]	; (80071b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80071a6:	5ccb      	ldrb	r3, [r1, r3]
 80071a8:	f003 031f 	and.w	r3, r3, #31
 80071ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	40021000 	.word	0x40021000
 80071b8:	0800c020 	.word	0x0800c020

080071bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b086      	sub	sp, #24
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80071c4:	2300      	movs	r3, #0
 80071c6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80071c8:	4b2a      	ldr	r3, [pc, #168]	; (8007274 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80071ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d003      	beq.n	80071dc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80071d4:	f7ff fa02 	bl	80065dc <HAL_PWREx_GetVoltageRange>
 80071d8:	6178      	str	r0, [r7, #20]
 80071da:	e014      	b.n	8007206 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80071dc:	4b25      	ldr	r3, [pc, #148]	; (8007274 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80071de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071e0:	4a24      	ldr	r2, [pc, #144]	; (8007274 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80071e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071e6:	6593      	str	r3, [r2, #88]	; 0x58
 80071e8:	4b22      	ldr	r3, [pc, #136]	; (8007274 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80071ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071f0:	60fb      	str	r3, [r7, #12]
 80071f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80071f4:	f7ff f9f2 	bl	80065dc <HAL_PWREx_GetVoltageRange>
 80071f8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80071fa:	4b1e      	ldr	r3, [pc, #120]	; (8007274 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80071fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071fe:	4a1d      	ldr	r2, [pc, #116]	; (8007274 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007200:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007204:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800720c:	d10b      	bne.n	8007226 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2b80      	cmp	r3, #128	; 0x80
 8007212:	d919      	bls.n	8007248 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2ba0      	cmp	r3, #160	; 0xa0
 8007218:	d902      	bls.n	8007220 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800721a:	2302      	movs	r3, #2
 800721c:	613b      	str	r3, [r7, #16]
 800721e:	e013      	b.n	8007248 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007220:	2301      	movs	r3, #1
 8007222:	613b      	str	r3, [r7, #16]
 8007224:	e010      	b.n	8007248 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2b80      	cmp	r3, #128	; 0x80
 800722a:	d902      	bls.n	8007232 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800722c:	2303      	movs	r3, #3
 800722e:	613b      	str	r3, [r7, #16]
 8007230:	e00a      	b.n	8007248 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2b80      	cmp	r3, #128	; 0x80
 8007236:	d102      	bne.n	800723e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007238:	2302      	movs	r3, #2
 800723a:	613b      	str	r3, [r7, #16]
 800723c:	e004      	b.n	8007248 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2b70      	cmp	r3, #112	; 0x70
 8007242:	d101      	bne.n	8007248 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007244:	2301      	movs	r3, #1
 8007246:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007248:	4b0b      	ldr	r3, [pc, #44]	; (8007278 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f023 0207 	bic.w	r2, r3, #7
 8007250:	4909      	ldr	r1, [pc, #36]	; (8007278 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	4313      	orrs	r3, r2
 8007256:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007258:	4b07      	ldr	r3, [pc, #28]	; (8007278 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f003 0307 	and.w	r3, r3, #7
 8007260:	693a      	ldr	r2, [r7, #16]
 8007262:	429a      	cmp	r2, r3
 8007264:	d001      	beq.n	800726a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	e000      	b.n	800726c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800726a:	2300      	movs	r3, #0
}
 800726c:	4618      	mov	r0, r3
 800726e:	3718      	adds	r7, #24
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}
 8007274:	40021000 	.word	0x40021000
 8007278:	40022000 	.word	0x40022000

0800727c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b086      	sub	sp, #24
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007284:	2300      	movs	r3, #0
 8007286:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007288:	2300      	movs	r3, #0
 800728a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007294:	2b00      	cmp	r3, #0
 8007296:	d041      	beq.n	800731c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800729c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80072a0:	d02a      	beq.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80072a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80072a6:	d824      	bhi.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80072a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80072ac:	d008      	beq.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80072ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80072b2:	d81e      	bhi.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d00a      	beq.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x52>
 80072b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072bc:	d010      	beq.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80072be:	e018      	b.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80072c0:	4b86      	ldr	r3, [pc, #536]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80072c2:	68db      	ldr	r3, [r3, #12]
 80072c4:	4a85      	ldr	r2, [pc, #532]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80072c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072ca:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80072cc:	e015      	b.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	3304      	adds	r3, #4
 80072d2:	2100      	movs	r1, #0
 80072d4:	4618      	mov	r0, r3
 80072d6:	f000 fabb 	bl	8007850 <RCCEx_PLLSAI1_Config>
 80072da:	4603      	mov	r3, r0
 80072dc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80072de:	e00c      	b.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	3320      	adds	r3, #32
 80072e4:	2100      	movs	r1, #0
 80072e6:	4618      	mov	r0, r3
 80072e8:	f000 fba6 	bl	8007a38 <RCCEx_PLLSAI2_Config>
 80072ec:	4603      	mov	r3, r0
 80072ee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80072f0:	e003      	b.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	74fb      	strb	r3, [r7, #19]
      break;
 80072f6:	e000      	b.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80072f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072fa:	7cfb      	ldrb	r3, [r7, #19]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d10b      	bne.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007300:	4b76      	ldr	r3, [pc, #472]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007306:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800730e:	4973      	ldr	r1, [pc, #460]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007310:	4313      	orrs	r3, r2
 8007312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007316:	e001      	b.n	800731c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007318:	7cfb      	ldrb	r3, [r7, #19]
 800731a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007324:	2b00      	cmp	r3, #0
 8007326:	d041      	beq.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800732c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007330:	d02a      	beq.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8007332:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007336:	d824      	bhi.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007338:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800733c:	d008      	beq.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800733e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007342:	d81e      	bhi.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007344:	2b00      	cmp	r3, #0
 8007346:	d00a      	beq.n	800735e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8007348:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800734c:	d010      	beq.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800734e:	e018      	b.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007350:	4b62      	ldr	r3, [pc, #392]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007352:	68db      	ldr	r3, [r3, #12]
 8007354:	4a61      	ldr	r2, [pc, #388]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007356:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800735a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800735c:	e015      	b.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	3304      	adds	r3, #4
 8007362:	2100      	movs	r1, #0
 8007364:	4618      	mov	r0, r3
 8007366:	f000 fa73 	bl	8007850 <RCCEx_PLLSAI1_Config>
 800736a:	4603      	mov	r3, r0
 800736c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800736e:	e00c      	b.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	3320      	adds	r3, #32
 8007374:	2100      	movs	r1, #0
 8007376:	4618      	mov	r0, r3
 8007378:	f000 fb5e 	bl	8007a38 <RCCEx_PLLSAI2_Config>
 800737c:	4603      	mov	r3, r0
 800737e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007380:	e003      	b.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	74fb      	strb	r3, [r7, #19]
      break;
 8007386:	e000      	b.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8007388:	bf00      	nop
    }

    if(ret == HAL_OK)
 800738a:	7cfb      	ldrb	r3, [r7, #19]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d10b      	bne.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007390:	4b52      	ldr	r3, [pc, #328]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007396:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800739e:	494f      	ldr	r1, [pc, #316]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80073a0:	4313      	orrs	r3, r2
 80073a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80073a6:	e001      	b.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073a8:	7cfb      	ldrb	r3, [r7, #19]
 80073aa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	f000 80a0 	beq.w	80074fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80073ba:	2300      	movs	r3, #0
 80073bc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80073be:	4b47      	ldr	r3, [pc, #284]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80073c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d101      	bne.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x152>
 80073ca:	2301      	movs	r3, #1
 80073cc:	e000      	b.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80073ce:	2300      	movs	r3, #0
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d00d      	beq.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80073d4:	4b41      	ldr	r3, [pc, #260]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80073d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073d8:	4a40      	ldr	r2, [pc, #256]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80073da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073de:	6593      	str	r3, [r2, #88]	; 0x58
 80073e0:	4b3e      	ldr	r3, [pc, #248]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80073e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073e8:	60bb      	str	r3, [r7, #8]
 80073ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80073ec:	2301      	movs	r3, #1
 80073ee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80073f0:	4b3b      	ldr	r3, [pc, #236]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a3a      	ldr	r2, [pc, #232]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80073f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80073fc:	f7fb fa22 	bl	8002844 <HAL_GetTick>
 8007400:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007402:	e009      	b.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007404:	f7fb fa1e 	bl	8002844 <HAL_GetTick>
 8007408:	4602      	mov	r2, r0
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	1ad3      	subs	r3, r2, r3
 800740e:	2b02      	cmp	r3, #2
 8007410:	d902      	bls.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8007412:	2303      	movs	r3, #3
 8007414:	74fb      	strb	r3, [r7, #19]
        break;
 8007416:	e005      	b.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007418:	4b31      	ldr	r3, [pc, #196]	; (80074e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007420:	2b00      	cmp	r3, #0
 8007422:	d0ef      	beq.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8007424:	7cfb      	ldrb	r3, [r7, #19]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d15c      	bne.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800742a:	4b2c      	ldr	r3, [pc, #176]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800742c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007430:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007434:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d01f      	beq.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007442:	697a      	ldr	r2, [r7, #20]
 8007444:	429a      	cmp	r2, r3
 8007446:	d019      	beq.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007448:	4b24      	ldr	r3, [pc, #144]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800744a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800744e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007452:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007454:	4b21      	ldr	r3, [pc, #132]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800745a:	4a20      	ldr	r2, [pc, #128]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800745c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007460:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007464:	4b1d      	ldr	r3, [pc, #116]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800746a:	4a1c      	ldr	r2, [pc, #112]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800746c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007470:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007474:	4a19      	ldr	r2, [pc, #100]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	f003 0301 	and.w	r3, r3, #1
 8007482:	2b00      	cmp	r3, #0
 8007484:	d016      	beq.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007486:	f7fb f9dd 	bl	8002844 <HAL_GetTick>
 800748a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800748c:	e00b      	b.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800748e:	f7fb f9d9 	bl	8002844 <HAL_GetTick>
 8007492:	4602      	mov	r2, r0
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	1ad3      	subs	r3, r2, r3
 8007498:	f241 3288 	movw	r2, #5000	; 0x1388
 800749c:	4293      	cmp	r3, r2
 800749e:	d902      	bls.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80074a0:	2303      	movs	r3, #3
 80074a2:	74fb      	strb	r3, [r7, #19]
            break;
 80074a4:	e006      	b.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80074a6:	4b0d      	ldr	r3, [pc, #52]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80074a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074ac:	f003 0302 	and.w	r3, r3, #2
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d0ec      	beq.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80074b4:	7cfb      	ldrb	r3, [r7, #19]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d10c      	bne.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80074ba:	4b08      	ldr	r3, [pc, #32]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80074bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074ca:	4904      	ldr	r1, [pc, #16]	; (80074dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80074cc:	4313      	orrs	r3, r2
 80074ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80074d2:	e009      	b.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80074d4:	7cfb      	ldrb	r3, [r7, #19]
 80074d6:	74bb      	strb	r3, [r7, #18]
 80074d8:	e006      	b.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80074da:	bf00      	nop
 80074dc:	40021000 	.word	0x40021000
 80074e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074e4:	7cfb      	ldrb	r3, [r7, #19]
 80074e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80074e8:	7c7b      	ldrb	r3, [r7, #17]
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d105      	bne.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074ee:	4b9e      	ldr	r3, [pc, #632]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074f2:	4a9d      	ldr	r2, [pc, #628]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f003 0301 	and.w	r3, r3, #1
 8007502:	2b00      	cmp	r3, #0
 8007504:	d00a      	beq.n	800751c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007506:	4b98      	ldr	r3, [pc, #608]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800750c:	f023 0203 	bic.w	r2, r3, #3
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007514:	4994      	ldr	r1, [pc, #592]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007516:	4313      	orrs	r3, r2
 8007518:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f003 0302 	and.w	r3, r3, #2
 8007524:	2b00      	cmp	r3, #0
 8007526:	d00a      	beq.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007528:	4b8f      	ldr	r3, [pc, #572]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800752a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800752e:	f023 020c 	bic.w	r2, r3, #12
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007536:	498c      	ldr	r1, [pc, #560]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007538:	4313      	orrs	r3, r2
 800753a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f003 0304 	and.w	r3, r3, #4
 8007546:	2b00      	cmp	r3, #0
 8007548:	d00a      	beq.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800754a:	4b87      	ldr	r3, [pc, #540]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800754c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007550:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007558:	4983      	ldr	r1, [pc, #524]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800755a:	4313      	orrs	r3, r2
 800755c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f003 0308 	and.w	r3, r3, #8
 8007568:	2b00      	cmp	r3, #0
 800756a:	d00a      	beq.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800756c:	4b7e      	ldr	r3, [pc, #504]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800756e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007572:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800757a:	497b      	ldr	r1, [pc, #492]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800757c:	4313      	orrs	r3, r2
 800757e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f003 0310 	and.w	r3, r3, #16
 800758a:	2b00      	cmp	r3, #0
 800758c:	d00a      	beq.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800758e:	4b76      	ldr	r3, [pc, #472]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007594:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800759c:	4972      	ldr	r1, [pc, #456]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800759e:	4313      	orrs	r3, r2
 80075a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f003 0320 	and.w	r3, r3, #32
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d00a      	beq.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80075b0:	4b6d      	ldr	r3, [pc, #436]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80075b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075be:	496a      	ldr	r1, [pc, #424]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80075c0:	4313      	orrs	r3, r2
 80075c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d00a      	beq.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80075d2:	4b65      	ldr	r3, [pc, #404]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80075d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075e0:	4961      	ldr	r1, [pc, #388]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80075e2:	4313      	orrs	r3, r2
 80075e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d00a      	beq.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80075f4:	4b5c      	ldr	r3, [pc, #368]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80075f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007602:	4959      	ldr	r1, [pc, #356]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007604:	4313      	orrs	r3, r2
 8007606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007612:	2b00      	cmp	r3, #0
 8007614:	d00a      	beq.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007616:	4b54      	ldr	r3, [pc, #336]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800761c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007624:	4950      	ldr	r1, [pc, #320]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007626:	4313      	orrs	r3, r2
 8007628:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007634:	2b00      	cmp	r3, #0
 8007636:	d00a      	beq.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007638:	4b4b      	ldr	r3, [pc, #300]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800763a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800763e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007646:	4948      	ldr	r1, [pc, #288]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007648:	4313      	orrs	r3, r2
 800764a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007656:	2b00      	cmp	r3, #0
 8007658:	d00a      	beq.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800765a:	4b43      	ldr	r3, [pc, #268]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800765c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007660:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007668:	493f      	ldr	r1, [pc, #252]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800766a:	4313      	orrs	r3, r2
 800766c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007678:	2b00      	cmp	r3, #0
 800767a:	d028      	beq.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800767c:	4b3a      	ldr	r3, [pc, #232]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800767e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007682:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800768a:	4937      	ldr	r1, [pc, #220]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800768c:	4313      	orrs	r3, r2
 800768e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007696:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800769a:	d106      	bne.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800769c:	4b32      	ldr	r3, [pc, #200]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800769e:	68db      	ldr	r3, [r3, #12]
 80076a0:	4a31      	ldr	r2, [pc, #196]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076a6:	60d3      	str	r3, [r2, #12]
 80076a8:	e011      	b.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80076b2:	d10c      	bne.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	3304      	adds	r3, #4
 80076b8:	2101      	movs	r1, #1
 80076ba:	4618      	mov	r0, r3
 80076bc:	f000 f8c8 	bl	8007850 <RCCEx_PLLSAI1_Config>
 80076c0:	4603      	mov	r3, r0
 80076c2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80076c4:	7cfb      	ldrb	r3, [r7, #19]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d001      	beq.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80076ca:	7cfb      	ldrb	r3, [r7, #19]
 80076cc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d028      	beq.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80076da:	4b23      	ldr	r3, [pc, #140]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076e0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076e8:	491f      	ldr	r1, [pc, #124]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076ea:	4313      	orrs	r3, r2
 80076ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076f8:	d106      	bne.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80076fa:	4b1b      	ldr	r3, [pc, #108]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076fc:	68db      	ldr	r3, [r3, #12]
 80076fe:	4a1a      	ldr	r2, [pc, #104]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007700:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007704:	60d3      	str	r3, [r2, #12]
 8007706:	e011      	b.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800770c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007710:	d10c      	bne.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	3304      	adds	r3, #4
 8007716:	2101      	movs	r1, #1
 8007718:	4618      	mov	r0, r3
 800771a:	f000 f899 	bl	8007850 <RCCEx_PLLSAI1_Config>
 800771e:	4603      	mov	r3, r0
 8007720:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007722:	7cfb      	ldrb	r3, [r7, #19]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d001      	beq.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8007728:	7cfb      	ldrb	r3, [r7, #19]
 800772a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007734:	2b00      	cmp	r3, #0
 8007736:	d02b      	beq.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007738:	4b0b      	ldr	r3, [pc, #44]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800773a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800773e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007746:	4908      	ldr	r1, [pc, #32]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007748:	4313      	orrs	r3, r2
 800774a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007752:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007756:	d109      	bne.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007758:	4b03      	ldr	r3, [pc, #12]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800775a:	68db      	ldr	r3, [r3, #12]
 800775c:	4a02      	ldr	r2, [pc, #8]	; (8007768 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800775e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007762:	60d3      	str	r3, [r2, #12]
 8007764:	e014      	b.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8007766:	bf00      	nop
 8007768:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007770:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007774:	d10c      	bne.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	3304      	adds	r3, #4
 800777a:	2101      	movs	r1, #1
 800777c:	4618      	mov	r0, r3
 800777e:	f000 f867 	bl	8007850 <RCCEx_PLLSAI1_Config>
 8007782:	4603      	mov	r3, r0
 8007784:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007786:	7cfb      	ldrb	r3, [r7, #19]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d001      	beq.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800778c:	7cfb      	ldrb	r3, [r7, #19]
 800778e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007798:	2b00      	cmp	r3, #0
 800779a:	d02f      	beq.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800779c:	4b2b      	ldr	r3, [pc, #172]	; (800784c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800779e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077aa:	4928      	ldr	r1, [pc, #160]	; (800784c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80077ac:	4313      	orrs	r3, r2
 80077ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80077ba:	d10d      	bne.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	3304      	adds	r3, #4
 80077c0:	2102      	movs	r1, #2
 80077c2:	4618      	mov	r0, r3
 80077c4:	f000 f844 	bl	8007850 <RCCEx_PLLSAI1_Config>
 80077c8:	4603      	mov	r3, r0
 80077ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80077cc:	7cfb      	ldrb	r3, [r7, #19]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d014      	beq.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80077d2:	7cfb      	ldrb	r3, [r7, #19]
 80077d4:	74bb      	strb	r3, [r7, #18]
 80077d6:	e011      	b.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077e0:	d10c      	bne.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	3320      	adds	r3, #32
 80077e6:	2102      	movs	r1, #2
 80077e8:	4618      	mov	r0, r3
 80077ea:	f000 f925 	bl	8007a38 <RCCEx_PLLSAI2_Config>
 80077ee:	4603      	mov	r3, r0
 80077f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80077f2:	7cfb      	ldrb	r3, [r7, #19]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d001      	beq.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80077f8:	7cfb      	ldrb	r3, [r7, #19]
 80077fa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007804:	2b00      	cmp	r3, #0
 8007806:	d00a      	beq.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007808:	4b10      	ldr	r3, [pc, #64]	; (800784c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800780a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800780e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007816:	490d      	ldr	r1, [pc, #52]	; (800784c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007818:	4313      	orrs	r3, r2
 800781a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007826:	2b00      	cmp	r3, #0
 8007828:	d00b      	beq.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800782a:	4b08      	ldr	r3, [pc, #32]	; (800784c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800782c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007830:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800783a:	4904      	ldr	r1, [pc, #16]	; (800784c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800783c:	4313      	orrs	r3, r2
 800783e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007842:	7cbb      	ldrb	r3, [r7, #18]
}
 8007844:	4618      	mov	r0, r3
 8007846:	3718      	adds	r7, #24
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}
 800784c:	40021000 	.word	0x40021000

08007850 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800785a:	2300      	movs	r3, #0
 800785c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800785e:	4b75      	ldr	r3, [pc, #468]	; (8007a34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	f003 0303 	and.w	r3, r3, #3
 8007866:	2b00      	cmp	r3, #0
 8007868:	d018      	beq.n	800789c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800786a:	4b72      	ldr	r3, [pc, #456]	; (8007a34 <RCCEx_PLLSAI1_Config+0x1e4>)
 800786c:	68db      	ldr	r3, [r3, #12]
 800786e:	f003 0203 	and.w	r2, r3, #3
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	429a      	cmp	r2, r3
 8007878:	d10d      	bne.n	8007896 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
       ||
 800787e:	2b00      	cmp	r3, #0
 8007880:	d009      	beq.n	8007896 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007882:	4b6c      	ldr	r3, [pc, #432]	; (8007a34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007884:	68db      	ldr	r3, [r3, #12]
 8007886:	091b      	lsrs	r3, r3, #4
 8007888:	f003 0307 	and.w	r3, r3, #7
 800788c:	1c5a      	adds	r2, r3, #1
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	685b      	ldr	r3, [r3, #4]
       ||
 8007892:	429a      	cmp	r2, r3
 8007894:	d047      	beq.n	8007926 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007896:	2301      	movs	r3, #1
 8007898:	73fb      	strb	r3, [r7, #15]
 800789a:	e044      	b.n	8007926 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	2b03      	cmp	r3, #3
 80078a2:	d018      	beq.n	80078d6 <RCCEx_PLLSAI1_Config+0x86>
 80078a4:	2b03      	cmp	r3, #3
 80078a6:	d825      	bhi.n	80078f4 <RCCEx_PLLSAI1_Config+0xa4>
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d002      	beq.n	80078b2 <RCCEx_PLLSAI1_Config+0x62>
 80078ac:	2b02      	cmp	r3, #2
 80078ae:	d009      	beq.n	80078c4 <RCCEx_PLLSAI1_Config+0x74>
 80078b0:	e020      	b.n	80078f4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80078b2:	4b60      	ldr	r3, [pc, #384]	; (8007a34 <RCCEx_PLLSAI1_Config+0x1e4>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f003 0302 	and.w	r3, r3, #2
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d11d      	bne.n	80078fa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80078be:	2301      	movs	r3, #1
 80078c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80078c2:	e01a      	b.n	80078fa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80078c4:	4b5b      	ldr	r3, [pc, #364]	; (8007a34 <RCCEx_PLLSAI1_Config+0x1e4>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d116      	bne.n	80078fe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80078d4:	e013      	b.n	80078fe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80078d6:	4b57      	ldr	r3, [pc, #348]	; (8007a34 <RCCEx_PLLSAI1_Config+0x1e4>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d10f      	bne.n	8007902 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80078e2:	4b54      	ldr	r3, [pc, #336]	; (8007a34 <RCCEx_PLLSAI1_Config+0x1e4>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d109      	bne.n	8007902 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80078ee:	2301      	movs	r3, #1
 80078f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80078f2:	e006      	b.n	8007902 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80078f4:	2301      	movs	r3, #1
 80078f6:	73fb      	strb	r3, [r7, #15]
      break;
 80078f8:	e004      	b.n	8007904 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80078fa:	bf00      	nop
 80078fc:	e002      	b.n	8007904 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80078fe:	bf00      	nop
 8007900:	e000      	b.n	8007904 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007902:	bf00      	nop
    }

    if(status == HAL_OK)
 8007904:	7bfb      	ldrb	r3, [r7, #15]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d10d      	bne.n	8007926 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800790a:	4b4a      	ldr	r3, [pc, #296]	; (8007a34 <RCCEx_PLLSAI1_Config+0x1e4>)
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6819      	ldr	r1, [r3, #0]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	3b01      	subs	r3, #1
 800791c:	011b      	lsls	r3, r3, #4
 800791e:	430b      	orrs	r3, r1
 8007920:	4944      	ldr	r1, [pc, #272]	; (8007a34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007922:	4313      	orrs	r3, r2
 8007924:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007926:	7bfb      	ldrb	r3, [r7, #15]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d17d      	bne.n	8007a28 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800792c:	4b41      	ldr	r3, [pc, #260]	; (8007a34 <RCCEx_PLLSAI1_Config+0x1e4>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a40      	ldr	r2, [pc, #256]	; (8007a34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007932:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007936:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007938:	f7fa ff84 	bl	8002844 <HAL_GetTick>
 800793c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800793e:	e009      	b.n	8007954 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007940:	f7fa ff80 	bl	8002844 <HAL_GetTick>
 8007944:	4602      	mov	r2, r0
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	1ad3      	subs	r3, r2, r3
 800794a:	2b02      	cmp	r3, #2
 800794c:	d902      	bls.n	8007954 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800794e:	2303      	movs	r3, #3
 8007950:	73fb      	strb	r3, [r7, #15]
        break;
 8007952:	e005      	b.n	8007960 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007954:	4b37      	ldr	r3, [pc, #220]	; (8007a34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800795c:	2b00      	cmp	r3, #0
 800795e:	d1ef      	bne.n	8007940 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007960:	7bfb      	ldrb	r3, [r7, #15]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d160      	bne.n	8007a28 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d111      	bne.n	8007990 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800796c:	4b31      	ldr	r3, [pc, #196]	; (8007a34 <RCCEx_PLLSAI1_Config+0x1e4>)
 800796e:	691b      	ldr	r3, [r3, #16]
 8007970:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007974:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	6892      	ldr	r2, [r2, #8]
 800797c:	0211      	lsls	r1, r2, #8
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	68d2      	ldr	r2, [r2, #12]
 8007982:	0912      	lsrs	r2, r2, #4
 8007984:	0452      	lsls	r2, r2, #17
 8007986:	430a      	orrs	r2, r1
 8007988:	492a      	ldr	r1, [pc, #168]	; (8007a34 <RCCEx_PLLSAI1_Config+0x1e4>)
 800798a:	4313      	orrs	r3, r2
 800798c:	610b      	str	r3, [r1, #16]
 800798e:	e027      	b.n	80079e0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	2b01      	cmp	r3, #1
 8007994:	d112      	bne.n	80079bc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007996:	4b27      	ldr	r3, [pc, #156]	; (8007a34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800799e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	6892      	ldr	r2, [r2, #8]
 80079a6:	0211      	lsls	r1, r2, #8
 80079a8:	687a      	ldr	r2, [r7, #4]
 80079aa:	6912      	ldr	r2, [r2, #16]
 80079ac:	0852      	lsrs	r2, r2, #1
 80079ae:	3a01      	subs	r2, #1
 80079b0:	0552      	lsls	r2, r2, #21
 80079b2:	430a      	orrs	r2, r1
 80079b4:	491f      	ldr	r1, [pc, #124]	; (8007a34 <RCCEx_PLLSAI1_Config+0x1e4>)
 80079b6:	4313      	orrs	r3, r2
 80079b8:	610b      	str	r3, [r1, #16]
 80079ba:	e011      	b.n	80079e0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80079bc:	4b1d      	ldr	r3, [pc, #116]	; (8007a34 <RCCEx_PLLSAI1_Config+0x1e4>)
 80079be:	691b      	ldr	r3, [r3, #16]
 80079c0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80079c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	6892      	ldr	r2, [r2, #8]
 80079cc:	0211      	lsls	r1, r2, #8
 80079ce:	687a      	ldr	r2, [r7, #4]
 80079d0:	6952      	ldr	r2, [r2, #20]
 80079d2:	0852      	lsrs	r2, r2, #1
 80079d4:	3a01      	subs	r2, #1
 80079d6:	0652      	lsls	r2, r2, #25
 80079d8:	430a      	orrs	r2, r1
 80079da:	4916      	ldr	r1, [pc, #88]	; (8007a34 <RCCEx_PLLSAI1_Config+0x1e4>)
 80079dc:	4313      	orrs	r3, r2
 80079de:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80079e0:	4b14      	ldr	r3, [pc, #80]	; (8007a34 <RCCEx_PLLSAI1_Config+0x1e4>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a13      	ldr	r2, [pc, #76]	; (8007a34 <RCCEx_PLLSAI1_Config+0x1e4>)
 80079e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80079ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079ec:	f7fa ff2a 	bl	8002844 <HAL_GetTick>
 80079f0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80079f2:	e009      	b.n	8007a08 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80079f4:	f7fa ff26 	bl	8002844 <HAL_GetTick>
 80079f8:	4602      	mov	r2, r0
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	1ad3      	subs	r3, r2, r3
 80079fe:	2b02      	cmp	r3, #2
 8007a00:	d902      	bls.n	8007a08 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8007a02:	2303      	movs	r3, #3
 8007a04:	73fb      	strb	r3, [r7, #15]
          break;
 8007a06:	e005      	b.n	8007a14 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007a08:	4b0a      	ldr	r3, [pc, #40]	; (8007a34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d0ef      	beq.n	80079f4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8007a14:	7bfb      	ldrb	r3, [r7, #15]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d106      	bne.n	8007a28 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007a1a:	4b06      	ldr	r3, [pc, #24]	; (8007a34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007a1c:	691a      	ldr	r2, [r3, #16]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	699b      	ldr	r3, [r3, #24]
 8007a22:	4904      	ldr	r1, [pc, #16]	; (8007a34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007a24:	4313      	orrs	r3, r2
 8007a26:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3710      	adds	r7, #16
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}
 8007a32:	bf00      	nop
 8007a34:	40021000 	.word	0x40021000

08007a38 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b084      	sub	sp, #16
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a42:	2300      	movs	r3, #0
 8007a44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007a46:	4b6a      	ldr	r3, [pc, #424]	; (8007bf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007a48:	68db      	ldr	r3, [r3, #12]
 8007a4a:	f003 0303 	and.w	r3, r3, #3
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d018      	beq.n	8007a84 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007a52:	4b67      	ldr	r3, [pc, #412]	; (8007bf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007a54:	68db      	ldr	r3, [r3, #12]
 8007a56:	f003 0203 	and.w	r2, r3, #3
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	d10d      	bne.n	8007a7e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
       ||
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d009      	beq.n	8007a7e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8007a6a:	4b61      	ldr	r3, [pc, #388]	; (8007bf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007a6c:	68db      	ldr	r3, [r3, #12]
 8007a6e:	091b      	lsrs	r3, r3, #4
 8007a70:	f003 0307 	and.w	r3, r3, #7
 8007a74:	1c5a      	adds	r2, r3, #1
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	685b      	ldr	r3, [r3, #4]
       ||
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d047      	beq.n	8007b0e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	73fb      	strb	r3, [r7, #15]
 8007a82:	e044      	b.n	8007b0e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	2b03      	cmp	r3, #3
 8007a8a:	d018      	beq.n	8007abe <RCCEx_PLLSAI2_Config+0x86>
 8007a8c:	2b03      	cmp	r3, #3
 8007a8e:	d825      	bhi.n	8007adc <RCCEx_PLLSAI2_Config+0xa4>
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d002      	beq.n	8007a9a <RCCEx_PLLSAI2_Config+0x62>
 8007a94:	2b02      	cmp	r3, #2
 8007a96:	d009      	beq.n	8007aac <RCCEx_PLLSAI2_Config+0x74>
 8007a98:	e020      	b.n	8007adc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007a9a:	4b55      	ldr	r3, [pc, #340]	; (8007bf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f003 0302 	and.w	r3, r3, #2
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d11d      	bne.n	8007ae2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007aaa:	e01a      	b.n	8007ae2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007aac:	4b50      	ldr	r3, [pc, #320]	; (8007bf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d116      	bne.n	8007ae6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007abc:	e013      	b.n	8007ae6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007abe:	4b4c      	ldr	r3, [pc, #304]	; (8007bf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d10f      	bne.n	8007aea <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007aca:	4b49      	ldr	r3, [pc, #292]	; (8007bf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d109      	bne.n	8007aea <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007ada:	e006      	b.n	8007aea <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007adc:	2301      	movs	r3, #1
 8007ade:	73fb      	strb	r3, [r7, #15]
      break;
 8007ae0:	e004      	b.n	8007aec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007ae2:	bf00      	nop
 8007ae4:	e002      	b.n	8007aec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007ae6:	bf00      	nop
 8007ae8:	e000      	b.n	8007aec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007aea:	bf00      	nop
    }

    if(status == HAL_OK)
 8007aec:	7bfb      	ldrb	r3, [r7, #15]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d10d      	bne.n	8007b0e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007af2:	4b3f      	ldr	r3, [pc, #252]	; (8007bf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007af4:	68db      	ldr	r3, [r3, #12]
 8007af6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6819      	ldr	r1, [r3, #0]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	3b01      	subs	r3, #1
 8007b04:	011b      	lsls	r3, r3, #4
 8007b06:	430b      	orrs	r3, r1
 8007b08:	4939      	ldr	r1, [pc, #228]	; (8007bf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007b0e:	7bfb      	ldrb	r3, [r7, #15]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d167      	bne.n	8007be4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007b14:	4b36      	ldr	r3, [pc, #216]	; (8007bf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a35      	ldr	r2, [pc, #212]	; (8007bf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007b1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b20:	f7fa fe90 	bl	8002844 <HAL_GetTick>
 8007b24:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007b26:	e009      	b.n	8007b3c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007b28:	f7fa fe8c 	bl	8002844 <HAL_GetTick>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	1ad3      	subs	r3, r2, r3
 8007b32:	2b02      	cmp	r3, #2
 8007b34:	d902      	bls.n	8007b3c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007b36:	2303      	movs	r3, #3
 8007b38:	73fb      	strb	r3, [r7, #15]
        break;
 8007b3a:	e005      	b.n	8007b48 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007b3c:	4b2c      	ldr	r3, [pc, #176]	; (8007bf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d1ef      	bne.n	8007b28 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007b48:	7bfb      	ldrb	r3, [r7, #15]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d14a      	bne.n	8007be4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d111      	bne.n	8007b78 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007b54:	4b26      	ldr	r3, [pc, #152]	; (8007bf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007b56:	695b      	ldr	r3, [r3, #20]
 8007b58:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007b5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	6892      	ldr	r2, [r2, #8]
 8007b64:	0211      	lsls	r1, r2, #8
 8007b66:	687a      	ldr	r2, [r7, #4]
 8007b68:	68d2      	ldr	r2, [r2, #12]
 8007b6a:	0912      	lsrs	r2, r2, #4
 8007b6c:	0452      	lsls	r2, r2, #17
 8007b6e:	430a      	orrs	r2, r1
 8007b70:	491f      	ldr	r1, [pc, #124]	; (8007bf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007b72:	4313      	orrs	r3, r2
 8007b74:	614b      	str	r3, [r1, #20]
 8007b76:	e011      	b.n	8007b9c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007b78:	4b1d      	ldr	r3, [pc, #116]	; (8007bf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007b7a:	695b      	ldr	r3, [r3, #20]
 8007b7c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007b80:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007b84:	687a      	ldr	r2, [r7, #4]
 8007b86:	6892      	ldr	r2, [r2, #8]
 8007b88:	0211      	lsls	r1, r2, #8
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	6912      	ldr	r2, [r2, #16]
 8007b8e:	0852      	lsrs	r2, r2, #1
 8007b90:	3a01      	subs	r2, #1
 8007b92:	0652      	lsls	r2, r2, #25
 8007b94:	430a      	orrs	r2, r1
 8007b96:	4916      	ldr	r1, [pc, #88]	; (8007bf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007b9c:	4b14      	ldr	r3, [pc, #80]	; (8007bf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a13      	ldr	r2, [pc, #76]	; (8007bf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ba6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ba8:	f7fa fe4c 	bl	8002844 <HAL_GetTick>
 8007bac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007bae:	e009      	b.n	8007bc4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007bb0:	f7fa fe48 	bl	8002844 <HAL_GetTick>
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	1ad3      	subs	r3, r2, r3
 8007bba:	2b02      	cmp	r3, #2
 8007bbc:	d902      	bls.n	8007bc4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8007bbe:	2303      	movs	r3, #3
 8007bc0:	73fb      	strb	r3, [r7, #15]
          break;
 8007bc2:	e005      	b.n	8007bd0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007bc4:	4b0a      	ldr	r3, [pc, #40]	; (8007bf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d0ef      	beq.n	8007bb0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8007bd0:	7bfb      	ldrb	r3, [r7, #15]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d106      	bne.n	8007be4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007bd6:	4b06      	ldr	r3, [pc, #24]	; (8007bf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007bd8:	695a      	ldr	r2, [r3, #20]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	695b      	ldr	r3, [r3, #20]
 8007bde:	4904      	ldr	r1, [pc, #16]	; (8007bf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007be0:	4313      	orrs	r3, r2
 8007be2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3710      	adds	r7, #16
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	bf00      	nop
 8007bf0:	40021000 	.word	0x40021000

08007bf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b082      	sub	sp, #8
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d101      	bne.n	8007c06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c02:	2301      	movs	r3, #1
 8007c04:	e049      	b.n	8007c9a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d106      	bne.n	8007c20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f7fa fcc6 	bl	80025ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2202      	movs	r2, #2
 8007c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	3304      	adds	r3, #4
 8007c30:	4619      	mov	r1, r3
 8007c32:	4610      	mov	r0, r2
 8007c34:	f000 f9ee 	bl	8008014 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2201      	movs	r2, #1
 8007c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2201      	movs	r2, #1
 8007c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2201      	movs	r2, #1
 8007c64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2201      	movs	r2, #1
 8007c84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2201      	movs	r2, #1
 8007c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c98:	2300      	movs	r3, #0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3708      	adds	r7, #8
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
	...

08007ca4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b085      	sub	sp, #20
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d001      	beq.n	8007cbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	e04f      	b.n	8007d5c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2202      	movs	r2, #2
 8007cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	68da      	ldr	r2, [r3, #12]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f042 0201 	orr.w	r2, r2, #1
 8007cd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a23      	ldr	r2, [pc, #140]	; (8007d68 <HAL_TIM_Base_Start_IT+0xc4>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d01d      	beq.n	8007d1a <HAL_TIM_Base_Start_IT+0x76>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ce6:	d018      	beq.n	8007d1a <HAL_TIM_Base_Start_IT+0x76>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a1f      	ldr	r2, [pc, #124]	; (8007d6c <HAL_TIM_Base_Start_IT+0xc8>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d013      	beq.n	8007d1a <HAL_TIM_Base_Start_IT+0x76>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a1e      	ldr	r2, [pc, #120]	; (8007d70 <HAL_TIM_Base_Start_IT+0xcc>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d00e      	beq.n	8007d1a <HAL_TIM_Base_Start_IT+0x76>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a1c      	ldr	r2, [pc, #112]	; (8007d74 <HAL_TIM_Base_Start_IT+0xd0>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d009      	beq.n	8007d1a <HAL_TIM_Base_Start_IT+0x76>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a1b      	ldr	r2, [pc, #108]	; (8007d78 <HAL_TIM_Base_Start_IT+0xd4>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d004      	beq.n	8007d1a <HAL_TIM_Base_Start_IT+0x76>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a19      	ldr	r2, [pc, #100]	; (8007d7c <HAL_TIM_Base_Start_IT+0xd8>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d115      	bne.n	8007d46 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	689a      	ldr	r2, [r3, #8]
 8007d20:	4b17      	ldr	r3, [pc, #92]	; (8007d80 <HAL_TIM_Base_Start_IT+0xdc>)
 8007d22:	4013      	ands	r3, r2
 8007d24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2b06      	cmp	r3, #6
 8007d2a:	d015      	beq.n	8007d58 <HAL_TIM_Base_Start_IT+0xb4>
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d32:	d011      	beq.n	8007d58 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f042 0201 	orr.w	r2, r2, #1
 8007d42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d44:	e008      	b.n	8007d58 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f042 0201 	orr.w	r2, r2, #1
 8007d54:	601a      	str	r2, [r3, #0]
 8007d56:	e000      	b.n	8007d5a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d58:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007d5a:	2300      	movs	r3, #0
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3714      	adds	r7, #20
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr
 8007d68:	40012c00 	.word	0x40012c00
 8007d6c:	40000400 	.word	0x40000400
 8007d70:	40000800 	.word	0x40000800
 8007d74:	40000c00 	.word	0x40000c00
 8007d78:	40013400 	.word	0x40013400
 8007d7c:	40014000 	.word	0x40014000
 8007d80:	00010007 	.word	0x00010007

08007d84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b082      	sub	sp, #8
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	691b      	ldr	r3, [r3, #16]
 8007d92:	f003 0302 	and.w	r3, r3, #2
 8007d96:	2b02      	cmp	r3, #2
 8007d98:	d122      	bne.n	8007de0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	f003 0302 	and.w	r3, r3, #2
 8007da4:	2b02      	cmp	r3, #2
 8007da6:	d11b      	bne.n	8007de0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f06f 0202 	mvn.w	r2, #2
 8007db0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2201      	movs	r2, #1
 8007db6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	699b      	ldr	r3, [r3, #24]
 8007dbe:	f003 0303 	and.w	r3, r3, #3
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d003      	beq.n	8007dce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 f905 	bl	8007fd6 <HAL_TIM_IC_CaptureCallback>
 8007dcc:	e005      	b.n	8007dda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 f8f7 	bl	8007fc2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f000 f908 	bl	8007fea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	691b      	ldr	r3, [r3, #16]
 8007de6:	f003 0304 	and.w	r3, r3, #4
 8007dea:	2b04      	cmp	r3, #4
 8007dec:	d122      	bne.n	8007e34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	f003 0304 	and.w	r3, r3, #4
 8007df8:	2b04      	cmp	r3, #4
 8007dfa:	d11b      	bne.n	8007e34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f06f 0204 	mvn.w	r2, #4
 8007e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2202      	movs	r2, #2
 8007e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	699b      	ldr	r3, [r3, #24]
 8007e12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d003      	beq.n	8007e22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f000 f8db 	bl	8007fd6 <HAL_TIM_IC_CaptureCallback>
 8007e20:	e005      	b.n	8007e2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 f8cd 	bl	8007fc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 f8de 	bl	8007fea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	691b      	ldr	r3, [r3, #16]
 8007e3a:	f003 0308 	and.w	r3, r3, #8
 8007e3e:	2b08      	cmp	r3, #8
 8007e40:	d122      	bne.n	8007e88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	f003 0308 	and.w	r3, r3, #8
 8007e4c:	2b08      	cmp	r3, #8
 8007e4e:	d11b      	bne.n	8007e88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f06f 0208 	mvn.w	r2, #8
 8007e58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2204      	movs	r2, #4
 8007e5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	69db      	ldr	r3, [r3, #28]
 8007e66:	f003 0303 	and.w	r3, r3, #3
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d003      	beq.n	8007e76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 f8b1 	bl	8007fd6 <HAL_TIM_IC_CaptureCallback>
 8007e74:	e005      	b.n	8007e82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 f8a3 	bl	8007fc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f000 f8b4 	bl	8007fea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	691b      	ldr	r3, [r3, #16]
 8007e8e:	f003 0310 	and.w	r3, r3, #16
 8007e92:	2b10      	cmp	r3, #16
 8007e94:	d122      	bne.n	8007edc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	68db      	ldr	r3, [r3, #12]
 8007e9c:	f003 0310 	and.w	r3, r3, #16
 8007ea0:	2b10      	cmp	r3, #16
 8007ea2:	d11b      	bne.n	8007edc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f06f 0210 	mvn.w	r2, #16
 8007eac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2208      	movs	r2, #8
 8007eb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	69db      	ldr	r3, [r3, #28]
 8007eba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d003      	beq.n	8007eca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 f887 	bl	8007fd6 <HAL_TIM_IC_CaptureCallback>
 8007ec8:	e005      	b.n	8007ed6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 f879 	bl	8007fc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 f88a 	bl	8007fea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	691b      	ldr	r3, [r3, #16]
 8007ee2:	f003 0301 	and.w	r3, r3, #1
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	d10e      	bne.n	8007f08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	68db      	ldr	r3, [r3, #12]
 8007ef0:	f003 0301 	and.w	r3, r3, #1
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d107      	bne.n	8007f08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f06f 0201 	mvn.w	r2, #1
 8007f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f7fa f966 	bl	80021d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	691b      	ldr	r3, [r3, #16]
 8007f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f12:	2b80      	cmp	r3, #128	; 0x80
 8007f14:	d10e      	bne.n	8007f34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f20:	2b80      	cmp	r3, #128	; 0x80
 8007f22:	d107      	bne.n	8007f34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 f99c 	bl	800826c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	691b      	ldr	r3, [r3, #16]
 8007f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f42:	d10e      	bne.n	8007f62 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	68db      	ldr	r3, [r3, #12]
 8007f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f4e:	2b80      	cmp	r3, #128	; 0x80
 8007f50:	d107      	bne.n	8007f62 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007f5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f000 f98f 	bl	8008280 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	691b      	ldr	r3, [r3, #16]
 8007f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f6c:	2b40      	cmp	r3, #64	; 0x40
 8007f6e:	d10e      	bne.n	8007f8e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	68db      	ldr	r3, [r3, #12]
 8007f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f7a:	2b40      	cmp	r3, #64	; 0x40
 8007f7c:	d107      	bne.n	8007f8e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007f86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 f838 	bl	8007ffe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	691b      	ldr	r3, [r3, #16]
 8007f94:	f003 0320 	and.w	r3, r3, #32
 8007f98:	2b20      	cmp	r3, #32
 8007f9a:	d10e      	bne.n	8007fba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	f003 0320 	and.w	r3, r3, #32
 8007fa6:	2b20      	cmp	r3, #32
 8007fa8:	d107      	bne.n	8007fba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f06f 0220 	mvn.w	r2, #32
 8007fb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 f94f 	bl	8008258 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007fba:	bf00      	nop
 8007fbc:	3708      	adds	r7, #8
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}

08007fc2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007fc2:	b480      	push	{r7}
 8007fc4:	b083      	sub	sp, #12
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007fca:	bf00      	nop
 8007fcc:	370c      	adds	r7, #12
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr

08007fd6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007fd6:	b480      	push	{r7}
 8007fd8:	b083      	sub	sp, #12
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007fde:	bf00      	nop
 8007fe0:	370c      	adds	r7, #12
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe8:	4770      	bx	lr

08007fea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007fea:	b480      	push	{r7}
 8007fec:	b083      	sub	sp, #12
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ff2:	bf00      	nop
 8007ff4:	370c      	adds	r7, #12
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr

08007ffe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ffe:	b480      	push	{r7}
 8008000:	b083      	sub	sp, #12
 8008002:	af00      	add	r7, sp, #0
 8008004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008006:	bf00      	nop
 8008008:	370c      	adds	r7, #12
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr
	...

08008014 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008014:	b480      	push	{r7}
 8008016:	b085      	sub	sp, #20
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	4a40      	ldr	r2, [pc, #256]	; (8008128 <TIM_Base_SetConfig+0x114>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d013      	beq.n	8008054 <TIM_Base_SetConfig+0x40>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008032:	d00f      	beq.n	8008054 <TIM_Base_SetConfig+0x40>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	4a3d      	ldr	r2, [pc, #244]	; (800812c <TIM_Base_SetConfig+0x118>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d00b      	beq.n	8008054 <TIM_Base_SetConfig+0x40>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	4a3c      	ldr	r2, [pc, #240]	; (8008130 <TIM_Base_SetConfig+0x11c>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d007      	beq.n	8008054 <TIM_Base_SetConfig+0x40>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	4a3b      	ldr	r2, [pc, #236]	; (8008134 <TIM_Base_SetConfig+0x120>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d003      	beq.n	8008054 <TIM_Base_SetConfig+0x40>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	4a3a      	ldr	r2, [pc, #232]	; (8008138 <TIM_Base_SetConfig+0x124>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d108      	bne.n	8008066 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800805a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	68fa      	ldr	r2, [r7, #12]
 8008062:	4313      	orrs	r3, r2
 8008064:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	4a2f      	ldr	r2, [pc, #188]	; (8008128 <TIM_Base_SetConfig+0x114>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d01f      	beq.n	80080ae <TIM_Base_SetConfig+0x9a>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008074:	d01b      	beq.n	80080ae <TIM_Base_SetConfig+0x9a>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	4a2c      	ldr	r2, [pc, #176]	; (800812c <TIM_Base_SetConfig+0x118>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d017      	beq.n	80080ae <TIM_Base_SetConfig+0x9a>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	4a2b      	ldr	r2, [pc, #172]	; (8008130 <TIM_Base_SetConfig+0x11c>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d013      	beq.n	80080ae <TIM_Base_SetConfig+0x9a>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	4a2a      	ldr	r2, [pc, #168]	; (8008134 <TIM_Base_SetConfig+0x120>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d00f      	beq.n	80080ae <TIM_Base_SetConfig+0x9a>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	4a29      	ldr	r2, [pc, #164]	; (8008138 <TIM_Base_SetConfig+0x124>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d00b      	beq.n	80080ae <TIM_Base_SetConfig+0x9a>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	4a28      	ldr	r2, [pc, #160]	; (800813c <TIM_Base_SetConfig+0x128>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d007      	beq.n	80080ae <TIM_Base_SetConfig+0x9a>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	4a27      	ldr	r2, [pc, #156]	; (8008140 <TIM_Base_SetConfig+0x12c>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d003      	beq.n	80080ae <TIM_Base_SetConfig+0x9a>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	4a26      	ldr	r2, [pc, #152]	; (8008144 <TIM_Base_SetConfig+0x130>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d108      	bne.n	80080c0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	68db      	ldr	r3, [r3, #12]
 80080ba:	68fa      	ldr	r2, [r7, #12]
 80080bc:	4313      	orrs	r3, r2
 80080be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	695b      	ldr	r3, [r3, #20]
 80080ca:	4313      	orrs	r3, r2
 80080cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	68fa      	ldr	r2, [r7, #12]
 80080d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	689a      	ldr	r2, [r3, #8]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	4a10      	ldr	r2, [pc, #64]	; (8008128 <TIM_Base_SetConfig+0x114>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d00f      	beq.n	800810c <TIM_Base_SetConfig+0xf8>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	4a12      	ldr	r2, [pc, #72]	; (8008138 <TIM_Base_SetConfig+0x124>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d00b      	beq.n	800810c <TIM_Base_SetConfig+0xf8>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	4a11      	ldr	r2, [pc, #68]	; (800813c <TIM_Base_SetConfig+0x128>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d007      	beq.n	800810c <TIM_Base_SetConfig+0xf8>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	4a10      	ldr	r2, [pc, #64]	; (8008140 <TIM_Base_SetConfig+0x12c>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d003      	beq.n	800810c <TIM_Base_SetConfig+0xf8>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	4a0f      	ldr	r2, [pc, #60]	; (8008144 <TIM_Base_SetConfig+0x130>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d103      	bne.n	8008114 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	691a      	ldr	r2, [r3, #16]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2201      	movs	r2, #1
 8008118:	615a      	str	r2, [r3, #20]
}
 800811a:	bf00      	nop
 800811c:	3714      	adds	r7, #20
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr
 8008126:	bf00      	nop
 8008128:	40012c00 	.word	0x40012c00
 800812c:	40000400 	.word	0x40000400
 8008130:	40000800 	.word	0x40000800
 8008134:	40000c00 	.word	0x40000c00
 8008138:	40013400 	.word	0x40013400
 800813c:	40014000 	.word	0x40014000
 8008140:	40014400 	.word	0x40014400
 8008144:	40014800 	.word	0x40014800

08008148 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008148:	b480      	push	{r7}
 800814a:	b085      	sub	sp, #20
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008158:	2b01      	cmp	r3, #1
 800815a:	d101      	bne.n	8008160 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800815c:	2302      	movs	r3, #2
 800815e:	e068      	b.n	8008232 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2201      	movs	r2, #1
 8008164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2202      	movs	r2, #2
 800816c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	689b      	ldr	r3, [r3, #8]
 800817e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a2e      	ldr	r2, [pc, #184]	; (8008240 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d004      	beq.n	8008194 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a2d      	ldr	r2, [pc, #180]	; (8008244 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d108      	bne.n	80081a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800819a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	68fa      	ldr	r2, [r7, #12]
 80081a2:	4313      	orrs	r3, r2
 80081a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	68fa      	ldr	r2, [r7, #12]
 80081b4:	4313      	orrs	r3, r2
 80081b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	68fa      	ldr	r2, [r7, #12]
 80081be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a1e      	ldr	r2, [pc, #120]	; (8008240 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d01d      	beq.n	8008206 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081d2:	d018      	beq.n	8008206 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a1b      	ldr	r2, [pc, #108]	; (8008248 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d013      	beq.n	8008206 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a1a      	ldr	r2, [pc, #104]	; (800824c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d00e      	beq.n	8008206 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a18      	ldr	r2, [pc, #96]	; (8008250 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d009      	beq.n	8008206 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a13      	ldr	r2, [pc, #76]	; (8008244 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d004      	beq.n	8008206 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a14      	ldr	r2, [pc, #80]	; (8008254 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d10c      	bne.n	8008220 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800820c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	68ba      	ldr	r2, [r7, #8]
 8008214:	4313      	orrs	r3, r2
 8008216:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	68ba      	ldr	r2, [r7, #8]
 800821e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2201      	movs	r2, #1
 8008224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2200      	movs	r2, #0
 800822c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008230:	2300      	movs	r3, #0
}
 8008232:	4618      	mov	r0, r3
 8008234:	3714      	adds	r7, #20
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr
 800823e:	bf00      	nop
 8008240:	40012c00 	.word	0x40012c00
 8008244:	40013400 	.word	0x40013400
 8008248:	40000400 	.word	0x40000400
 800824c:	40000800 	.word	0x40000800
 8008250:	40000c00 	.word	0x40000c00
 8008254:	40014000 	.word	0x40014000

08008258 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008258:	b480      	push	{r7}
 800825a:	b083      	sub	sp, #12
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008260:	bf00      	nop
 8008262:	370c      	adds	r7, #12
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr

0800826c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800826c:	b480      	push	{r7}
 800826e:	b083      	sub	sp, #12
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008274:	bf00      	nop
 8008276:	370c      	adds	r7, #12
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr

08008280 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008280:	b480      	push	{r7}
 8008282:	b083      	sub	sp, #12
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008288:	bf00      	nop
 800828a:	370c      	adds	r7, #12
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr

08008294 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b082      	sub	sp, #8
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d101      	bne.n	80082a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80082a2:	2301      	movs	r3, #1
 80082a4:	e040      	b.n	8008328 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d106      	bne.n	80082bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2200      	movs	r2, #0
 80082b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f7fa f9ce 	bl	8002658 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2224      	movs	r2, #36	; 0x24
 80082c0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f022 0201 	bic.w	r2, r2, #1
 80082d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 f8c0 	bl	8008458 <UART_SetConfig>
 80082d8:	4603      	mov	r3, r0
 80082da:	2b01      	cmp	r3, #1
 80082dc:	d101      	bne.n	80082e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80082de:	2301      	movs	r3, #1
 80082e0:	e022      	b.n	8008328 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d002      	beq.n	80082f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 fb3e 	bl	800896c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	685a      	ldr	r2, [r3, #4]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80082fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	689a      	ldr	r2, [r3, #8]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800830e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	681a      	ldr	r2, [r3, #0]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f042 0201 	orr.w	r2, r2, #1
 800831e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 fbc5 	bl	8008ab0 <UART_CheckIdleState>
 8008326:	4603      	mov	r3, r0
}
 8008328:	4618      	mov	r0, r3
 800832a:	3708      	adds	r7, #8
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b08a      	sub	sp, #40	; 0x28
 8008334:	af02      	add	r7, sp, #8
 8008336:	60f8      	str	r0, [r7, #12]
 8008338:	60b9      	str	r1, [r7, #8]
 800833a:	603b      	str	r3, [r7, #0]
 800833c:	4613      	mov	r3, r2
 800833e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008344:	2b20      	cmp	r3, #32
 8008346:	f040 8082 	bne.w	800844e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d002      	beq.n	8008356 <HAL_UART_Transmit+0x26>
 8008350:	88fb      	ldrh	r3, [r7, #6]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d101      	bne.n	800835a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008356:	2301      	movs	r3, #1
 8008358:	e07a      	b.n	8008450 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008360:	2b01      	cmp	r3, #1
 8008362:	d101      	bne.n	8008368 <HAL_UART_Transmit+0x38>
 8008364:	2302      	movs	r3, #2
 8008366:	e073      	b.n	8008450 <HAL_UART_Transmit+0x120>
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2201      	movs	r2, #1
 800836c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2200      	movs	r2, #0
 8008374:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2221      	movs	r2, #33	; 0x21
 800837c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800837e:	f7fa fa61 	bl	8002844 <HAL_GetTick>
 8008382:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	88fa      	ldrh	r2, [r7, #6]
 8008388:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	88fa      	ldrh	r2, [r7, #6]
 8008390:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	689b      	ldr	r3, [r3, #8]
 8008398:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800839c:	d108      	bne.n	80083b0 <HAL_UART_Transmit+0x80>
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	691b      	ldr	r3, [r3, #16]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d104      	bne.n	80083b0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80083a6:	2300      	movs	r3, #0
 80083a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	61bb      	str	r3, [r7, #24]
 80083ae:	e003      	b.n	80083b8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80083b4:	2300      	movs	r3, #0
 80083b6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2200      	movs	r2, #0
 80083bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80083c0:	e02d      	b.n	800841e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	9300      	str	r3, [sp, #0]
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	2200      	movs	r2, #0
 80083ca:	2180      	movs	r1, #128	; 0x80
 80083cc:	68f8      	ldr	r0, [r7, #12]
 80083ce:	f000 fbb8 	bl	8008b42 <UART_WaitOnFlagUntilTimeout>
 80083d2:	4603      	mov	r3, r0
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d001      	beq.n	80083dc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80083d8:	2303      	movs	r3, #3
 80083da:	e039      	b.n	8008450 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80083dc:	69fb      	ldr	r3, [r7, #28]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d10b      	bne.n	80083fa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80083e2:	69bb      	ldr	r3, [r7, #24]
 80083e4:	881a      	ldrh	r2, [r3, #0]
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80083ee:	b292      	uxth	r2, r2
 80083f0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80083f2:	69bb      	ldr	r3, [r7, #24]
 80083f4:	3302      	adds	r3, #2
 80083f6:	61bb      	str	r3, [r7, #24]
 80083f8:	e008      	b.n	800840c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80083fa:	69fb      	ldr	r3, [r7, #28]
 80083fc:	781a      	ldrb	r2, [r3, #0]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	b292      	uxth	r2, r2
 8008404:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008406:	69fb      	ldr	r3, [r7, #28]
 8008408:	3301      	adds	r3, #1
 800840a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008412:	b29b      	uxth	r3, r3
 8008414:	3b01      	subs	r3, #1
 8008416:	b29a      	uxth	r2, r3
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008424:	b29b      	uxth	r3, r3
 8008426:	2b00      	cmp	r3, #0
 8008428:	d1cb      	bne.n	80083c2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	9300      	str	r3, [sp, #0]
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	2200      	movs	r2, #0
 8008432:	2140      	movs	r1, #64	; 0x40
 8008434:	68f8      	ldr	r0, [r7, #12]
 8008436:	f000 fb84 	bl	8008b42 <UART_WaitOnFlagUntilTimeout>
 800843a:	4603      	mov	r3, r0
 800843c:	2b00      	cmp	r3, #0
 800843e:	d001      	beq.n	8008444 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8008440:	2303      	movs	r3, #3
 8008442:	e005      	b.n	8008450 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2220      	movs	r2, #32
 8008448:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800844a:	2300      	movs	r3, #0
 800844c:	e000      	b.n	8008450 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800844e:	2302      	movs	r3, #2
  }
}
 8008450:	4618      	mov	r0, r3
 8008452:	3720      	adds	r7, #32
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008458:	b5b0      	push	{r4, r5, r7, lr}
 800845a:	b088      	sub	sp, #32
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008460:	2300      	movs	r3, #0
 8008462:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	689a      	ldr	r2, [r3, #8]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	691b      	ldr	r3, [r3, #16]
 800846c:	431a      	orrs	r2, r3
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	695b      	ldr	r3, [r3, #20]
 8008472:	431a      	orrs	r2, r3
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	69db      	ldr	r3, [r3, #28]
 8008478:	4313      	orrs	r3, r2
 800847a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	681a      	ldr	r2, [r3, #0]
 8008482:	4bad      	ldr	r3, [pc, #692]	; (8008738 <UART_SetConfig+0x2e0>)
 8008484:	4013      	ands	r3, r2
 8008486:	687a      	ldr	r2, [r7, #4]
 8008488:	6812      	ldr	r2, [r2, #0]
 800848a:	69f9      	ldr	r1, [r7, #28]
 800848c:	430b      	orrs	r3, r1
 800848e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	68da      	ldr	r2, [r3, #12]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	430a      	orrs	r2, r1
 80084a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	699b      	ldr	r3, [r3, #24]
 80084aa:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4aa2      	ldr	r2, [pc, #648]	; (800873c <UART_SetConfig+0x2e4>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d004      	beq.n	80084c0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6a1b      	ldr	r3, [r3, #32]
 80084ba:	69fa      	ldr	r2, [r7, #28]
 80084bc:	4313      	orrs	r3, r2
 80084be:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	69fa      	ldr	r2, [r7, #28]
 80084d0:	430a      	orrs	r2, r1
 80084d2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a99      	ldr	r2, [pc, #612]	; (8008740 <UART_SetConfig+0x2e8>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d121      	bne.n	8008522 <UART_SetConfig+0xca>
 80084de:	4b99      	ldr	r3, [pc, #612]	; (8008744 <UART_SetConfig+0x2ec>)
 80084e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084e4:	f003 0303 	and.w	r3, r3, #3
 80084e8:	2b03      	cmp	r3, #3
 80084ea:	d817      	bhi.n	800851c <UART_SetConfig+0xc4>
 80084ec:	a201      	add	r2, pc, #4	; (adr r2, 80084f4 <UART_SetConfig+0x9c>)
 80084ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f2:	bf00      	nop
 80084f4:	08008505 	.word	0x08008505
 80084f8:	08008511 	.word	0x08008511
 80084fc:	0800850b 	.word	0x0800850b
 8008500:	08008517 	.word	0x08008517
 8008504:	2301      	movs	r3, #1
 8008506:	76fb      	strb	r3, [r7, #27]
 8008508:	e0e7      	b.n	80086da <UART_SetConfig+0x282>
 800850a:	2302      	movs	r3, #2
 800850c:	76fb      	strb	r3, [r7, #27]
 800850e:	e0e4      	b.n	80086da <UART_SetConfig+0x282>
 8008510:	2304      	movs	r3, #4
 8008512:	76fb      	strb	r3, [r7, #27]
 8008514:	e0e1      	b.n	80086da <UART_SetConfig+0x282>
 8008516:	2308      	movs	r3, #8
 8008518:	76fb      	strb	r3, [r7, #27]
 800851a:	e0de      	b.n	80086da <UART_SetConfig+0x282>
 800851c:	2310      	movs	r3, #16
 800851e:	76fb      	strb	r3, [r7, #27]
 8008520:	e0db      	b.n	80086da <UART_SetConfig+0x282>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a88      	ldr	r2, [pc, #544]	; (8008748 <UART_SetConfig+0x2f0>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d132      	bne.n	8008592 <UART_SetConfig+0x13a>
 800852c:	4b85      	ldr	r3, [pc, #532]	; (8008744 <UART_SetConfig+0x2ec>)
 800852e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008532:	f003 030c 	and.w	r3, r3, #12
 8008536:	2b0c      	cmp	r3, #12
 8008538:	d828      	bhi.n	800858c <UART_SetConfig+0x134>
 800853a:	a201      	add	r2, pc, #4	; (adr r2, 8008540 <UART_SetConfig+0xe8>)
 800853c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008540:	08008575 	.word	0x08008575
 8008544:	0800858d 	.word	0x0800858d
 8008548:	0800858d 	.word	0x0800858d
 800854c:	0800858d 	.word	0x0800858d
 8008550:	08008581 	.word	0x08008581
 8008554:	0800858d 	.word	0x0800858d
 8008558:	0800858d 	.word	0x0800858d
 800855c:	0800858d 	.word	0x0800858d
 8008560:	0800857b 	.word	0x0800857b
 8008564:	0800858d 	.word	0x0800858d
 8008568:	0800858d 	.word	0x0800858d
 800856c:	0800858d 	.word	0x0800858d
 8008570:	08008587 	.word	0x08008587
 8008574:	2300      	movs	r3, #0
 8008576:	76fb      	strb	r3, [r7, #27]
 8008578:	e0af      	b.n	80086da <UART_SetConfig+0x282>
 800857a:	2302      	movs	r3, #2
 800857c:	76fb      	strb	r3, [r7, #27]
 800857e:	e0ac      	b.n	80086da <UART_SetConfig+0x282>
 8008580:	2304      	movs	r3, #4
 8008582:	76fb      	strb	r3, [r7, #27]
 8008584:	e0a9      	b.n	80086da <UART_SetConfig+0x282>
 8008586:	2308      	movs	r3, #8
 8008588:	76fb      	strb	r3, [r7, #27]
 800858a:	e0a6      	b.n	80086da <UART_SetConfig+0x282>
 800858c:	2310      	movs	r3, #16
 800858e:	76fb      	strb	r3, [r7, #27]
 8008590:	e0a3      	b.n	80086da <UART_SetConfig+0x282>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a6d      	ldr	r2, [pc, #436]	; (800874c <UART_SetConfig+0x2f4>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d120      	bne.n	80085de <UART_SetConfig+0x186>
 800859c:	4b69      	ldr	r3, [pc, #420]	; (8008744 <UART_SetConfig+0x2ec>)
 800859e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085a2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80085a6:	2b30      	cmp	r3, #48	; 0x30
 80085a8:	d013      	beq.n	80085d2 <UART_SetConfig+0x17a>
 80085aa:	2b30      	cmp	r3, #48	; 0x30
 80085ac:	d814      	bhi.n	80085d8 <UART_SetConfig+0x180>
 80085ae:	2b20      	cmp	r3, #32
 80085b0:	d009      	beq.n	80085c6 <UART_SetConfig+0x16e>
 80085b2:	2b20      	cmp	r3, #32
 80085b4:	d810      	bhi.n	80085d8 <UART_SetConfig+0x180>
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d002      	beq.n	80085c0 <UART_SetConfig+0x168>
 80085ba:	2b10      	cmp	r3, #16
 80085bc:	d006      	beq.n	80085cc <UART_SetConfig+0x174>
 80085be:	e00b      	b.n	80085d8 <UART_SetConfig+0x180>
 80085c0:	2300      	movs	r3, #0
 80085c2:	76fb      	strb	r3, [r7, #27]
 80085c4:	e089      	b.n	80086da <UART_SetConfig+0x282>
 80085c6:	2302      	movs	r3, #2
 80085c8:	76fb      	strb	r3, [r7, #27]
 80085ca:	e086      	b.n	80086da <UART_SetConfig+0x282>
 80085cc:	2304      	movs	r3, #4
 80085ce:	76fb      	strb	r3, [r7, #27]
 80085d0:	e083      	b.n	80086da <UART_SetConfig+0x282>
 80085d2:	2308      	movs	r3, #8
 80085d4:	76fb      	strb	r3, [r7, #27]
 80085d6:	e080      	b.n	80086da <UART_SetConfig+0x282>
 80085d8:	2310      	movs	r3, #16
 80085da:	76fb      	strb	r3, [r7, #27]
 80085dc:	e07d      	b.n	80086da <UART_SetConfig+0x282>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a5b      	ldr	r2, [pc, #364]	; (8008750 <UART_SetConfig+0x2f8>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d120      	bne.n	800862a <UART_SetConfig+0x1d2>
 80085e8:	4b56      	ldr	r3, [pc, #344]	; (8008744 <UART_SetConfig+0x2ec>)
 80085ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80085f2:	2bc0      	cmp	r3, #192	; 0xc0
 80085f4:	d013      	beq.n	800861e <UART_SetConfig+0x1c6>
 80085f6:	2bc0      	cmp	r3, #192	; 0xc0
 80085f8:	d814      	bhi.n	8008624 <UART_SetConfig+0x1cc>
 80085fa:	2b80      	cmp	r3, #128	; 0x80
 80085fc:	d009      	beq.n	8008612 <UART_SetConfig+0x1ba>
 80085fe:	2b80      	cmp	r3, #128	; 0x80
 8008600:	d810      	bhi.n	8008624 <UART_SetConfig+0x1cc>
 8008602:	2b00      	cmp	r3, #0
 8008604:	d002      	beq.n	800860c <UART_SetConfig+0x1b4>
 8008606:	2b40      	cmp	r3, #64	; 0x40
 8008608:	d006      	beq.n	8008618 <UART_SetConfig+0x1c0>
 800860a:	e00b      	b.n	8008624 <UART_SetConfig+0x1cc>
 800860c:	2300      	movs	r3, #0
 800860e:	76fb      	strb	r3, [r7, #27]
 8008610:	e063      	b.n	80086da <UART_SetConfig+0x282>
 8008612:	2302      	movs	r3, #2
 8008614:	76fb      	strb	r3, [r7, #27]
 8008616:	e060      	b.n	80086da <UART_SetConfig+0x282>
 8008618:	2304      	movs	r3, #4
 800861a:	76fb      	strb	r3, [r7, #27]
 800861c:	e05d      	b.n	80086da <UART_SetConfig+0x282>
 800861e:	2308      	movs	r3, #8
 8008620:	76fb      	strb	r3, [r7, #27]
 8008622:	e05a      	b.n	80086da <UART_SetConfig+0x282>
 8008624:	2310      	movs	r3, #16
 8008626:	76fb      	strb	r3, [r7, #27]
 8008628:	e057      	b.n	80086da <UART_SetConfig+0x282>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4a49      	ldr	r2, [pc, #292]	; (8008754 <UART_SetConfig+0x2fc>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d125      	bne.n	8008680 <UART_SetConfig+0x228>
 8008634:	4b43      	ldr	r3, [pc, #268]	; (8008744 <UART_SetConfig+0x2ec>)
 8008636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800863a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800863e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008642:	d017      	beq.n	8008674 <UART_SetConfig+0x21c>
 8008644:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008648:	d817      	bhi.n	800867a <UART_SetConfig+0x222>
 800864a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800864e:	d00b      	beq.n	8008668 <UART_SetConfig+0x210>
 8008650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008654:	d811      	bhi.n	800867a <UART_SetConfig+0x222>
 8008656:	2b00      	cmp	r3, #0
 8008658:	d003      	beq.n	8008662 <UART_SetConfig+0x20a>
 800865a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800865e:	d006      	beq.n	800866e <UART_SetConfig+0x216>
 8008660:	e00b      	b.n	800867a <UART_SetConfig+0x222>
 8008662:	2300      	movs	r3, #0
 8008664:	76fb      	strb	r3, [r7, #27]
 8008666:	e038      	b.n	80086da <UART_SetConfig+0x282>
 8008668:	2302      	movs	r3, #2
 800866a:	76fb      	strb	r3, [r7, #27]
 800866c:	e035      	b.n	80086da <UART_SetConfig+0x282>
 800866e:	2304      	movs	r3, #4
 8008670:	76fb      	strb	r3, [r7, #27]
 8008672:	e032      	b.n	80086da <UART_SetConfig+0x282>
 8008674:	2308      	movs	r3, #8
 8008676:	76fb      	strb	r3, [r7, #27]
 8008678:	e02f      	b.n	80086da <UART_SetConfig+0x282>
 800867a:	2310      	movs	r3, #16
 800867c:	76fb      	strb	r3, [r7, #27]
 800867e:	e02c      	b.n	80086da <UART_SetConfig+0x282>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a2d      	ldr	r2, [pc, #180]	; (800873c <UART_SetConfig+0x2e4>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d125      	bne.n	80086d6 <UART_SetConfig+0x27e>
 800868a:	4b2e      	ldr	r3, [pc, #184]	; (8008744 <UART_SetConfig+0x2ec>)
 800868c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008690:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008694:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008698:	d017      	beq.n	80086ca <UART_SetConfig+0x272>
 800869a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800869e:	d817      	bhi.n	80086d0 <UART_SetConfig+0x278>
 80086a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086a4:	d00b      	beq.n	80086be <UART_SetConfig+0x266>
 80086a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086aa:	d811      	bhi.n	80086d0 <UART_SetConfig+0x278>
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d003      	beq.n	80086b8 <UART_SetConfig+0x260>
 80086b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086b4:	d006      	beq.n	80086c4 <UART_SetConfig+0x26c>
 80086b6:	e00b      	b.n	80086d0 <UART_SetConfig+0x278>
 80086b8:	2300      	movs	r3, #0
 80086ba:	76fb      	strb	r3, [r7, #27]
 80086bc:	e00d      	b.n	80086da <UART_SetConfig+0x282>
 80086be:	2302      	movs	r3, #2
 80086c0:	76fb      	strb	r3, [r7, #27]
 80086c2:	e00a      	b.n	80086da <UART_SetConfig+0x282>
 80086c4:	2304      	movs	r3, #4
 80086c6:	76fb      	strb	r3, [r7, #27]
 80086c8:	e007      	b.n	80086da <UART_SetConfig+0x282>
 80086ca:	2308      	movs	r3, #8
 80086cc:	76fb      	strb	r3, [r7, #27]
 80086ce:	e004      	b.n	80086da <UART_SetConfig+0x282>
 80086d0:	2310      	movs	r3, #16
 80086d2:	76fb      	strb	r3, [r7, #27]
 80086d4:	e001      	b.n	80086da <UART_SetConfig+0x282>
 80086d6:	2310      	movs	r3, #16
 80086d8:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a17      	ldr	r2, [pc, #92]	; (800873c <UART_SetConfig+0x2e4>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	f040 8087 	bne.w	80087f4 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80086e6:	7efb      	ldrb	r3, [r7, #27]
 80086e8:	2b08      	cmp	r3, #8
 80086ea:	d837      	bhi.n	800875c <UART_SetConfig+0x304>
 80086ec:	a201      	add	r2, pc, #4	; (adr r2, 80086f4 <UART_SetConfig+0x29c>)
 80086ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f2:	bf00      	nop
 80086f4:	08008719 	.word	0x08008719
 80086f8:	0800875d 	.word	0x0800875d
 80086fc:	08008721 	.word	0x08008721
 8008700:	0800875d 	.word	0x0800875d
 8008704:	08008727 	.word	0x08008727
 8008708:	0800875d 	.word	0x0800875d
 800870c:	0800875d 	.word	0x0800875d
 8008710:	0800875d 	.word	0x0800875d
 8008714:	0800872f 	.word	0x0800872f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008718:	f7fe fd24 	bl	8007164 <HAL_RCC_GetPCLK1Freq>
 800871c:	6178      	str	r0, [r7, #20]
        break;
 800871e:	e022      	b.n	8008766 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008720:	4b0d      	ldr	r3, [pc, #52]	; (8008758 <UART_SetConfig+0x300>)
 8008722:	617b      	str	r3, [r7, #20]
        break;
 8008724:	e01f      	b.n	8008766 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008726:	f7fe fc85 	bl	8007034 <HAL_RCC_GetSysClockFreq>
 800872a:	6178      	str	r0, [r7, #20]
        break;
 800872c:	e01b      	b.n	8008766 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800872e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008732:	617b      	str	r3, [r7, #20]
        break;
 8008734:	e017      	b.n	8008766 <UART_SetConfig+0x30e>
 8008736:	bf00      	nop
 8008738:	efff69f3 	.word	0xefff69f3
 800873c:	40008000 	.word	0x40008000
 8008740:	40013800 	.word	0x40013800
 8008744:	40021000 	.word	0x40021000
 8008748:	40004400 	.word	0x40004400
 800874c:	40004800 	.word	0x40004800
 8008750:	40004c00 	.word	0x40004c00
 8008754:	40005000 	.word	0x40005000
 8008758:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800875c:	2300      	movs	r3, #0
 800875e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008760:	2301      	movs	r3, #1
 8008762:	76bb      	strb	r3, [r7, #26]
        break;
 8008764:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	2b00      	cmp	r3, #0
 800876a:	f000 80f1 	beq.w	8008950 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	685a      	ldr	r2, [r3, #4]
 8008772:	4613      	mov	r3, r2
 8008774:	005b      	lsls	r3, r3, #1
 8008776:	4413      	add	r3, r2
 8008778:	697a      	ldr	r2, [r7, #20]
 800877a:	429a      	cmp	r2, r3
 800877c:	d305      	bcc.n	800878a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008784:	697a      	ldr	r2, [r7, #20]
 8008786:	429a      	cmp	r2, r3
 8008788:	d902      	bls.n	8008790 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800878a:	2301      	movs	r3, #1
 800878c:	76bb      	strb	r3, [r7, #26]
 800878e:	e0df      	b.n	8008950 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	4618      	mov	r0, r3
 8008794:	f04f 0100 	mov.w	r1, #0
 8008798:	f04f 0200 	mov.w	r2, #0
 800879c:	f04f 0300 	mov.w	r3, #0
 80087a0:	020b      	lsls	r3, r1, #8
 80087a2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80087a6:	0202      	lsls	r2, r0, #8
 80087a8:	6879      	ldr	r1, [r7, #4]
 80087aa:	6849      	ldr	r1, [r1, #4]
 80087ac:	0849      	lsrs	r1, r1, #1
 80087ae:	4608      	mov	r0, r1
 80087b0:	f04f 0100 	mov.w	r1, #0
 80087b4:	1814      	adds	r4, r2, r0
 80087b6:	eb43 0501 	adc.w	r5, r3, r1
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	461a      	mov	r2, r3
 80087c0:	f04f 0300 	mov.w	r3, #0
 80087c4:	4620      	mov	r0, r4
 80087c6:	4629      	mov	r1, r5
 80087c8:	f7f8 f9ee 	bl	8000ba8 <__aeabi_uldivmod>
 80087cc:	4602      	mov	r2, r0
 80087ce:	460b      	mov	r3, r1
 80087d0:	4613      	mov	r3, r2
 80087d2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087da:	d308      	bcc.n	80087ee <UART_SetConfig+0x396>
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087e2:	d204      	bcs.n	80087ee <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	693a      	ldr	r2, [r7, #16]
 80087ea:	60da      	str	r2, [r3, #12]
 80087ec:	e0b0      	b.n	8008950 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80087ee:	2301      	movs	r3, #1
 80087f0:	76bb      	strb	r3, [r7, #26]
 80087f2:	e0ad      	b.n	8008950 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	69db      	ldr	r3, [r3, #28]
 80087f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087fc:	d15b      	bne.n	80088b6 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 80087fe:	7efb      	ldrb	r3, [r7, #27]
 8008800:	2b08      	cmp	r3, #8
 8008802:	d828      	bhi.n	8008856 <UART_SetConfig+0x3fe>
 8008804:	a201      	add	r2, pc, #4	; (adr r2, 800880c <UART_SetConfig+0x3b4>)
 8008806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800880a:	bf00      	nop
 800880c:	08008831 	.word	0x08008831
 8008810:	08008839 	.word	0x08008839
 8008814:	08008841 	.word	0x08008841
 8008818:	08008857 	.word	0x08008857
 800881c:	08008847 	.word	0x08008847
 8008820:	08008857 	.word	0x08008857
 8008824:	08008857 	.word	0x08008857
 8008828:	08008857 	.word	0x08008857
 800882c:	0800884f 	.word	0x0800884f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008830:	f7fe fc98 	bl	8007164 <HAL_RCC_GetPCLK1Freq>
 8008834:	6178      	str	r0, [r7, #20]
        break;
 8008836:	e013      	b.n	8008860 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008838:	f7fe fcaa 	bl	8007190 <HAL_RCC_GetPCLK2Freq>
 800883c:	6178      	str	r0, [r7, #20]
        break;
 800883e:	e00f      	b.n	8008860 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008840:	4b49      	ldr	r3, [pc, #292]	; (8008968 <UART_SetConfig+0x510>)
 8008842:	617b      	str	r3, [r7, #20]
        break;
 8008844:	e00c      	b.n	8008860 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008846:	f7fe fbf5 	bl	8007034 <HAL_RCC_GetSysClockFreq>
 800884a:	6178      	str	r0, [r7, #20]
        break;
 800884c:	e008      	b.n	8008860 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800884e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008852:	617b      	str	r3, [r7, #20]
        break;
 8008854:	e004      	b.n	8008860 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8008856:	2300      	movs	r3, #0
 8008858:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800885a:	2301      	movs	r3, #1
 800885c:	76bb      	strb	r3, [r7, #26]
        break;
 800885e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d074      	beq.n	8008950 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	005a      	lsls	r2, r3, #1
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	685b      	ldr	r3, [r3, #4]
 800886e:	085b      	lsrs	r3, r3, #1
 8008870:	441a      	add	r2, r3
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	fbb2 f3f3 	udiv	r3, r2, r3
 800887a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	2b0f      	cmp	r3, #15
 8008880:	d916      	bls.n	80088b0 <UART_SetConfig+0x458>
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008888:	d212      	bcs.n	80088b0 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	b29b      	uxth	r3, r3
 800888e:	f023 030f 	bic.w	r3, r3, #15
 8008892:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	085b      	lsrs	r3, r3, #1
 8008898:	b29b      	uxth	r3, r3
 800889a:	f003 0307 	and.w	r3, r3, #7
 800889e:	b29a      	uxth	r2, r3
 80088a0:	89fb      	ldrh	r3, [r7, #14]
 80088a2:	4313      	orrs	r3, r2
 80088a4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	89fa      	ldrh	r2, [r7, #14]
 80088ac:	60da      	str	r2, [r3, #12]
 80088ae:	e04f      	b.n	8008950 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80088b0:	2301      	movs	r3, #1
 80088b2:	76bb      	strb	r3, [r7, #26]
 80088b4:	e04c      	b.n	8008950 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80088b6:	7efb      	ldrb	r3, [r7, #27]
 80088b8:	2b08      	cmp	r3, #8
 80088ba:	d828      	bhi.n	800890e <UART_SetConfig+0x4b6>
 80088bc:	a201      	add	r2, pc, #4	; (adr r2, 80088c4 <UART_SetConfig+0x46c>)
 80088be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088c2:	bf00      	nop
 80088c4:	080088e9 	.word	0x080088e9
 80088c8:	080088f1 	.word	0x080088f1
 80088cc:	080088f9 	.word	0x080088f9
 80088d0:	0800890f 	.word	0x0800890f
 80088d4:	080088ff 	.word	0x080088ff
 80088d8:	0800890f 	.word	0x0800890f
 80088dc:	0800890f 	.word	0x0800890f
 80088e0:	0800890f 	.word	0x0800890f
 80088e4:	08008907 	.word	0x08008907
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80088e8:	f7fe fc3c 	bl	8007164 <HAL_RCC_GetPCLK1Freq>
 80088ec:	6178      	str	r0, [r7, #20]
        break;
 80088ee:	e013      	b.n	8008918 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80088f0:	f7fe fc4e 	bl	8007190 <HAL_RCC_GetPCLK2Freq>
 80088f4:	6178      	str	r0, [r7, #20]
        break;
 80088f6:	e00f      	b.n	8008918 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80088f8:	4b1b      	ldr	r3, [pc, #108]	; (8008968 <UART_SetConfig+0x510>)
 80088fa:	617b      	str	r3, [r7, #20]
        break;
 80088fc:	e00c      	b.n	8008918 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80088fe:	f7fe fb99 	bl	8007034 <HAL_RCC_GetSysClockFreq>
 8008902:	6178      	str	r0, [r7, #20]
        break;
 8008904:	e008      	b.n	8008918 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008906:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800890a:	617b      	str	r3, [r7, #20]
        break;
 800890c:	e004      	b.n	8008918 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800890e:	2300      	movs	r3, #0
 8008910:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008912:	2301      	movs	r3, #1
 8008914:	76bb      	strb	r3, [r7, #26]
        break;
 8008916:	bf00      	nop
    }

    if (pclk != 0U)
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d018      	beq.n	8008950 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	085a      	lsrs	r2, r3, #1
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	441a      	add	r2, r3
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008930:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	2b0f      	cmp	r3, #15
 8008936:	d909      	bls.n	800894c <UART_SetConfig+0x4f4>
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800893e:	d205      	bcs.n	800894c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	b29a      	uxth	r2, r3
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	60da      	str	r2, [r3, #12]
 800894a:	e001      	b.n	8008950 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800894c:	2301      	movs	r3, #1
 800894e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2200      	movs	r2, #0
 8008954:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2200      	movs	r2, #0
 800895a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800895c:	7ebb      	ldrb	r3, [r7, #26]
}
 800895e:	4618      	mov	r0, r3
 8008960:	3720      	adds	r7, #32
 8008962:	46bd      	mov	sp, r7
 8008964:	bdb0      	pop	{r4, r5, r7, pc}
 8008966:	bf00      	nop
 8008968:	00f42400 	.word	0x00f42400

0800896c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800896c:	b480      	push	{r7}
 800896e:	b083      	sub	sp, #12
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008978:	f003 0301 	and.w	r3, r3, #1
 800897c:	2b00      	cmp	r3, #0
 800897e:	d00a      	beq.n	8008996 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	685b      	ldr	r3, [r3, #4]
 8008986:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	430a      	orrs	r2, r1
 8008994:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800899a:	f003 0302 	and.w	r3, r3, #2
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d00a      	beq.n	80089b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	430a      	orrs	r2, r1
 80089b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089bc:	f003 0304 	and.w	r3, r3, #4
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d00a      	beq.n	80089da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	430a      	orrs	r2, r1
 80089d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089de:	f003 0308 	and.w	r3, r3, #8
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d00a      	beq.n	80089fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	430a      	orrs	r2, r1
 80089fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a00:	f003 0310 	and.w	r3, r3, #16
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d00a      	beq.n	8008a1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	689b      	ldr	r3, [r3, #8]
 8008a0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	430a      	orrs	r2, r1
 8008a1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a22:	f003 0320 	and.w	r3, r3, #32
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d00a      	beq.n	8008a40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	689b      	ldr	r3, [r3, #8]
 8008a30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	430a      	orrs	r2, r1
 8008a3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d01a      	beq.n	8008a82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	430a      	orrs	r2, r1
 8008a60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a6a:	d10a      	bne.n	8008a82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	430a      	orrs	r2, r1
 8008a80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d00a      	beq.n	8008aa4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	430a      	orrs	r2, r1
 8008aa2:	605a      	str	r2, [r3, #4]
  }
}
 8008aa4:	bf00      	nop
 8008aa6:	370c      	adds	r7, #12
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr

08008ab0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b086      	sub	sp, #24
 8008ab4:	af02      	add	r7, sp, #8
 8008ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2200      	movs	r2, #0
 8008abc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008ac0:	f7f9 fec0 	bl	8002844 <HAL_GetTick>
 8008ac4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f003 0308 	and.w	r3, r3, #8
 8008ad0:	2b08      	cmp	r3, #8
 8008ad2:	d10e      	bne.n	8008af2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ad4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ad8:	9300      	str	r3, [sp, #0]
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2200      	movs	r2, #0
 8008ade:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 f82d 	bl	8008b42 <UART_WaitOnFlagUntilTimeout>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d001      	beq.n	8008af2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008aee:	2303      	movs	r3, #3
 8008af0:	e023      	b.n	8008b3a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f003 0304 	and.w	r3, r3, #4
 8008afc:	2b04      	cmp	r3, #4
 8008afe:	d10e      	bne.n	8008b1e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008b04:	9300      	str	r3, [sp, #0]
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 f817 	bl	8008b42 <UART_WaitOnFlagUntilTimeout>
 8008b14:	4603      	mov	r3, r0
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d001      	beq.n	8008b1e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b1a:	2303      	movs	r3, #3
 8008b1c:	e00d      	b.n	8008b3a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2220      	movs	r2, #32
 8008b22:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2220      	movs	r2, #32
 8008b28:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2200      	movs	r2, #0
 8008b34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008b38:	2300      	movs	r3, #0
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3710      	adds	r7, #16
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}

08008b42 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008b42:	b580      	push	{r7, lr}
 8008b44:	b09c      	sub	sp, #112	; 0x70
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	60f8      	str	r0, [r7, #12]
 8008b4a:	60b9      	str	r1, [r7, #8]
 8008b4c:	603b      	str	r3, [r7, #0]
 8008b4e:	4613      	mov	r3, r2
 8008b50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b52:	e0a5      	b.n	8008ca0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b5a:	f000 80a1 	beq.w	8008ca0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b5e:	f7f9 fe71 	bl	8002844 <HAL_GetTick>
 8008b62:	4602      	mov	r2, r0
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	1ad3      	subs	r3, r2, r3
 8008b68:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d302      	bcc.n	8008b74 <UART_WaitOnFlagUntilTimeout+0x32>
 8008b6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d13e      	bne.n	8008bf2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b7c:	e853 3f00 	ldrex	r3, [r3]
 8008b80:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008b82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b84:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008b88:	667b      	str	r3, [r7, #100]	; 0x64
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	461a      	mov	r2, r3
 8008b90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b94:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b96:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008b98:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008b9a:	e841 2300 	strex	r3, r2, [r1]
 8008b9e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008ba0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d1e6      	bne.n	8008b74 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	3308      	adds	r3, #8
 8008bac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bb0:	e853 3f00 	ldrex	r3, [r3]
 8008bb4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bb8:	f023 0301 	bic.w	r3, r3, #1
 8008bbc:	663b      	str	r3, [r7, #96]	; 0x60
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	3308      	adds	r3, #8
 8008bc4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008bc6:	64ba      	str	r2, [r7, #72]	; 0x48
 8008bc8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008bcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008bce:	e841 2300 	strex	r3, r2, [r1]
 8008bd2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008bd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d1e5      	bne.n	8008ba6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	2220      	movs	r2, #32
 8008bde:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2220      	movs	r2, #32
 8008be4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2200      	movs	r2, #0
 8008bea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008bee:	2303      	movs	r3, #3
 8008bf0:	e067      	b.n	8008cc2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f003 0304 	and.w	r3, r3, #4
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d04f      	beq.n	8008ca0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	69db      	ldr	r3, [r3, #28]
 8008c06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c0e:	d147      	bne.n	8008ca0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008c18:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c22:	e853 3f00 	ldrex	r3, [r3]
 8008c26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008c2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	461a      	mov	r2, r3
 8008c36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c38:	637b      	str	r3, [r7, #52]	; 0x34
 8008c3a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008c3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c40:	e841 2300 	strex	r3, r2, [r1]
 8008c44:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d1e6      	bne.n	8008c1a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	3308      	adds	r3, #8
 8008c52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	e853 3f00 	ldrex	r3, [r3]
 8008c5a:	613b      	str	r3, [r7, #16]
   return(result);
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	f023 0301 	bic.w	r3, r3, #1
 8008c62:	66bb      	str	r3, [r7, #104]	; 0x68
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	3308      	adds	r3, #8
 8008c6a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008c6c:	623a      	str	r2, [r7, #32]
 8008c6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c70:	69f9      	ldr	r1, [r7, #28]
 8008c72:	6a3a      	ldr	r2, [r7, #32]
 8008c74:	e841 2300 	strex	r3, r2, [r1]
 8008c78:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c7a:	69bb      	ldr	r3, [r7, #24]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d1e5      	bne.n	8008c4c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2220      	movs	r2, #32
 8008c84:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	2220      	movs	r2, #32
 8008c8a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2220      	movs	r2, #32
 8008c90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2200      	movs	r2, #0
 8008c98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008c9c:	2303      	movs	r3, #3
 8008c9e:	e010      	b.n	8008cc2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	69da      	ldr	r2, [r3, #28]
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	4013      	ands	r3, r2
 8008caa:	68ba      	ldr	r2, [r7, #8]
 8008cac:	429a      	cmp	r2, r3
 8008cae:	bf0c      	ite	eq
 8008cb0:	2301      	moveq	r3, #1
 8008cb2:	2300      	movne	r3, #0
 8008cb4:	b2db      	uxtb	r3, r3
 8008cb6:	461a      	mov	r2, r3
 8008cb8:	79fb      	ldrb	r3, [r7, #7]
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	f43f af4a 	beq.w	8008b54 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008cc0:	2300      	movs	r3, #0
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3770      	adds	r7, #112	; 0x70
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}
	...

08008ccc <__errno>:
 8008ccc:	4b01      	ldr	r3, [pc, #4]	; (8008cd4 <__errno+0x8>)
 8008cce:	6818      	ldr	r0, [r3, #0]
 8008cd0:	4770      	bx	lr
 8008cd2:	bf00      	nop
 8008cd4:	20000014 	.word	0x20000014

08008cd8 <__libc_init_array>:
 8008cd8:	b570      	push	{r4, r5, r6, lr}
 8008cda:	4d0d      	ldr	r5, [pc, #52]	; (8008d10 <__libc_init_array+0x38>)
 8008cdc:	4c0d      	ldr	r4, [pc, #52]	; (8008d14 <__libc_init_array+0x3c>)
 8008cde:	1b64      	subs	r4, r4, r5
 8008ce0:	10a4      	asrs	r4, r4, #2
 8008ce2:	2600      	movs	r6, #0
 8008ce4:	42a6      	cmp	r6, r4
 8008ce6:	d109      	bne.n	8008cfc <__libc_init_array+0x24>
 8008ce8:	4d0b      	ldr	r5, [pc, #44]	; (8008d18 <__libc_init_array+0x40>)
 8008cea:	4c0c      	ldr	r4, [pc, #48]	; (8008d1c <__libc_init_array+0x44>)
 8008cec:	f002 fede 	bl	800baac <_init>
 8008cf0:	1b64      	subs	r4, r4, r5
 8008cf2:	10a4      	asrs	r4, r4, #2
 8008cf4:	2600      	movs	r6, #0
 8008cf6:	42a6      	cmp	r6, r4
 8008cf8:	d105      	bne.n	8008d06 <__libc_init_array+0x2e>
 8008cfa:	bd70      	pop	{r4, r5, r6, pc}
 8008cfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d00:	4798      	blx	r3
 8008d02:	3601      	adds	r6, #1
 8008d04:	e7ee      	b.n	8008ce4 <__libc_init_array+0xc>
 8008d06:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d0a:	4798      	blx	r3
 8008d0c:	3601      	adds	r6, #1
 8008d0e:	e7f2      	b.n	8008cf6 <__libc_init_array+0x1e>
 8008d10:	0800c444 	.word	0x0800c444
 8008d14:	0800c444 	.word	0x0800c444
 8008d18:	0800c444 	.word	0x0800c444
 8008d1c:	0800c448 	.word	0x0800c448

08008d20 <malloc>:
 8008d20:	4b02      	ldr	r3, [pc, #8]	; (8008d2c <malloc+0xc>)
 8008d22:	4601      	mov	r1, r0
 8008d24:	6818      	ldr	r0, [r3, #0]
 8008d26:	f000 b85b 	b.w	8008de0 <_malloc_r>
 8008d2a:	bf00      	nop
 8008d2c:	20000014 	.word	0x20000014

08008d30 <memset>:
 8008d30:	4402      	add	r2, r0
 8008d32:	4603      	mov	r3, r0
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d100      	bne.n	8008d3a <memset+0xa>
 8008d38:	4770      	bx	lr
 8008d3a:	f803 1b01 	strb.w	r1, [r3], #1
 8008d3e:	e7f9      	b.n	8008d34 <memset+0x4>

08008d40 <_free_r>:
 8008d40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d42:	2900      	cmp	r1, #0
 8008d44:	d048      	beq.n	8008dd8 <_free_r+0x98>
 8008d46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d4a:	9001      	str	r0, [sp, #4]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	f1a1 0404 	sub.w	r4, r1, #4
 8008d52:	bfb8      	it	lt
 8008d54:	18e4      	addlt	r4, r4, r3
 8008d56:	f001 fce7 	bl	800a728 <__malloc_lock>
 8008d5a:	4a20      	ldr	r2, [pc, #128]	; (8008ddc <_free_r+0x9c>)
 8008d5c:	9801      	ldr	r0, [sp, #4]
 8008d5e:	6813      	ldr	r3, [r2, #0]
 8008d60:	4615      	mov	r5, r2
 8008d62:	b933      	cbnz	r3, 8008d72 <_free_r+0x32>
 8008d64:	6063      	str	r3, [r4, #4]
 8008d66:	6014      	str	r4, [r2, #0]
 8008d68:	b003      	add	sp, #12
 8008d6a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d6e:	f001 bce1 	b.w	800a734 <__malloc_unlock>
 8008d72:	42a3      	cmp	r3, r4
 8008d74:	d90b      	bls.n	8008d8e <_free_r+0x4e>
 8008d76:	6821      	ldr	r1, [r4, #0]
 8008d78:	1862      	adds	r2, r4, r1
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	bf04      	itt	eq
 8008d7e:	681a      	ldreq	r2, [r3, #0]
 8008d80:	685b      	ldreq	r3, [r3, #4]
 8008d82:	6063      	str	r3, [r4, #4]
 8008d84:	bf04      	itt	eq
 8008d86:	1852      	addeq	r2, r2, r1
 8008d88:	6022      	streq	r2, [r4, #0]
 8008d8a:	602c      	str	r4, [r5, #0]
 8008d8c:	e7ec      	b.n	8008d68 <_free_r+0x28>
 8008d8e:	461a      	mov	r2, r3
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	b10b      	cbz	r3, 8008d98 <_free_r+0x58>
 8008d94:	42a3      	cmp	r3, r4
 8008d96:	d9fa      	bls.n	8008d8e <_free_r+0x4e>
 8008d98:	6811      	ldr	r1, [r2, #0]
 8008d9a:	1855      	adds	r5, r2, r1
 8008d9c:	42a5      	cmp	r5, r4
 8008d9e:	d10b      	bne.n	8008db8 <_free_r+0x78>
 8008da0:	6824      	ldr	r4, [r4, #0]
 8008da2:	4421      	add	r1, r4
 8008da4:	1854      	adds	r4, r2, r1
 8008da6:	42a3      	cmp	r3, r4
 8008da8:	6011      	str	r1, [r2, #0]
 8008daa:	d1dd      	bne.n	8008d68 <_free_r+0x28>
 8008dac:	681c      	ldr	r4, [r3, #0]
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	6053      	str	r3, [r2, #4]
 8008db2:	4421      	add	r1, r4
 8008db4:	6011      	str	r1, [r2, #0]
 8008db6:	e7d7      	b.n	8008d68 <_free_r+0x28>
 8008db8:	d902      	bls.n	8008dc0 <_free_r+0x80>
 8008dba:	230c      	movs	r3, #12
 8008dbc:	6003      	str	r3, [r0, #0]
 8008dbe:	e7d3      	b.n	8008d68 <_free_r+0x28>
 8008dc0:	6825      	ldr	r5, [r4, #0]
 8008dc2:	1961      	adds	r1, r4, r5
 8008dc4:	428b      	cmp	r3, r1
 8008dc6:	bf04      	itt	eq
 8008dc8:	6819      	ldreq	r1, [r3, #0]
 8008dca:	685b      	ldreq	r3, [r3, #4]
 8008dcc:	6063      	str	r3, [r4, #4]
 8008dce:	bf04      	itt	eq
 8008dd0:	1949      	addeq	r1, r1, r5
 8008dd2:	6021      	streq	r1, [r4, #0]
 8008dd4:	6054      	str	r4, [r2, #4]
 8008dd6:	e7c7      	b.n	8008d68 <_free_r+0x28>
 8008dd8:	b003      	add	sp, #12
 8008dda:	bd30      	pop	{r4, r5, pc}
 8008ddc:	20000218 	.word	0x20000218

08008de0 <_malloc_r>:
 8008de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008de2:	1ccd      	adds	r5, r1, #3
 8008de4:	f025 0503 	bic.w	r5, r5, #3
 8008de8:	3508      	adds	r5, #8
 8008dea:	2d0c      	cmp	r5, #12
 8008dec:	bf38      	it	cc
 8008dee:	250c      	movcc	r5, #12
 8008df0:	2d00      	cmp	r5, #0
 8008df2:	4606      	mov	r6, r0
 8008df4:	db01      	blt.n	8008dfa <_malloc_r+0x1a>
 8008df6:	42a9      	cmp	r1, r5
 8008df8:	d903      	bls.n	8008e02 <_malloc_r+0x22>
 8008dfa:	230c      	movs	r3, #12
 8008dfc:	6033      	str	r3, [r6, #0]
 8008dfe:	2000      	movs	r0, #0
 8008e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e02:	f001 fc91 	bl	800a728 <__malloc_lock>
 8008e06:	4921      	ldr	r1, [pc, #132]	; (8008e8c <_malloc_r+0xac>)
 8008e08:	680a      	ldr	r2, [r1, #0]
 8008e0a:	4614      	mov	r4, r2
 8008e0c:	b99c      	cbnz	r4, 8008e36 <_malloc_r+0x56>
 8008e0e:	4f20      	ldr	r7, [pc, #128]	; (8008e90 <_malloc_r+0xb0>)
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	b923      	cbnz	r3, 8008e1e <_malloc_r+0x3e>
 8008e14:	4621      	mov	r1, r4
 8008e16:	4630      	mov	r0, r6
 8008e18:	f000 fcbe 	bl	8009798 <_sbrk_r>
 8008e1c:	6038      	str	r0, [r7, #0]
 8008e1e:	4629      	mov	r1, r5
 8008e20:	4630      	mov	r0, r6
 8008e22:	f000 fcb9 	bl	8009798 <_sbrk_r>
 8008e26:	1c43      	adds	r3, r0, #1
 8008e28:	d123      	bne.n	8008e72 <_malloc_r+0x92>
 8008e2a:	230c      	movs	r3, #12
 8008e2c:	6033      	str	r3, [r6, #0]
 8008e2e:	4630      	mov	r0, r6
 8008e30:	f001 fc80 	bl	800a734 <__malloc_unlock>
 8008e34:	e7e3      	b.n	8008dfe <_malloc_r+0x1e>
 8008e36:	6823      	ldr	r3, [r4, #0]
 8008e38:	1b5b      	subs	r3, r3, r5
 8008e3a:	d417      	bmi.n	8008e6c <_malloc_r+0x8c>
 8008e3c:	2b0b      	cmp	r3, #11
 8008e3e:	d903      	bls.n	8008e48 <_malloc_r+0x68>
 8008e40:	6023      	str	r3, [r4, #0]
 8008e42:	441c      	add	r4, r3
 8008e44:	6025      	str	r5, [r4, #0]
 8008e46:	e004      	b.n	8008e52 <_malloc_r+0x72>
 8008e48:	6863      	ldr	r3, [r4, #4]
 8008e4a:	42a2      	cmp	r2, r4
 8008e4c:	bf0c      	ite	eq
 8008e4e:	600b      	streq	r3, [r1, #0]
 8008e50:	6053      	strne	r3, [r2, #4]
 8008e52:	4630      	mov	r0, r6
 8008e54:	f001 fc6e 	bl	800a734 <__malloc_unlock>
 8008e58:	f104 000b 	add.w	r0, r4, #11
 8008e5c:	1d23      	adds	r3, r4, #4
 8008e5e:	f020 0007 	bic.w	r0, r0, #7
 8008e62:	1ac2      	subs	r2, r0, r3
 8008e64:	d0cc      	beq.n	8008e00 <_malloc_r+0x20>
 8008e66:	1a1b      	subs	r3, r3, r0
 8008e68:	50a3      	str	r3, [r4, r2]
 8008e6a:	e7c9      	b.n	8008e00 <_malloc_r+0x20>
 8008e6c:	4622      	mov	r2, r4
 8008e6e:	6864      	ldr	r4, [r4, #4]
 8008e70:	e7cc      	b.n	8008e0c <_malloc_r+0x2c>
 8008e72:	1cc4      	adds	r4, r0, #3
 8008e74:	f024 0403 	bic.w	r4, r4, #3
 8008e78:	42a0      	cmp	r0, r4
 8008e7a:	d0e3      	beq.n	8008e44 <_malloc_r+0x64>
 8008e7c:	1a21      	subs	r1, r4, r0
 8008e7e:	4630      	mov	r0, r6
 8008e80:	f000 fc8a 	bl	8009798 <_sbrk_r>
 8008e84:	3001      	adds	r0, #1
 8008e86:	d1dd      	bne.n	8008e44 <_malloc_r+0x64>
 8008e88:	e7cf      	b.n	8008e2a <_malloc_r+0x4a>
 8008e8a:	bf00      	nop
 8008e8c:	20000218 	.word	0x20000218
 8008e90:	2000021c 	.word	0x2000021c

08008e94 <__cvt>:
 8008e94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e98:	ec55 4b10 	vmov	r4, r5, d0
 8008e9c:	2d00      	cmp	r5, #0
 8008e9e:	460e      	mov	r6, r1
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	462b      	mov	r3, r5
 8008ea4:	bfbb      	ittet	lt
 8008ea6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008eaa:	461d      	movlt	r5, r3
 8008eac:	2300      	movge	r3, #0
 8008eae:	232d      	movlt	r3, #45	; 0x2d
 8008eb0:	700b      	strb	r3, [r1, #0]
 8008eb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008eb4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008eb8:	4691      	mov	r9, r2
 8008eba:	f023 0820 	bic.w	r8, r3, #32
 8008ebe:	bfbc      	itt	lt
 8008ec0:	4622      	movlt	r2, r4
 8008ec2:	4614      	movlt	r4, r2
 8008ec4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008ec8:	d005      	beq.n	8008ed6 <__cvt+0x42>
 8008eca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008ece:	d100      	bne.n	8008ed2 <__cvt+0x3e>
 8008ed0:	3601      	adds	r6, #1
 8008ed2:	2102      	movs	r1, #2
 8008ed4:	e000      	b.n	8008ed8 <__cvt+0x44>
 8008ed6:	2103      	movs	r1, #3
 8008ed8:	ab03      	add	r3, sp, #12
 8008eda:	9301      	str	r3, [sp, #4]
 8008edc:	ab02      	add	r3, sp, #8
 8008ede:	9300      	str	r3, [sp, #0]
 8008ee0:	ec45 4b10 	vmov	d0, r4, r5
 8008ee4:	4653      	mov	r3, sl
 8008ee6:	4632      	mov	r2, r6
 8008ee8:	f000 fd26 	bl	8009938 <_dtoa_r>
 8008eec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008ef0:	4607      	mov	r7, r0
 8008ef2:	d102      	bne.n	8008efa <__cvt+0x66>
 8008ef4:	f019 0f01 	tst.w	r9, #1
 8008ef8:	d022      	beq.n	8008f40 <__cvt+0xac>
 8008efa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008efe:	eb07 0906 	add.w	r9, r7, r6
 8008f02:	d110      	bne.n	8008f26 <__cvt+0x92>
 8008f04:	783b      	ldrb	r3, [r7, #0]
 8008f06:	2b30      	cmp	r3, #48	; 0x30
 8008f08:	d10a      	bne.n	8008f20 <__cvt+0x8c>
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	4620      	mov	r0, r4
 8008f10:	4629      	mov	r1, r5
 8008f12:	f7f7 fdd9 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f16:	b918      	cbnz	r0, 8008f20 <__cvt+0x8c>
 8008f18:	f1c6 0601 	rsb	r6, r6, #1
 8008f1c:	f8ca 6000 	str.w	r6, [sl]
 8008f20:	f8da 3000 	ldr.w	r3, [sl]
 8008f24:	4499      	add	r9, r3
 8008f26:	2200      	movs	r2, #0
 8008f28:	2300      	movs	r3, #0
 8008f2a:	4620      	mov	r0, r4
 8008f2c:	4629      	mov	r1, r5
 8008f2e:	f7f7 fdcb 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f32:	b108      	cbz	r0, 8008f38 <__cvt+0xa4>
 8008f34:	f8cd 900c 	str.w	r9, [sp, #12]
 8008f38:	2230      	movs	r2, #48	; 0x30
 8008f3a:	9b03      	ldr	r3, [sp, #12]
 8008f3c:	454b      	cmp	r3, r9
 8008f3e:	d307      	bcc.n	8008f50 <__cvt+0xbc>
 8008f40:	9b03      	ldr	r3, [sp, #12]
 8008f42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f44:	1bdb      	subs	r3, r3, r7
 8008f46:	4638      	mov	r0, r7
 8008f48:	6013      	str	r3, [r2, #0]
 8008f4a:	b004      	add	sp, #16
 8008f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f50:	1c59      	adds	r1, r3, #1
 8008f52:	9103      	str	r1, [sp, #12]
 8008f54:	701a      	strb	r2, [r3, #0]
 8008f56:	e7f0      	b.n	8008f3a <__cvt+0xa6>

08008f58 <__exponent>:
 8008f58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	2900      	cmp	r1, #0
 8008f5e:	bfb8      	it	lt
 8008f60:	4249      	neglt	r1, r1
 8008f62:	f803 2b02 	strb.w	r2, [r3], #2
 8008f66:	bfb4      	ite	lt
 8008f68:	222d      	movlt	r2, #45	; 0x2d
 8008f6a:	222b      	movge	r2, #43	; 0x2b
 8008f6c:	2909      	cmp	r1, #9
 8008f6e:	7042      	strb	r2, [r0, #1]
 8008f70:	dd2a      	ble.n	8008fc8 <__exponent+0x70>
 8008f72:	f10d 0407 	add.w	r4, sp, #7
 8008f76:	46a4      	mov	ip, r4
 8008f78:	270a      	movs	r7, #10
 8008f7a:	46a6      	mov	lr, r4
 8008f7c:	460a      	mov	r2, r1
 8008f7e:	fb91 f6f7 	sdiv	r6, r1, r7
 8008f82:	fb07 1516 	mls	r5, r7, r6, r1
 8008f86:	3530      	adds	r5, #48	; 0x30
 8008f88:	2a63      	cmp	r2, #99	; 0x63
 8008f8a:	f104 34ff 	add.w	r4, r4, #4294967295
 8008f8e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008f92:	4631      	mov	r1, r6
 8008f94:	dcf1      	bgt.n	8008f7a <__exponent+0x22>
 8008f96:	3130      	adds	r1, #48	; 0x30
 8008f98:	f1ae 0502 	sub.w	r5, lr, #2
 8008f9c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008fa0:	1c44      	adds	r4, r0, #1
 8008fa2:	4629      	mov	r1, r5
 8008fa4:	4561      	cmp	r1, ip
 8008fa6:	d30a      	bcc.n	8008fbe <__exponent+0x66>
 8008fa8:	f10d 0209 	add.w	r2, sp, #9
 8008fac:	eba2 020e 	sub.w	r2, r2, lr
 8008fb0:	4565      	cmp	r5, ip
 8008fb2:	bf88      	it	hi
 8008fb4:	2200      	movhi	r2, #0
 8008fb6:	4413      	add	r3, r2
 8008fb8:	1a18      	subs	r0, r3, r0
 8008fba:	b003      	add	sp, #12
 8008fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008fc2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008fc6:	e7ed      	b.n	8008fa4 <__exponent+0x4c>
 8008fc8:	2330      	movs	r3, #48	; 0x30
 8008fca:	3130      	adds	r1, #48	; 0x30
 8008fcc:	7083      	strb	r3, [r0, #2]
 8008fce:	70c1      	strb	r1, [r0, #3]
 8008fd0:	1d03      	adds	r3, r0, #4
 8008fd2:	e7f1      	b.n	8008fb8 <__exponent+0x60>

08008fd4 <_printf_float>:
 8008fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fd8:	ed2d 8b02 	vpush	{d8}
 8008fdc:	b08d      	sub	sp, #52	; 0x34
 8008fde:	460c      	mov	r4, r1
 8008fe0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008fe4:	4616      	mov	r6, r2
 8008fe6:	461f      	mov	r7, r3
 8008fe8:	4605      	mov	r5, r0
 8008fea:	f001 fb87 	bl	800a6fc <_localeconv_r>
 8008fee:	f8d0 a000 	ldr.w	sl, [r0]
 8008ff2:	4650      	mov	r0, sl
 8008ff4:	f7f7 f8ec 	bl	80001d0 <strlen>
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	930a      	str	r3, [sp, #40]	; 0x28
 8008ffc:	6823      	ldr	r3, [r4, #0]
 8008ffe:	9305      	str	r3, [sp, #20]
 8009000:	f8d8 3000 	ldr.w	r3, [r8]
 8009004:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009008:	3307      	adds	r3, #7
 800900a:	f023 0307 	bic.w	r3, r3, #7
 800900e:	f103 0208 	add.w	r2, r3, #8
 8009012:	f8c8 2000 	str.w	r2, [r8]
 8009016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800901a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800901e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009022:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009026:	9307      	str	r3, [sp, #28]
 8009028:	f8cd 8018 	str.w	r8, [sp, #24]
 800902c:	ee08 0a10 	vmov	s16, r0
 8009030:	4b9f      	ldr	r3, [pc, #636]	; (80092b0 <_printf_float+0x2dc>)
 8009032:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009036:	f04f 32ff 	mov.w	r2, #4294967295
 800903a:	f7f7 fd77 	bl	8000b2c <__aeabi_dcmpun>
 800903e:	bb88      	cbnz	r0, 80090a4 <_printf_float+0xd0>
 8009040:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009044:	4b9a      	ldr	r3, [pc, #616]	; (80092b0 <_printf_float+0x2dc>)
 8009046:	f04f 32ff 	mov.w	r2, #4294967295
 800904a:	f7f7 fd51 	bl	8000af0 <__aeabi_dcmple>
 800904e:	bb48      	cbnz	r0, 80090a4 <_printf_float+0xd0>
 8009050:	2200      	movs	r2, #0
 8009052:	2300      	movs	r3, #0
 8009054:	4640      	mov	r0, r8
 8009056:	4649      	mov	r1, r9
 8009058:	f7f7 fd40 	bl	8000adc <__aeabi_dcmplt>
 800905c:	b110      	cbz	r0, 8009064 <_printf_float+0x90>
 800905e:	232d      	movs	r3, #45	; 0x2d
 8009060:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009064:	4b93      	ldr	r3, [pc, #588]	; (80092b4 <_printf_float+0x2e0>)
 8009066:	4894      	ldr	r0, [pc, #592]	; (80092b8 <_printf_float+0x2e4>)
 8009068:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800906c:	bf94      	ite	ls
 800906e:	4698      	movls	r8, r3
 8009070:	4680      	movhi	r8, r0
 8009072:	2303      	movs	r3, #3
 8009074:	6123      	str	r3, [r4, #16]
 8009076:	9b05      	ldr	r3, [sp, #20]
 8009078:	f023 0204 	bic.w	r2, r3, #4
 800907c:	6022      	str	r2, [r4, #0]
 800907e:	f04f 0900 	mov.w	r9, #0
 8009082:	9700      	str	r7, [sp, #0]
 8009084:	4633      	mov	r3, r6
 8009086:	aa0b      	add	r2, sp, #44	; 0x2c
 8009088:	4621      	mov	r1, r4
 800908a:	4628      	mov	r0, r5
 800908c:	f000 f9d8 	bl	8009440 <_printf_common>
 8009090:	3001      	adds	r0, #1
 8009092:	f040 8090 	bne.w	80091b6 <_printf_float+0x1e2>
 8009096:	f04f 30ff 	mov.w	r0, #4294967295
 800909a:	b00d      	add	sp, #52	; 0x34
 800909c:	ecbd 8b02 	vpop	{d8}
 80090a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090a4:	4642      	mov	r2, r8
 80090a6:	464b      	mov	r3, r9
 80090a8:	4640      	mov	r0, r8
 80090aa:	4649      	mov	r1, r9
 80090ac:	f7f7 fd3e 	bl	8000b2c <__aeabi_dcmpun>
 80090b0:	b140      	cbz	r0, 80090c4 <_printf_float+0xf0>
 80090b2:	464b      	mov	r3, r9
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	bfbc      	itt	lt
 80090b8:	232d      	movlt	r3, #45	; 0x2d
 80090ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80090be:	487f      	ldr	r0, [pc, #508]	; (80092bc <_printf_float+0x2e8>)
 80090c0:	4b7f      	ldr	r3, [pc, #508]	; (80092c0 <_printf_float+0x2ec>)
 80090c2:	e7d1      	b.n	8009068 <_printf_float+0x94>
 80090c4:	6863      	ldr	r3, [r4, #4]
 80090c6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80090ca:	9206      	str	r2, [sp, #24]
 80090cc:	1c5a      	adds	r2, r3, #1
 80090ce:	d13f      	bne.n	8009150 <_printf_float+0x17c>
 80090d0:	2306      	movs	r3, #6
 80090d2:	6063      	str	r3, [r4, #4]
 80090d4:	9b05      	ldr	r3, [sp, #20]
 80090d6:	6861      	ldr	r1, [r4, #4]
 80090d8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80090dc:	2300      	movs	r3, #0
 80090de:	9303      	str	r3, [sp, #12]
 80090e0:	ab0a      	add	r3, sp, #40	; 0x28
 80090e2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80090e6:	ab09      	add	r3, sp, #36	; 0x24
 80090e8:	ec49 8b10 	vmov	d0, r8, r9
 80090ec:	9300      	str	r3, [sp, #0]
 80090ee:	6022      	str	r2, [r4, #0]
 80090f0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80090f4:	4628      	mov	r0, r5
 80090f6:	f7ff fecd 	bl	8008e94 <__cvt>
 80090fa:	9b06      	ldr	r3, [sp, #24]
 80090fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80090fe:	2b47      	cmp	r3, #71	; 0x47
 8009100:	4680      	mov	r8, r0
 8009102:	d108      	bne.n	8009116 <_printf_float+0x142>
 8009104:	1cc8      	adds	r0, r1, #3
 8009106:	db02      	blt.n	800910e <_printf_float+0x13a>
 8009108:	6863      	ldr	r3, [r4, #4]
 800910a:	4299      	cmp	r1, r3
 800910c:	dd41      	ble.n	8009192 <_printf_float+0x1be>
 800910e:	f1ab 0b02 	sub.w	fp, fp, #2
 8009112:	fa5f fb8b 	uxtb.w	fp, fp
 8009116:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800911a:	d820      	bhi.n	800915e <_printf_float+0x18a>
 800911c:	3901      	subs	r1, #1
 800911e:	465a      	mov	r2, fp
 8009120:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009124:	9109      	str	r1, [sp, #36]	; 0x24
 8009126:	f7ff ff17 	bl	8008f58 <__exponent>
 800912a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800912c:	1813      	adds	r3, r2, r0
 800912e:	2a01      	cmp	r2, #1
 8009130:	4681      	mov	r9, r0
 8009132:	6123      	str	r3, [r4, #16]
 8009134:	dc02      	bgt.n	800913c <_printf_float+0x168>
 8009136:	6822      	ldr	r2, [r4, #0]
 8009138:	07d2      	lsls	r2, r2, #31
 800913a:	d501      	bpl.n	8009140 <_printf_float+0x16c>
 800913c:	3301      	adds	r3, #1
 800913e:	6123      	str	r3, [r4, #16]
 8009140:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009144:	2b00      	cmp	r3, #0
 8009146:	d09c      	beq.n	8009082 <_printf_float+0xae>
 8009148:	232d      	movs	r3, #45	; 0x2d
 800914a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800914e:	e798      	b.n	8009082 <_printf_float+0xae>
 8009150:	9a06      	ldr	r2, [sp, #24]
 8009152:	2a47      	cmp	r2, #71	; 0x47
 8009154:	d1be      	bne.n	80090d4 <_printf_float+0x100>
 8009156:	2b00      	cmp	r3, #0
 8009158:	d1bc      	bne.n	80090d4 <_printf_float+0x100>
 800915a:	2301      	movs	r3, #1
 800915c:	e7b9      	b.n	80090d2 <_printf_float+0xfe>
 800915e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009162:	d118      	bne.n	8009196 <_printf_float+0x1c2>
 8009164:	2900      	cmp	r1, #0
 8009166:	6863      	ldr	r3, [r4, #4]
 8009168:	dd0b      	ble.n	8009182 <_printf_float+0x1ae>
 800916a:	6121      	str	r1, [r4, #16]
 800916c:	b913      	cbnz	r3, 8009174 <_printf_float+0x1a0>
 800916e:	6822      	ldr	r2, [r4, #0]
 8009170:	07d0      	lsls	r0, r2, #31
 8009172:	d502      	bpl.n	800917a <_printf_float+0x1a6>
 8009174:	3301      	adds	r3, #1
 8009176:	440b      	add	r3, r1
 8009178:	6123      	str	r3, [r4, #16]
 800917a:	65a1      	str	r1, [r4, #88]	; 0x58
 800917c:	f04f 0900 	mov.w	r9, #0
 8009180:	e7de      	b.n	8009140 <_printf_float+0x16c>
 8009182:	b913      	cbnz	r3, 800918a <_printf_float+0x1b6>
 8009184:	6822      	ldr	r2, [r4, #0]
 8009186:	07d2      	lsls	r2, r2, #31
 8009188:	d501      	bpl.n	800918e <_printf_float+0x1ba>
 800918a:	3302      	adds	r3, #2
 800918c:	e7f4      	b.n	8009178 <_printf_float+0x1a4>
 800918e:	2301      	movs	r3, #1
 8009190:	e7f2      	b.n	8009178 <_printf_float+0x1a4>
 8009192:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009198:	4299      	cmp	r1, r3
 800919a:	db05      	blt.n	80091a8 <_printf_float+0x1d4>
 800919c:	6823      	ldr	r3, [r4, #0]
 800919e:	6121      	str	r1, [r4, #16]
 80091a0:	07d8      	lsls	r0, r3, #31
 80091a2:	d5ea      	bpl.n	800917a <_printf_float+0x1a6>
 80091a4:	1c4b      	adds	r3, r1, #1
 80091a6:	e7e7      	b.n	8009178 <_printf_float+0x1a4>
 80091a8:	2900      	cmp	r1, #0
 80091aa:	bfd4      	ite	le
 80091ac:	f1c1 0202 	rsble	r2, r1, #2
 80091b0:	2201      	movgt	r2, #1
 80091b2:	4413      	add	r3, r2
 80091b4:	e7e0      	b.n	8009178 <_printf_float+0x1a4>
 80091b6:	6823      	ldr	r3, [r4, #0]
 80091b8:	055a      	lsls	r2, r3, #21
 80091ba:	d407      	bmi.n	80091cc <_printf_float+0x1f8>
 80091bc:	6923      	ldr	r3, [r4, #16]
 80091be:	4642      	mov	r2, r8
 80091c0:	4631      	mov	r1, r6
 80091c2:	4628      	mov	r0, r5
 80091c4:	47b8      	blx	r7
 80091c6:	3001      	adds	r0, #1
 80091c8:	d12c      	bne.n	8009224 <_printf_float+0x250>
 80091ca:	e764      	b.n	8009096 <_printf_float+0xc2>
 80091cc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80091d0:	f240 80e0 	bls.w	8009394 <_printf_float+0x3c0>
 80091d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80091d8:	2200      	movs	r2, #0
 80091da:	2300      	movs	r3, #0
 80091dc:	f7f7 fc74 	bl	8000ac8 <__aeabi_dcmpeq>
 80091e0:	2800      	cmp	r0, #0
 80091e2:	d034      	beq.n	800924e <_printf_float+0x27a>
 80091e4:	4a37      	ldr	r2, [pc, #220]	; (80092c4 <_printf_float+0x2f0>)
 80091e6:	2301      	movs	r3, #1
 80091e8:	4631      	mov	r1, r6
 80091ea:	4628      	mov	r0, r5
 80091ec:	47b8      	blx	r7
 80091ee:	3001      	adds	r0, #1
 80091f0:	f43f af51 	beq.w	8009096 <_printf_float+0xc2>
 80091f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80091f8:	429a      	cmp	r2, r3
 80091fa:	db02      	blt.n	8009202 <_printf_float+0x22e>
 80091fc:	6823      	ldr	r3, [r4, #0]
 80091fe:	07d8      	lsls	r0, r3, #31
 8009200:	d510      	bpl.n	8009224 <_printf_float+0x250>
 8009202:	ee18 3a10 	vmov	r3, s16
 8009206:	4652      	mov	r2, sl
 8009208:	4631      	mov	r1, r6
 800920a:	4628      	mov	r0, r5
 800920c:	47b8      	blx	r7
 800920e:	3001      	adds	r0, #1
 8009210:	f43f af41 	beq.w	8009096 <_printf_float+0xc2>
 8009214:	f04f 0800 	mov.w	r8, #0
 8009218:	f104 091a 	add.w	r9, r4, #26
 800921c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800921e:	3b01      	subs	r3, #1
 8009220:	4543      	cmp	r3, r8
 8009222:	dc09      	bgt.n	8009238 <_printf_float+0x264>
 8009224:	6823      	ldr	r3, [r4, #0]
 8009226:	079b      	lsls	r3, r3, #30
 8009228:	f100 8105 	bmi.w	8009436 <_printf_float+0x462>
 800922c:	68e0      	ldr	r0, [r4, #12]
 800922e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009230:	4298      	cmp	r0, r3
 8009232:	bfb8      	it	lt
 8009234:	4618      	movlt	r0, r3
 8009236:	e730      	b.n	800909a <_printf_float+0xc6>
 8009238:	2301      	movs	r3, #1
 800923a:	464a      	mov	r2, r9
 800923c:	4631      	mov	r1, r6
 800923e:	4628      	mov	r0, r5
 8009240:	47b8      	blx	r7
 8009242:	3001      	adds	r0, #1
 8009244:	f43f af27 	beq.w	8009096 <_printf_float+0xc2>
 8009248:	f108 0801 	add.w	r8, r8, #1
 800924c:	e7e6      	b.n	800921c <_printf_float+0x248>
 800924e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009250:	2b00      	cmp	r3, #0
 8009252:	dc39      	bgt.n	80092c8 <_printf_float+0x2f4>
 8009254:	4a1b      	ldr	r2, [pc, #108]	; (80092c4 <_printf_float+0x2f0>)
 8009256:	2301      	movs	r3, #1
 8009258:	4631      	mov	r1, r6
 800925a:	4628      	mov	r0, r5
 800925c:	47b8      	blx	r7
 800925e:	3001      	adds	r0, #1
 8009260:	f43f af19 	beq.w	8009096 <_printf_float+0xc2>
 8009264:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009268:	4313      	orrs	r3, r2
 800926a:	d102      	bne.n	8009272 <_printf_float+0x29e>
 800926c:	6823      	ldr	r3, [r4, #0]
 800926e:	07d9      	lsls	r1, r3, #31
 8009270:	d5d8      	bpl.n	8009224 <_printf_float+0x250>
 8009272:	ee18 3a10 	vmov	r3, s16
 8009276:	4652      	mov	r2, sl
 8009278:	4631      	mov	r1, r6
 800927a:	4628      	mov	r0, r5
 800927c:	47b8      	blx	r7
 800927e:	3001      	adds	r0, #1
 8009280:	f43f af09 	beq.w	8009096 <_printf_float+0xc2>
 8009284:	f04f 0900 	mov.w	r9, #0
 8009288:	f104 0a1a 	add.w	sl, r4, #26
 800928c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800928e:	425b      	negs	r3, r3
 8009290:	454b      	cmp	r3, r9
 8009292:	dc01      	bgt.n	8009298 <_printf_float+0x2c4>
 8009294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009296:	e792      	b.n	80091be <_printf_float+0x1ea>
 8009298:	2301      	movs	r3, #1
 800929a:	4652      	mov	r2, sl
 800929c:	4631      	mov	r1, r6
 800929e:	4628      	mov	r0, r5
 80092a0:	47b8      	blx	r7
 80092a2:	3001      	adds	r0, #1
 80092a4:	f43f aef7 	beq.w	8009096 <_printf_float+0xc2>
 80092a8:	f109 0901 	add.w	r9, r9, #1
 80092ac:	e7ee      	b.n	800928c <_printf_float+0x2b8>
 80092ae:	bf00      	nop
 80092b0:	7fefffff 	.word	0x7fefffff
 80092b4:	0800c05c 	.word	0x0800c05c
 80092b8:	0800c060 	.word	0x0800c060
 80092bc:	0800c068 	.word	0x0800c068
 80092c0:	0800c064 	.word	0x0800c064
 80092c4:	0800c06c 	.word	0x0800c06c
 80092c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80092ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80092cc:	429a      	cmp	r2, r3
 80092ce:	bfa8      	it	ge
 80092d0:	461a      	movge	r2, r3
 80092d2:	2a00      	cmp	r2, #0
 80092d4:	4691      	mov	r9, r2
 80092d6:	dc37      	bgt.n	8009348 <_printf_float+0x374>
 80092d8:	f04f 0b00 	mov.w	fp, #0
 80092dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80092e0:	f104 021a 	add.w	r2, r4, #26
 80092e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80092e6:	9305      	str	r3, [sp, #20]
 80092e8:	eba3 0309 	sub.w	r3, r3, r9
 80092ec:	455b      	cmp	r3, fp
 80092ee:	dc33      	bgt.n	8009358 <_printf_float+0x384>
 80092f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80092f4:	429a      	cmp	r2, r3
 80092f6:	db3b      	blt.n	8009370 <_printf_float+0x39c>
 80092f8:	6823      	ldr	r3, [r4, #0]
 80092fa:	07da      	lsls	r2, r3, #31
 80092fc:	d438      	bmi.n	8009370 <_printf_float+0x39c>
 80092fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009300:	9b05      	ldr	r3, [sp, #20]
 8009302:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009304:	1ad3      	subs	r3, r2, r3
 8009306:	eba2 0901 	sub.w	r9, r2, r1
 800930a:	4599      	cmp	r9, r3
 800930c:	bfa8      	it	ge
 800930e:	4699      	movge	r9, r3
 8009310:	f1b9 0f00 	cmp.w	r9, #0
 8009314:	dc35      	bgt.n	8009382 <_printf_float+0x3ae>
 8009316:	f04f 0800 	mov.w	r8, #0
 800931a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800931e:	f104 0a1a 	add.w	sl, r4, #26
 8009322:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009326:	1a9b      	subs	r3, r3, r2
 8009328:	eba3 0309 	sub.w	r3, r3, r9
 800932c:	4543      	cmp	r3, r8
 800932e:	f77f af79 	ble.w	8009224 <_printf_float+0x250>
 8009332:	2301      	movs	r3, #1
 8009334:	4652      	mov	r2, sl
 8009336:	4631      	mov	r1, r6
 8009338:	4628      	mov	r0, r5
 800933a:	47b8      	blx	r7
 800933c:	3001      	adds	r0, #1
 800933e:	f43f aeaa 	beq.w	8009096 <_printf_float+0xc2>
 8009342:	f108 0801 	add.w	r8, r8, #1
 8009346:	e7ec      	b.n	8009322 <_printf_float+0x34e>
 8009348:	4613      	mov	r3, r2
 800934a:	4631      	mov	r1, r6
 800934c:	4642      	mov	r2, r8
 800934e:	4628      	mov	r0, r5
 8009350:	47b8      	blx	r7
 8009352:	3001      	adds	r0, #1
 8009354:	d1c0      	bne.n	80092d8 <_printf_float+0x304>
 8009356:	e69e      	b.n	8009096 <_printf_float+0xc2>
 8009358:	2301      	movs	r3, #1
 800935a:	4631      	mov	r1, r6
 800935c:	4628      	mov	r0, r5
 800935e:	9205      	str	r2, [sp, #20]
 8009360:	47b8      	blx	r7
 8009362:	3001      	adds	r0, #1
 8009364:	f43f ae97 	beq.w	8009096 <_printf_float+0xc2>
 8009368:	9a05      	ldr	r2, [sp, #20]
 800936a:	f10b 0b01 	add.w	fp, fp, #1
 800936e:	e7b9      	b.n	80092e4 <_printf_float+0x310>
 8009370:	ee18 3a10 	vmov	r3, s16
 8009374:	4652      	mov	r2, sl
 8009376:	4631      	mov	r1, r6
 8009378:	4628      	mov	r0, r5
 800937a:	47b8      	blx	r7
 800937c:	3001      	adds	r0, #1
 800937e:	d1be      	bne.n	80092fe <_printf_float+0x32a>
 8009380:	e689      	b.n	8009096 <_printf_float+0xc2>
 8009382:	9a05      	ldr	r2, [sp, #20]
 8009384:	464b      	mov	r3, r9
 8009386:	4442      	add	r2, r8
 8009388:	4631      	mov	r1, r6
 800938a:	4628      	mov	r0, r5
 800938c:	47b8      	blx	r7
 800938e:	3001      	adds	r0, #1
 8009390:	d1c1      	bne.n	8009316 <_printf_float+0x342>
 8009392:	e680      	b.n	8009096 <_printf_float+0xc2>
 8009394:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009396:	2a01      	cmp	r2, #1
 8009398:	dc01      	bgt.n	800939e <_printf_float+0x3ca>
 800939a:	07db      	lsls	r3, r3, #31
 800939c:	d538      	bpl.n	8009410 <_printf_float+0x43c>
 800939e:	2301      	movs	r3, #1
 80093a0:	4642      	mov	r2, r8
 80093a2:	4631      	mov	r1, r6
 80093a4:	4628      	mov	r0, r5
 80093a6:	47b8      	blx	r7
 80093a8:	3001      	adds	r0, #1
 80093aa:	f43f ae74 	beq.w	8009096 <_printf_float+0xc2>
 80093ae:	ee18 3a10 	vmov	r3, s16
 80093b2:	4652      	mov	r2, sl
 80093b4:	4631      	mov	r1, r6
 80093b6:	4628      	mov	r0, r5
 80093b8:	47b8      	blx	r7
 80093ba:	3001      	adds	r0, #1
 80093bc:	f43f ae6b 	beq.w	8009096 <_printf_float+0xc2>
 80093c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80093c4:	2200      	movs	r2, #0
 80093c6:	2300      	movs	r3, #0
 80093c8:	f7f7 fb7e 	bl	8000ac8 <__aeabi_dcmpeq>
 80093cc:	b9d8      	cbnz	r0, 8009406 <_printf_float+0x432>
 80093ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093d0:	f108 0201 	add.w	r2, r8, #1
 80093d4:	3b01      	subs	r3, #1
 80093d6:	4631      	mov	r1, r6
 80093d8:	4628      	mov	r0, r5
 80093da:	47b8      	blx	r7
 80093dc:	3001      	adds	r0, #1
 80093de:	d10e      	bne.n	80093fe <_printf_float+0x42a>
 80093e0:	e659      	b.n	8009096 <_printf_float+0xc2>
 80093e2:	2301      	movs	r3, #1
 80093e4:	4652      	mov	r2, sl
 80093e6:	4631      	mov	r1, r6
 80093e8:	4628      	mov	r0, r5
 80093ea:	47b8      	blx	r7
 80093ec:	3001      	adds	r0, #1
 80093ee:	f43f ae52 	beq.w	8009096 <_printf_float+0xc2>
 80093f2:	f108 0801 	add.w	r8, r8, #1
 80093f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093f8:	3b01      	subs	r3, #1
 80093fa:	4543      	cmp	r3, r8
 80093fc:	dcf1      	bgt.n	80093e2 <_printf_float+0x40e>
 80093fe:	464b      	mov	r3, r9
 8009400:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009404:	e6dc      	b.n	80091c0 <_printf_float+0x1ec>
 8009406:	f04f 0800 	mov.w	r8, #0
 800940a:	f104 0a1a 	add.w	sl, r4, #26
 800940e:	e7f2      	b.n	80093f6 <_printf_float+0x422>
 8009410:	2301      	movs	r3, #1
 8009412:	4642      	mov	r2, r8
 8009414:	e7df      	b.n	80093d6 <_printf_float+0x402>
 8009416:	2301      	movs	r3, #1
 8009418:	464a      	mov	r2, r9
 800941a:	4631      	mov	r1, r6
 800941c:	4628      	mov	r0, r5
 800941e:	47b8      	blx	r7
 8009420:	3001      	adds	r0, #1
 8009422:	f43f ae38 	beq.w	8009096 <_printf_float+0xc2>
 8009426:	f108 0801 	add.w	r8, r8, #1
 800942a:	68e3      	ldr	r3, [r4, #12]
 800942c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800942e:	1a5b      	subs	r3, r3, r1
 8009430:	4543      	cmp	r3, r8
 8009432:	dcf0      	bgt.n	8009416 <_printf_float+0x442>
 8009434:	e6fa      	b.n	800922c <_printf_float+0x258>
 8009436:	f04f 0800 	mov.w	r8, #0
 800943a:	f104 0919 	add.w	r9, r4, #25
 800943e:	e7f4      	b.n	800942a <_printf_float+0x456>

08009440 <_printf_common>:
 8009440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009444:	4616      	mov	r6, r2
 8009446:	4699      	mov	r9, r3
 8009448:	688a      	ldr	r2, [r1, #8]
 800944a:	690b      	ldr	r3, [r1, #16]
 800944c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009450:	4293      	cmp	r3, r2
 8009452:	bfb8      	it	lt
 8009454:	4613      	movlt	r3, r2
 8009456:	6033      	str	r3, [r6, #0]
 8009458:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800945c:	4607      	mov	r7, r0
 800945e:	460c      	mov	r4, r1
 8009460:	b10a      	cbz	r2, 8009466 <_printf_common+0x26>
 8009462:	3301      	adds	r3, #1
 8009464:	6033      	str	r3, [r6, #0]
 8009466:	6823      	ldr	r3, [r4, #0]
 8009468:	0699      	lsls	r1, r3, #26
 800946a:	bf42      	ittt	mi
 800946c:	6833      	ldrmi	r3, [r6, #0]
 800946e:	3302      	addmi	r3, #2
 8009470:	6033      	strmi	r3, [r6, #0]
 8009472:	6825      	ldr	r5, [r4, #0]
 8009474:	f015 0506 	ands.w	r5, r5, #6
 8009478:	d106      	bne.n	8009488 <_printf_common+0x48>
 800947a:	f104 0a19 	add.w	sl, r4, #25
 800947e:	68e3      	ldr	r3, [r4, #12]
 8009480:	6832      	ldr	r2, [r6, #0]
 8009482:	1a9b      	subs	r3, r3, r2
 8009484:	42ab      	cmp	r3, r5
 8009486:	dc26      	bgt.n	80094d6 <_printf_common+0x96>
 8009488:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800948c:	1e13      	subs	r3, r2, #0
 800948e:	6822      	ldr	r2, [r4, #0]
 8009490:	bf18      	it	ne
 8009492:	2301      	movne	r3, #1
 8009494:	0692      	lsls	r2, r2, #26
 8009496:	d42b      	bmi.n	80094f0 <_printf_common+0xb0>
 8009498:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800949c:	4649      	mov	r1, r9
 800949e:	4638      	mov	r0, r7
 80094a0:	47c0      	blx	r8
 80094a2:	3001      	adds	r0, #1
 80094a4:	d01e      	beq.n	80094e4 <_printf_common+0xa4>
 80094a6:	6823      	ldr	r3, [r4, #0]
 80094a8:	68e5      	ldr	r5, [r4, #12]
 80094aa:	6832      	ldr	r2, [r6, #0]
 80094ac:	f003 0306 	and.w	r3, r3, #6
 80094b0:	2b04      	cmp	r3, #4
 80094b2:	bf08      	it	eq
 80094b4:	1aad      	subeq	r5, r5, r2
 80094b6:	68a3      	ldr	r3, [r4, #8]
 80094b8:	6922      	ldr	r2, [r4, #16]
 80094ba:	bf0c      	ite	eq
 80094bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80094c0:	2500      	movne	r5, #0
 80094c2:	4293      	cmp	r3, r2
 80094c4:	bfc4      	itt	gt
 80094c6:	1a9b      	subgt	r3, r3, r2
 80094c8:	18ed      	addgt	r5, r5, r3
 80094ca:	2600      	movs	r6, #0
 80094cc:	341a      	adds	r4, #26
 80094ce:	42b5      	cmp	r5, r6
 80094d0:	d11a      	bne.n	8009508 <_printf_common+0xc8>
 80094d2:	2000      	movs	r0, #0
 80094d4:	e008      	b.n	80094e8 <_printf_common+0xa8>
 80094d6:	2301      	movs	r3, #1
 80094d8:	4652      	mov	r2, sl
 80094da:	4649      	mov	r1, r9
 80094dc:	4638      	mov	r0, r7
 80094de:	47c0      	blx	r8
 80094e0:	3001      	adds	r0, #1
 80094e2:	d103      	bne.n	80094ec <_printf_common+0xac>
 80094e4:	f04f 30ff 	mov.w	r0, #4294967295
 80094e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094ec:	3501      	adds	r5, #1
 80094ee:	e7c6      	b.n	800947e <_printf_common+0x3e>
 80094f0:	18e1      	adds	r1, r4, r3
 80094f2:	1c5a      	adds	r2, r3, #1
 80094f4:	2030      	movs	r0, #48	; 0x30
 80094f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80094fa:	4422      	add	r2, r4
 80094fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009500:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009504:	3302      	adds	r3, #2
 8009506:	e7c7      	b.n	8009498 <_printf_common+0x58>
 8009508:	2301      	movs	r3, #1
 800950a:	4622      	mov	r2, r4
 800950c:	4649      	mov	r1, r9
 800950e:	4638      	mov	r0, r7
 8009510:	47c0      	blx	r8
 8009512:	3001      	adds	r0, #1
 8009514:	d0e6      	beq.n	80094e4 <_printf_common+0xa4>
 8009516:	3601      	adds	r6, #1
 8009518:	e7d9      	b.n	80094ce <_printf_common+0x8e>
	...

0800951c <_printf_i>:
 800951c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009520:	460c      	mov	r4, r1
 8009522:	4691      	mov	r9, r2
 8009524:	7e27      	ldrb	r7, [r4, #24]
 8009526:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009528:	2f78      	cmp	r7, #120	; 0x78
 800952a:	4680      	mov	r8, r0
 800952c:	469a      	mov	sl, r3
 800952e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009532:	d807      	bhi.n	8009544 <_printf_i+0x28>
 8009534:	2f62      	cmp	r7, #98	; 0x62
 8009536:	d80a      	bhi.n	800954e <_printf_i+0x32>
 8009538:	2f00      	cmp	r7, #0
 800953a:	f000 80d8 	beq.w	80096ee <_printf_i+0x1d2>
 800953e:	2f58      	cmp	r7, #88	; 0x58
 8009540:	f000 80a3 	beq.w	800968a <_printf_i+0x16e>
 8009544:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009548:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800954c:	e03a      	b.n	80095c4 <_printf_i+0xa8>
 800954e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009552:	2b15      	cmp	r3, #21
 8009554:	d8f6      	bhi.n	8009544 <_printf_i+0x28>
 8009556:	a001      	add	r0, pc, #4	; (adr r0, 800955c <_printf_i+0x40>)
 8009558:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800955c:	080095b5 	.word	0x080095b5
 8009560:	080095c9 	.word	0x080095c9
 8009564:	08009545 	.word	0x08009545
 8009568:	08009545 	.word	0x08009545
 800956c:	08009545 	.word	0x08009545
 8009570:	08009545 	.word	0x08009545
 8009574:	080095c9 	.word	0x080095c9
 8009578:	08009545 	.word	0x08009545
 800957c:	08009545 	.word	0x08009545
 8009580:	08009545 	.word	0x08009545
 8009584:	08009545 	.word	0x08009545
 8009588:	080096d5 	.word	0x080096d5
 800958c:	080095f9 	.word	0x080095f9
 8009590:	080096b7 	.word	0x080096b7
 8009594:	08009545 	.word	0x08009545
 8009598:	08009545 	.word	0x08009545
 800959c:	080096f7 	.word	0x080096f7
 80095a0:	08009545 	.word	0x08009545
 80095a4:	080095f9 	.word	0x080095f9
 80095a8:	08009545 	.word	0x08009545
 80095ac:	08009545 	.word	0x08009545
 80095b0:	080096bf 	.word	0x080096bf
 80095b4:	680b      	ldr	r3, [r1, #0]
 80095b6:	1d1a      	adds	r2, r3, #4
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	600a      	str	r2, [r1, #0]
 80095bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80095c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80095c4:	2301      	movs	r3, #1
 80095c6:	e0a3      	b.n	8009710 <_printf_i+0x1f4>
 80095c8:	6825      	ldr	r5, [r4, #0]
 80095ca:	6808      	ldr	r0, [r1, #0]
 80095cc:	062e      	lsls	r6, r5, #24
 80095ce:	f100 0304 	add.w	r3, r0, #4
 80095d2:	d50a      	bpl.n	80095ea <_printf_i+0xce>
 80095d4:	6805      	ldr	r5, [r0, #0]
 80095d6:	600b      	str	r3, [r1, #0]
 80095d8:	2d00      	cmp	r5, #0
 80095da:	da03      	bge.n	80095e4 <_printf_i+0xc8>
 80095dc:	232d      	movs	r3, #45	; 0x2d
 80095de:	426d      	negs	r5, r5
 80095e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095e4:	485e      	ldr	r0, [pc, #376]	; (8009760 <_printf_i+0x244>)
 80095e6:	230a      	movs	r3, #10
 80095e8:	e019      	b.n	800961e <_printf_i+0x102>
 80095ea:	f015 0f40 	tst.w	r5, #64	; 0x40
 80095ee:	6805      	ldr	r5, [r0, #0]
 80095f0:	600b      	str	r3, [r1, #0]
 80095f2:	bf18      	it	ne
 80095f4:	b22d      	sxthne	r5, r5
 80095f6:	e7ef      	b.n	80095d8 <_printf_i+0xbc>
 80095f8:	680b      	ldr	r3, [r1, #0]
 80095fa:	6825      	ldr	r5, [r4, #0]
 80095fc:	1d18      	adds	r0, r3, #4
 80095fe:	6008      	str	r0, [r1, #0]
 8009600:	0628      	lsls	r0, r5, #24
 8009602:	d501      	bpl.n	8009608 <_printf_i+0xec>
 8009604:	681d      	ldr	r5, [r3, #0]
 8009606:	e002      	b.n	800960e <_printf_i+0xf2>
 8009608:	0669      	lsls	r1, r5, #25
 800960a:	d5fb      	bpl.n	8009604 <_printf_i+0xe8>
 800960c:	881d      	ldrh	r5, [r3, #0]
 800960e:	4854      	ldr	r0, [pc, #336]	; (8009760 <_printf_i+0x244>)
 8009610:	2f6f      	cmp	r7, #111	; 0x6f
 8009612:	bf0c      	ite	eq
 8009614:	2308      	moveq	r3, #8
 8009616:	230a      	movne	r3, #10
 8009618:	2100      	movs	r1, #0
 800961a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800961e:	6866      	ldr	r6, [r4, #4]
 8009620:	60a6      	str	r6, [r4, #8]
 8009622:	2e00      	cmp	r6, #0
 8009624:	bfa2      	ittt	ge
 8009626:	6821      	ldrge	r1, [r4, #0]
 8009628:	f021 0104 	bicge.w	r1, r1, #4
 800962c:	6021      	strge	r1, [r4, #0]
 800962e:	b90d      	cbnz	r5, 8009634 <_printf_i+0x118>
 8009630:	2e00      	cmp	r6, #0
 8009632:	d04d      	beq.n	80096d0 <_printf_i+0x1b4>
 8009634:	4616      	mov	r6, r2
 8009636:	fbb5 f1f3 	udiv	r1, r5, r3
 800963a:	fb03 5711 	mls	r7, r3, r1, r5
 800963e:	5dc7      	ldrb	r7, [r0, r7]
 8009640:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009644:	462f      	mov	r7, r5
 8009646:	42bb      	cmp	r3, r7
 8009648:	460d      	mov	r5, r1
 800964a:	d9f4      	bls.n	8009636 <_printf_i+0x11a>
 800964c:	2b08      	cmp	r3, #8
 800964e:	d10b      	bne.n	8009668 <_printf_i+0x14c>
 8009650:	6823      	ldr	r3, [r4, #0]
 8009652:	07df      	lsls	r7, r3, #31
 8009654:	d508      	bpl.n	8009668 <_printf_i+0x14c>
 8009656:	6923      	ldr	r3, [r4, #16]
 8009658:	6861      	ldr	r1, [r4, #4]
 800965a:	4299      	cmp	r1, r3
 800965c:	bfde      	ittt	le
 800965e:	2330      	movle	r3, #48	; 0x30
 8009660:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009664:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009668:	1b92      	subs	r2, r2, r6
 800966a:	6122      	str	r2, [r4, #16]
 800966c:	f8cd a000 	str.w	sl, [sp]
 8009670:	464b      	mov	r3, r9
 8009672:	aa03      	add	r2, sp, #12
 8009674:	4621      	mov	r1, r4
 8009676:	4640      	mov	r0, r8
 8009678:	f7ff fee2 	bl	8009440 <_printf_common>
 800967c:	3001      	adds	r0, #1
 800967e:	d14c      	bne.n	800971a <_printf_i+0x1fe>
 8009680:	f04f 30ff 	mov.w	r0, #4294967295
 8009684:	b004      	add	sp, #16
 8009686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800968a:	4835      	ldr	r0, [pc, #212]	; (8009760 <_printf_i+0x244>)
 800968c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009690:	6823      	ldr	r3, [r4, #0]
 8009692:	680e      	ldr	r6, [r1, #0]
 8009694:	061f      	lsls	r7, r3, #24
 8009696:	f856 5b04 	ldr.w	r5, [r6], #4
 800969a:	600e      	str	r6, [r1, #0]
 800969c:	d514      	bpl.n	80096c8 <_printf_i+0x1ac>
 800969e:	07d9      	lsls	r1, r3, #31
 80096a0:	bf44      	itt	mi
 80096a2:	f043 0320 	orrmi.w	r3, r3, #32
 80096a6:	6023      	strmi	r3, [r4, #0]
 80096a8:	b91d      	cbnz	r5, 80096b2 <_printf_i+0x196>
 80096aa:	6823      	ldr	r3, [r4, #0]
 80096ac:	f023 0320 	bic.w	r3, r3, #32
 80096b0:	6023      	str	r3, [r4, #0]
 80096b2:	2310      	movs	r3, #16
 80096b4:	e7b0      	b.n	8009618 <_printf_i+0xfc>
 80096b6:	6823      	ldr	r3, [r4, #0]
 80096b8:	f043 0320 	orr.w	r3, r3, #32
 80096bc:	6023      	str	r3, [r4, #0]
 80096be:	2378      	movs	r3, #120	; 0x78
 80096c0:	4828      	ldr	r0, [pc, #160]	; (8009764 <_printf_i+0x248>)
 80096c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80096c6:	e7e3      	b.n	8009690 <_printf_i+0x174>
 80096c8:	065e      	lsls	r6, r3, #25
 80096ca:	bf48      	it	mi
 80096cc:	b2ad      	uxthmi	r5, r5
 80096ce:	e7e6      	b.n	800969e <_printf_i+0x182>
 80096d0:	4616      	mov	r6, r2
 80096d2:	e7bb      	b.n	800964c <_printf_i+0x130>
 80096d4:	680b      	ldr	r3, [r1, #0]
 80096d6:	6826      	ldr	r6, [r4, #0]
 80096d8:	6960      	ldr	r0, [r4, #20]
 80096da:	1d1d      	adds	r5, r3, #4
 80096dc:	600d      	str	r5, [r1, #0]
 80096de:	0635      	lsls	r5, r6, #24
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	d501      	bpl.n	80096e8 <_printf_i+0x1cc>
 80096e4:	6018      	str	r0, [r3, #0]
 80096e6:	e002      	b.n	80096ee <_printf_i+0x1d2>
 80096e8:	0671      	lsls	r1, r6, #25
 80096ea:	d5fb      	bpl.n	80096e4 <_printf_i+0x1c8>
 80096ec:	8018      	strh	r0, [r3, #0]
 80096ee:	2300      	movs	r3, #0
 80096f0:	6123      	str	r3, [r4, #16]
 80096f2:	4616      	mov	r6, r2
 80096f4:	e7ba      	b.n	800966c <_printf_i+0x150>
 80096f6:	680b      	ldr	r3, [r1, #0]
 80096f8:	1d1a      	adds	r2, r3, #4
 80096fa:	600a      	str	r2, [r1, #0]
 80096fc:	681e      	ldr	r6, [r3, #0]
 80096fe:	6862      	ldr	r2, [r4, #4]
 8009700:	2100      	movs	r1, #0
 8009702:	4630      	mov	r0, r6
 8009704:	f7f6 fd6c 	bl	80001e0 <memchr>
 8009708:	b108      	cbz	r0, 800970e <_printf_i+0x1f2>
 800970a:	1b80      	subs	r0, r0, r6
 800970c:	6060      	str	r0, [r4, #4]
 800970e:	6863      	ldr	r3, [r4, #4]
 8009710:	6123      	str	r3, [r4, #16]
 8009712:	2300      	movs	r3, #0
 8009714:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009718:	e7a8      	b.n	800966c <_printf_i+0x150>
 800971a:	6923      	ldr	r3, [r4, #16]
 800971c:	4632      	mov	r2, r6
 800971e:	4649      	mov	r1, r9
 8009720:	4640      	mov	r0, r8
 8009722:	47d0      	blx	sl
 8009724:	3001      	adds	r0, #1
 8009726:	d0ab      	beq.n	8009680 <_printf_i+0x164>
 8009728:	6823      	ldr	r3, [r4, #0]
 800972a:	079b      	lsls	r3, r3, #30
 800972c:	d413      	bmi.n	8009756 <_printf_i+0x23a>
 800972e:	68e0      	ldr	r0, [r4, #12]
 8009730:	9b03      	ldr	r3, [sp, #12]
 8009732:	4298      	cmp	r0, r3
 8009734:	bfb8      	it	lt
 8009736:	4618      	movlt	r0, r3
 8009738:	e7a4      	b.n	8009684 <_printf_i+0x168>
 800973a:	2301      	movs	r3, #1
 800973c:	4632      	mov	r2, r6
 800973e:	4649      	mov	r1, r9
 8009740:	4640      	mov	r0, r8
 8009742:	47d0      	blx	sl
 8009744:	3001      	adds	r0, #1
 8009746:	d09b      	beq.n	8009680 <_printf_i+0x164>
 8009748:	3501      	adds	r5, #1
 800974a:	68e3      	ldr	r3, [r4, #12]
 800974c:	9903      	ldr	r1, [sp, #12]
 800974e:	1a5b      	subs	r3, r3, r1
 8009750:	42ab      	cmp	r3, r5
 8009752:	dcf2      	bgt.n	800973a <_printf_i+0x21e>
 8009754:	e7eb      	b.n	800972e <_printf_i+0x212>
 8009756:	2500      	movs	r5, #0
 8009758:	f104 0619 	add.w	r6, r4, #25
 800975c:	e7f5      	b.n	800974a <_printf_i+0x22e>
 800975e:	bf00      	nop
 8009760:	0800c06e 	.word	0x0800c06e
 8009764:	0800c07f 	.word	0x0800c07f

08009768 <iprintf>:
 8009768:	b40f      	push	{r0, r1, r2, r3}
 800976a:	4b0a      	ldr	r3, [pc, #40]	; (8009794 <iprintf+0x2c>)
 800976c:	b513      	push	{r0, r1, r4, lr}
 800976e:	681c      	ldr	r4, [r3, #0]
 8009770:	b124      	cbz	r4, 800977c <iprintf+0x14>
 8009772:	69a3      	ldr	r3, [r4, #24]
 8009774:	b913      	cbnz	r3, 800977c <iprintf+0x14>
 8009776:	4620      	mov	r0, r4
 8009778:	f000 ff22 	bl	800a5c0 <__sinit>
 800977c:	ab05      	add	r3, sp, #20
 800977e:	9a04      	ldr	r2, [sp, #16]
 8009780:	68a1      	ldr	r1, [r4, #8]
 8009782:	9301      	str	r3, [sp, #4]
 8009784:	4620      	mov	r0, r4
 8009786:	f001 fced 	bl	800b164 <_vfiprintf_r>
 800978a:	b002      	add	sp, #8
 800978c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009790:	b004      	add	sp, #16
 8009792:	4770      	bx	lr
 8009794:	20000014 	.word	0x20000014

08009798 <_sbrk_r>:
 8009798:	b538      	push	{r3, r4, r5, lr}
 800979a:	4d06      	ldr	r5, [pc, #24]	; (80097b4 <_sbrk_r+0x1c>)
 800979c:	2300      	movs	r3, #0
 800979e:	4604      	mov	r4, r0
 80097a0:	4608      	mov	r0, r1
 80097a2:	602b      	str	r3, [r5, #0]
 80097a4:	f7f8 fe82 	bl	80024ac <_sbrk>
 80097a8:	1c43      	adds	r3, r0, #1
 80097aa:	d102      	bne.n	80097b2 <_sbrk_r+0x1a>
 80097ac:	682b      	ldr	r3, [r5, #0]
 80097ae:	b103      	cbz	r3, 80097b2 <_sbrk_r+0x1a>
 80097b0:	6023      	str	r3, [r4, #0]
 80097b2:	bd38      	pop	{r3, r4, r5, pc}
 80097b4:	2000429c 	.word	0x2000429c

080097b8 <sniprintf>:
 80097b8:	b40c      	push	{r2, r3}
 80097ba:	b530      	push	{r4, r5, lr}
 80097bc:	4b17      	ldr	r3, [pc, #92]	; (800981c <sniprintf+0x64>)
 80097be:	1e0c      	subs	r4, r1, #0
 80097c0:	681d      	ldr	r5, [r3, #0]
 80097c2:	b09d      	sub	sp, #116	; 0x74
 80097c4:	da08      	bge.n	80097d8 <sniprintf+0x20>
 80097c6:	238b      	movs	r3, #139	; 0x8b
 80097c8:	602b      	str	r3, [r5, #0]
 80097ca:	f04f 30ff 	mov.w	r0, #4294967295
 80097ce:	b01d      	add	sp, #116	; 0x74
 80097d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80097d4:	b002      	add	sp, #8
 80097d6:	4770      	bx	lr
 80097d8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80097dc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80097e0:	bf14      	ite	ne
 80097e2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80097e6:	4623      	moveq	r3, r4
 80097e8:	9304      	str	r3, [sp, #16]
 80097ea:	9307      	str	r3, [sp, #28]
 80097ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80097f0:	9002      	str	r0, [sp, #8]
 80097f2:	9006      	str	r0, [sp, #24]
 80097f4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80097f8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80097fa:	ab21      	add	r3, sp, #132	; 0x84
 80097fc:	a902      	add	r1, sp, #8
 80097fe:	4628      	mov	r0, r5
 8009800:	9301      	str	r3, [sp, #4]
 8009802:	f001 fb85 	bl	800af10 <_svfiprintf_r>
 8009806:	1c43      	adds	r3, r0, #1
 8009808:	bfbc      	itt	lt
 800980a:	238b      	movlt	r3, #139	; 0x8b
 800980c:	602b      	strlt	r3, [r5, #0]
 800980e:	2c00      	cmp	r4, #0
 8009810:	d0dd      	beq.n	80097ce <sniprintf+0x16>
 8009812:	9b02      	ldr	r3, [sp, #8]
 8009814:	2200      	movs	r2, #0
 8009816:	701a      	strb	r2, [r3, #0]
 8009818:	e7d9      	b.n	80097ce <sniprintf+0x16>
 800981a:	bf00      	nop
 800981c:	20000014 	.word	0x20000014

08009820 <quorem>:
 8009820:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009824:	6903      	ldr	r3, [r0, #16]
 8009826:	690c      	ldr	r4, [r1, #16]
 8009828:	42a3      	cmp	r3, r4
 800982a:	4607      	mov	r7, r0
 800982c:	f2c0 8081 	blt.w	8009932 <quorem+0x112>
 8009830:	3c01      	subs	r4, #1
 8009832:	f101 0814 	add.w	r8, r1, #20
 8009836:	f100 0514 	add.w	r5, r0, #20
 800983a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800983e:	9301      	str	r3, [sp, #4]
 8009840:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009844:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009848:	3301      	adds	r3, #1
 800984a:	429a      	cmp	r2, r3
 800984c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009850:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009854:	fbb2 f6f3 	udiv	r6, r2, r3
 8009858:	d331      	bcc.n	80098be <quorem+0x9e>
 800985a:	f04f 0e00 	mov.w	lr, #0
 800985e:	4640      	mov	r0, r8
 8009860:	46ac      	mov	ip, r5
 8009862:	46f2      	mov	sl, lr
 8009864:	f850 2b04 	ldr.w	r2, [r0], #4
 8009868:	b293      	uxth	r3, r2
 800986a:	fb06 e303 	mla	r3, r6, r3, lr
 800986e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009872:	b29b      	uxth	r3, r3
 8009874:	ebaa 0303 	sub.w	r3, sl, r3
 8009878:	0c12      	lsrs	r2, r2, #16
 800987a:	f8dc a000 	ldr.w	sl, [ip]
 800987e:	fb06 e202 	mla	r2, r6, r2, lr
 8009882:	fa13 f38a 	uxtah	r3, r3, sl
 8009886:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800988a:	fa1f fa82 	uxth.w	sl, r2
 800988e:	f8dc 2000 	ldr.w	r2, [ip]
 8009892:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009896:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800989a:	b29b      	uxth	r3, r3
 800989c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80098a0:	4581      	cmp	r9, r0
 80098a2:	f84c 3b04 	str.w	r3, [ip], #4
 80098a6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80098aa:	d2db      	bcs.n	8009864 <quorem+0x44>
 80098ac:	f855 300b 	ldr.w	r3, [r5, fp]
 80098b0:	b92b      	cbnz	r3, 80098be <quorem+0x9e>
 80098b2:	9b01      	ldr	r3, [sp, #4]
 80098b4:	3b04      	subs	r3, #4
 80098b6:	429d      	cmp	r5, r3
 80098b8:	461a      	mov	r2, r3
 80098ba:	d32e      	bcc.n	800991a <quorem+0xfa>
 80098bc:	613c      	str	r4, [r7, #16]
 80098be:	4638      	mov	r0, r7
 80098c0:	f001 f9bc 	bl	800ac3c <__mcmp>
 80098c4:	2800      	cmp	r0, #0
 80098c6:	db24      	blt.n	8009912 <quorem+0xf2>
 80098c8:	3601      	adds	r6, #1
 80098ca:	4628      	mov	r0, r5
 80098cc:	f04f 0c00 	mov.w	ip, #0
 80098d0:	f858 2b04 	ldr.w	r2, [r8], #4
 80098d4:	f8d0 e000 	ldr.w	lr, [r0]
 80098d8:	b293      	uxth	r3, r2
 80098da:	ebac 0303 	sub.w	r3, ip, r3
 80098de:	0c12      	lsrs	r2, r2, #16
 80098e0:	fa13 f38e 	uxtah	r3, r3, lr
 80098e4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80098e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80098ec:	b29b      	uxth	r3, r3
 80098ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80098f2:	45c1      	cmp	r9, r8
 80098f4:	f840 3b04 	str.w	r3, [r0], #4
 80098f8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80098fc:	d2e8      	bcs.n	80098d0 <quorem+0xb0>
 80098fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009902:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009906:	b922      	cbnz	r2, 8009912 <quorem+0xf2>
 8009908:	3b04      	subs	r3, #4
 800990a:	429d      	cmp	r5, r3
 800990c:	461a      	mov	r2, r3
 800990e:	d30a      	bcc.n	8009926 <quorem+0x106>
 8009910:	613c      	str	r4, [r7, #16]
 8009912:	4630      	mov	r0, r6
 8009914:	b003      	add	sp, #12
 8009916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800991a:	6812      	ldr	r2, [r2, #0]
 800991c:	3b04      	subs	r3, #4
 800991e:	2a00      	cmp	r2, #0
 8009920:	d1cc      	bne.n	80098bc <quorem+0x9c>
 8009922:	3c01      	subs	r4, #1
 8009924:	e7c7      	b.n	80098b6 <quorem+0x96>
 8009926:	6812      	ldr	r2, [r2, #0]
 8009928:	3b04      	subs	r3, #4
 800992a:	2a00      	cmp	r2, #0
 800992c:	d1f0      	bne.n	8009910 <quorem+0xf0>
 800992e:	3c01      	subs	r4, #1
 8009930:	e7eb      	b.n	800990a <quorem+0xea>
 8009932:	2000      	movs	r0, #0
 8009934:	e7ee      	b.n	8009914 <quorem+0xf4>
	...

08009938 <_dtoa_r>:
 8009938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800993c:	ed2d 8b02 	vpush	{d8}
 8009940:	ec57 6b10 	vmov	r6, r7, d0
 8009944:	b095      	sub	sp, #84	; 0x54
 8009946:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009948:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800994c:	9105      	str	r1, [sp, #20]
 800994e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009952:	4604      	mov	r4, r0
 8009954:	9209      	str	r2, [sp, #36]	; 0x24
 8009956:	930f      	str	r3, [sp, #60]	; 0x3c
 8009958:	b975      	cbnz	r5, 8009978 <_dtoa_r+0x40>
 800995a:	2010      	movs	r0, #16
 800995c:	f7ff f9e0 	bl	8008d20 <malloc>
 8009960:	4602      	mov	r2, r0
 8009962:	6260      	str	r0, [r4, #36]	; 0x24
 8009964:	b920      	cbnz	r0, 8009970 <_dtoa_r+0x38>
 8009966:	4bb2      	ldr	r3, [pc, #712]	; (8009c30 <_dtoa_r+0x2f8>)
 8009968:	21ea      	movs	r1, #234	; 0xea
 800996a:	48b2      	ldr	r0, [pc, #712]	; (8009c34 <_dtoa_r+0x2fc>)
 800996c:	f001 fe40 	bl	800b5f0 <__assert_func>
 8009970:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009974:	6005      	str	r5, [r0, #0]
 8009976:	60c5      	str	r5, [r0, #12]
 8009978:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800997a:	6819      	ldr	r1, [r3, #0]
 800997c:	b151      	cbz	r1, 8009994 <_dtoa_r+0x5c>
 800997e:	685a      	ldr	r2, [r3, #4]
 8009980:	604a      	str	r2, [r1, #4]
 8009982:	2301      	movs	r3, #1
 8009984:	4093      	lsls	r3, r2
 8009986:	608b      	str	r3, [r1, #8]
 8009988:	4620      	mov	r0, r4
 800998a:	f000 ff19 	bl	800a7c0 <_Bfree>
 800998e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009990:	2200      	movs	r2, #0
 8009992:	601a      	str	r2, [r3, #0]
 8009994:	1e3b      	subs	r3, r7, #0
 8009996:	bfb9      	ittee	lt
 8009998:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800999c:	9303      	strlt	r3, [sp, #12]
 800999e:	2300      	movge	r3, #0
 80099a0:	f8c8 3000 	strge.w	r3, [r8]
 80099a4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80099a8:	4ba3      	ldr	r3, [pc, #652]	; (8009c38 <_dtoa_r+0x300>)
 80099aa:	bfbc      	itt	lt
 80099ac:	2201      	movlt	r2, #1
 80099ae:	f8c8 2000 	strlt.w	r2, [r8]
 80099b2:	ea33 0309 	bics.w	r3, r3, r9
 80099b6:	d11b      	bne.n	80099f0 <_dtoa_r+0xb8>
 80099b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80099ba:	f242 730f 	movw	r3, #9999	; 0x270f
 80099be:	6013      	str	r3, [r2, #0]
 80099c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80099c4:	4333      	orrs	r3, r6
 80099c6:	f000 857a 	beq.w	800a4be <_dtoa_r+0xb86>
 80099ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80099cc:	b963      	cbnz	r3, 80099e8 <_dtoa_r+0xb0>
 80099ce:	4b9b      	ldr	r3, [pc, #620]	; (8009c3c <_dtoa_r+0x304>)
 80099d0:	e024      	b.n	8009a1c <_dtoa_r+0xe4>
 80099d2:	4b9b      	ldr	r3, [pc, #620]	; (8009c40 <_dtoa_r+0x308>)
 80099d4:	9300      	str	r3, [sp, #0]
 80099d6:	3308      	adds	r3, #8
 80099d8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80099da:	6013      	str	r3, [r2, #0]
 80099dc:	9800      	ldr	r0, [sp, #0]
 80099de:	b015      	add	sp, #84	; 0x54
 80099e0:	ecbd 8b02 	vpop	{d8}
 80099e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099e8:	4b94      	ldr	r3, [pc, #592]	; (8009c3c <_dtoa_r+0x304>)
 80099ea:	9300      	str	r3, [sp, #0]
 80099ec:	3303      	adds	r3, #3
 80099ee:	e7f3      	b.n	80099d8 <_dtoa_r+0xa0>
 80099f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80099f4:	2200      	movs	r2, #0
 80099f6:	ec51 0b17 	vmov	r0, r1, d7
 80099fa:	2300      	movs	r3, #0
 80099fc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009a00:	f7f7 f862 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a04:	4680      	mov	r8, r0
 8009a06:	b158      	cbz	r0, 8009a20 <_dtoa_r+0xe8>
 8009a08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	6013      	str	r3, [r2, #0]
 8009a0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	f000 8551 	beq.w	800a4b8 <_dtoa_r+0xb80>
 8009a16:	488b      	ldr	r0, [pc, #556]	; (8009c44 <_dtoa_r+0x30c>)
 8009a18:	6018      	str	r0, [r3, #0]
 8009a1a:	1e43      	subs	r3, r0, #1
 8009a1c:	9300      	str	r3, [sp, #0]
 8009a1e:	e7dd      	b.n	80099dc <_dtoa_r+0xa4>
 8009a20:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009a24:	aa12      	add	r2, sp, #72	; 0x48
 8009a26:	a913      	add	r1, sp, #76	; 0x4c
 8009a28:	4620      	mov	r0, r4
 8009a2a:	f001 f9ab 	bl	800ad84 <__d2b>
 8009a2e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009a32:	4683      	mov	fp, r0
 8009a34:	2d00      	cmp	r5, #0
 8009a36:	d07c      	beq.n	8009b32 <_dtoa_r+0x1fa>
 8009a38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a3a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8009a3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a42:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8009a46:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009a4a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009a4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009a52:	4b7d      	ldr	r3, [pc, #500]	; (8009c48 <_dtoa_r+0x310>)
 8009a54:	2200      	movs	r2, #0
 8009a56:	4630      	mov	r0, r6
 8009a58:	4639      	mov	r1, r7
 8009a5a:	f7f6 fc15 	bl	8000288 <__aeabi_dsub>
 8009a5e:	a36e      	add	r3, pc, #440	; (adr r3, 8009c18 <_dtoa_r+0x2e0>)
 8009a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a64:	f7f6 fdc8 	bl	80005f8 <__aeabi_dmul>
 8009a68:	a36d      	add	r3, pc, #436	; (adr r3, 8009c20 <_dtoa_r+0x2e8>)
 8009a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a6e:	f7f6 fc0d 	bl	800028c <__adddf3>
 8009a72:	4606      	mov	r6, r0
 8009a74:	4628      	mov	r0, r5
 8009a76:	460f      	mov	r7, r1
 8009a78:	f7f6 fd54 	bl	8000524 <__aeabi_i2d>
 8009a7c:	a36a      	add	r3, pc, #424	; (adr r3, 8009c28 <_dtoa_r+0x2f0>)
 8009a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a82:	f7f6 fdb9 	bl	80005f8 <__aeabi_dmul>
 8009a86:	4602      	mov	r2, r0
 8009a88:	460b      	mov	r3, r1
 8009a8a:	4630      	mov	r0, r6
 8009a8c:	4639      	mov	r1, r7
 8009a8e:	f7f6 fbfd 	bl	800028c <__adddf3>
 8009a92:	4606      	mov	r6, r0
 8009a94:	460f      	mov	r7, r1
 8009a96:	f7f7 f85f 	bl	8000b58 <__aeabi_d2iz>
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	4682      	mov	sl, r0
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	4630      	mov	r0, r6
 8009aa2:	4639      	mov	r1, r7
 8009aa4:	f7f7 f81a 	bl	8000adc <__aeabi_dcmplt>
 8009aa8:	b148      	cbz	r0, 8009abe <_dtoa_r+0x186>
 8009aaa:	4650      	mov	r0, sl
 8009aac:	f7f6 fd3a 	bl	8000524 <__aeabi_i2d>
 8009ab0:	4632      	mov	r2, r6
 8009ab2:	463b      	mov	r3, r7
 8009ab4:	f7f7 f808 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ab8:	b908      	cbnz	r0, 8009abe <_dtoa_r+0x186>
 8009aba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009abe:	f1ba 0f16 	cmp.w	sl, #22
 8009ac2:	d854      	bhi.n	8009b6e <_dtoa_r+0x236>
 8009ac4:	4b61      	ldr	r3, [pc, #388]	; (8009c4c <_dtoa_r+0x314>)
 8009ac6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ace:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009ad2:	f7f7 f803 	bl	8000adc <__aeabi_dcmplt>
 8009ad6:	2800      	cmp	r0, #0
 8009ad8:	d04b      	beq.n	8009b72 <_dtoa_r+0x23a>
 8009ada:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009ade:	2300      	movs	r3, #0
 8009ae0:	930e      	str	r3, [sp, #56]	; 0x38
 8009ae2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009ae4:	1b5d      	subs	r5, r3, r5
 8009ae6:	1e6b      	subs	r3, r5, #1
 8009ae8:	9304      	str	r3, [sp, #16]
 8009aea:	bf43      	ittte	mi
 8009aec:	2300      	movmi	r3, #0
 8009aee:	f1c5 0801 	rsbmi	r8, r5, #1
 8009af2:	9304      	strmi	r3, [sp, #16]
 8009af4:	f04f 0800 	movpl.w	r8, #0
 8009af8:	f1ba 0f00 	cmp.w	sl, #0
 8009afc:	db3b      	blt.n	8009b76 <_dtoa_r+0x23e>
 8009afe:	9b04      	ldr	r3, [sp, #16]
 8009b00:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8009b04:	4453      	add	r3, sl
 8009b06:	9304      	str	r3, [sp, #16]
 8009b08:	2300      	movs	r3, #0
 8009b0a:	9306      	str	r3, [sp, #24]
 8009b0c:	9b05      	ldr	r3, [sp, #20]
 8009b0e:	2b09      	cmp	r3, #9
 8009b10:	d869      	bhi.n	8009be6 <_dtoa_r+0x2ae>
 8009b12:	2b05      	cmp	r3, #5
 8009b14:	bfc4      	itt	gt
 8009b16:	3b04      	subgt	r3, #4
 8009b18:	9305      	strgt	r3, [sp, #20]
 8009b1a:	9b05      	ldr	r3, [sp, #20]
 8009b1c:	f1a3 0302 	sub.w	r3, r3, #2
 8009b20:	bfcc      	ite	gt
 8009b22:	2500      	movgt	r5, #0
 8009b24:	2501      	movle	r5, #1
 8009b26:	2b03      	cmp	r3, #3
 8009b28:	d869      	bhi.n	8009bfe <_dtoa_r+0x2c6>
 8009b2a:	e8df f003 	tbb	[pc, r3]
 8009b2e:	4e2c      	.short	0x4e2c
 8009b30:	5a4c      	.short	0x5a4c
 8009b32:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009b36:	441d      	add	r5, r3
 8009b38:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009b3c:	2b20      	cmp	r3, #32
 8009b3e:	bfc1      	itttt	gt
 8009b40:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009b44:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009b48:	fa09 f303 	lslgt.w	r3, r9, r3
 8009b4c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009b50:	bfda      	itte	le
 8009b52:	f1c3 0320 	rsble	r3, r3, #32
 8009b56:	fa06 f003 	lslle.w	r0, r6, r3
 8009b5a:	4318      	orrgt	r0, r3
 8009b5c:	f7f6 fcd2 	bl	8000504 <__aeabi_ui2d>
 8009b60:	2301      	movs	r3, #1
 8009b62:	4606      	mov	r6, r0
 8009b64:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009b68:	3d01      	subs	r5, #1
 8009b6a:	9310      	str	r3, [sp, #64]	; 0x40
 8009b6c:	e771      	b.n	8009a52 <_dtoa_r+0x11a>
 8009b6e:	2301      	movs	r3, #1
 8009b70:	e7b6      	b.n	8009ae0 <_dtoa_r+0x1a8>
 8009b72:	900e      	str	r0, [sp, #56]	; 0x38
 8009b74:	e7b5      	b.n	8009ae2 <_dtoa_r+0x1aa>
 8009b76:	f1ca 0300 	rsb	r3, sl, #0
 8009b7a:	9306      	str	r3, [sp, #24]
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	eba8 080a 	sub.w	r8, r8, sl
 8009b82:	930d      	str	r3, [sp, #52]	; 0x34
 8009b84:	e7c2      	b.n	8009b0c <_dtoa_r+0x1d4>
 8009b86:	2300      	movs	r3, #0
 8009b88:	9308      	str	r3, [sp, #32]
 8009b8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	dc39      	bgt.n	8009c04 <_dtoa_r+0x2cc>
 8009b90:	f04f 0901 	mov.w	r9, #1
 8009b94:	f8cd 9004 	str.w	r9, [sp, #4]
 8009b98:	464b      	mov	r3, r9
 8009b9a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009b9e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	6042      	str	r2, [r0, #4]
 8009ba4:	2204      	movs	r2, #4
 8009ba6:	f102 0614 	add.w	r6, r2, #20
 8009baa:	429e      	cmp	r6, r3
 8009bac:	6841      	ldr	r1, [r0, #4]
 8009bae:	d92f      	bls.n	8009c10 <_dtoa_r+0x2d8>
 8009bb0:	4620      	mov	r0, r4
 8009bb2:	f000 fdc5 	bl	800a740 <_Balloc>
 8009bb6:	9000      	str	r0, [sp, #0]
 8009bb8:	2800      	cmp	r0, #0
 8009bba:	d14b      	bne.n	8009c54 <_dtoa_r+0x31c>
 8009bbc:	4b24      	ldr	r3, [pc, #144]	; (8009c50 <_dtoa_r+0x318>)
 8009bbe:	4602      	mov	r2, r0
 8009bc0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009bc4:	e6d1      	b.n	800996a <_dtoa_r+0x32>
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	e7de      	b.n	8009b88 <_dtoa_r+0x250>
 8009bca:	2300      	movs	r3, #0
 8009bcc:	9308      	str	r3, [sp, #32]
 8009bce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bd0:	eb0a 0903 	add.w	r9, sl, r3
 8009bd4:	f109 0301 	add.w	r3, r9, #1
 8009bd8:	2b01      	cmp	r3, #1
 8009bda:	9301      	str	r3, [sp, #4]
 8009bdc:	bfb8      	it	lt
 8009bde:	2301      	movlt	r3, #1
 8009be0:	e7dd      	b.n	8009b9e <_dtoa_r+0x266>
 8009be2:	2301      	movs	r3, #1
 8009be4:	e7f2      	b.n	8009bcc <_dtoa_r+0x294>
 8009be6:	2501      	movs	r5, #1
 8009be8:	2300      	movs	r3, #0
 8009bea:	9305      	str	r3, [sp, #20]
 8009bec:	9508      	str	r5, [sp, #32]
 8009bee:	f04f 39ff 	mov.w	r9, #4294967295
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	f8cd 9004 	str.w	r9, [sp, #4]
 8009bf8:	2312      	movs	r3, #18
 8009bfa:	9209      	str	r2, [sp, #36]	; 0x24
 8009bfc:	e7cf      	b.n	8009b9e <_dtoa_r+0x266>
 8009bfe:	2301      	movs	r3, #1
 8009c00:	9308      	str	r3, [sp, #32]
 8009c02:	e7f4      	b.n	8009bee <_dtoa_r+0x2b6>
 8009c04:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009c08:	f8cd 9004 	str.w	r9, [sp, #4]
 8009c0c:	464b      	mov	r3, r9
 8009c0e:	e7c6      	b.n	8009b9e <_dtoa_r+0x266>
 8009c10:	3101      	adds	r1, #1
 8009c12:	6041      	str	r1, [r0, #4]
 8009c14:	0052      	lsls	r2, r2, #1
 8009c16:	e7c6      	b.n	8009ba6 <_dtoa_r+0x26e>
 8009c18:	636f4361 	.word	0x636f4361
 8009c1c:	3fd287a7 	.word	0x3fd287a7
 8009c20:	8b60c8b3 	.word	0x8b60c8b3
 8009c24:	3fc68a28 	.word	0x3fc68a28
 8009c28:	509f79fb 	.word	0x509f79fb
 8009c2c:	3fd34413 	.word	0x3fd34413
 8009c30:	0800c09d 	.word	0x0800c09d
 8009c34:	0800c0b4 	.word	0x0800c0b4
 8009c38:	7ff00000 	.word	0x7ff00000
 8009c3c:	0800c099 	.word	0x0800c099
 8009c40:	0800c090 	.word	0x0800c090
 8009c44:	0800c06d 	.word	0x0800c06d
 8009c48:	3ff80000 	.word	0x3ff80000
 8009c4c:	0800c210 	.word	0x0800c210
 8009c50:	0800c113 	.word	0x0800c113
 8009c54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c56:	9a00      	ldr	r2, [sp, #0]
 8009c58:	601a      	str	r2, [r3, #0]
 8009c5a:	9b01      	ldr	r3, [sp, #4]
 8009c5c:	2b0e      	cmp	r3, #14
 8009c5e:	f200 80ad 	bhi.w	8009dbc <_dtoa_r+0x484>
 8009c62:	2d00      	cmp	r5, #0
 8009c64:	f000 80aa 	beq.w	8009dbc <_dtoa_r+0x484>
 8009c68:	f1ba 0f00 	cmp.w	sl, #0
 8009c6c:	dd36      	ble.n	8009cdc <_dtoa_r+0x3a4>
 8009c6e:	4ac3      	ldr	r2, [pc, #780]	; (8009f7c <_dtoa_r+0x644>)
 8009c70:	f00a 030f 	and.w	r3, sl, #15
 8009c74:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009c78:	ed93 7b00 	vldr	d7, [r3]
 8009c7c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009c80:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009c84:	eeb0 8a47 	vmov.f32	s16, s14
 8009c88:	eef0 8a67 	vmov.f32	s17, s15
 8009c8c:	d016      	beq.n	8009cbc <_dtoa_r+0x384>
 8009c8e:	4bbc      	ldr	r3, [pc, #752]	; (8009f80 <_dtoa_r+0x648>)
 8009c90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009c94:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009c98:	f7f6 fdd8 	bl	800084c <__aeabi_ddiv>
 8009c9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ca0:	f007 070f 	and.w	r7, r7, #15
 8009ca4:	2503      	movs	r5, #3
 8009ca6:	4eb6      	ldr	r6, [pc, #728]	; (8009f80 <_dtoa_r+0x648>)
 8009ca8:	b957      	cbnz	r7, 8009cc0 <_dtoa_r+0x388>
 8009caa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009cae:	ec53 2b18 	vmov	r2, r3, d8
 8009cb2:	f7f6 fdcb 	bl	800084c <__aeabi_ddiv>
 8009cb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009cba:	e029      	b.n	8009d10 <_dtoa_r+0x3d8>
 8009cbc:	2502      	movs	r5, #2
 8009cbe:	e7f2      	b.n	8009ca6 <_dtoa_r+0x36e>
 8009cc0:	07f9      	lsls	r1, r7, #31
 8009cc2:	d508      	bpl.n	8009cd6 <_dtoa_r+0x39e>
 8009cc4:	ec51 0b18 	vmov	r0, r1, d8
 8009cc8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009ccc:	f7f6 fc94 	bl	80005f8 <__aeabi_dmul>
 8009cd0:	ec41 0b18 	vmov	d8, r0, r1
 8009cd4:	3501      	adds	r5, #1
 8009cd6:	107f      	asrs	r7, r7, #1
 8009cd8:	3608      	adds	r6, #8
 8009cda:	e7e5      	b.n	8009ca8 <_dtoa_r+0x370>
 8009cdc:	f000 80a6 	beq.w	8009e2c <_dtoa_r+0x4f4>
 8009ce0:	f1ca 0600 	rsb	r6, sl, #0
 8009ce4:	4ba5      	ldr	r3, [pc, #660]	; (8009f7c <_dtoa_r+0x644>)
 8009ce6:	4fa6      	ldr	r7, [pc, #664]	; (8009f80 <_dtoa_r+0x648>)
 8009ce8:	f006 020f 	and.w	r2, r6, #15
 8009cec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009cf8:	f7f6 fc7e 	bl	80005f8 <__aeabi_dmul>
 8009cfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d00:	1136      	asrs	r6, r6, #4
 8009d02:	2300      	movs	r3, #0
 8009d04:	2502      	movs	r5, #2
 8009d06:	2e00      	cmp	r6, #0
 8009d08:	f040 8085 	bne.w	8009e16 <_dtoa_r+0x4de>
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d1d2      	bne.n	8009cb6 <_dtoa_r+0x37e>
 8009d10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	f000 808c 	beq.w	8009e30 <_dtoa_r+0x4f8>
 8009d18:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009d1c:	4b99      	ldr	r3, [pc, #612]	; (8009f84 <_dtoa_r+0x64c>)
 8009d1e:	2200      	movs	r2, #0
 8009d20:	4630      	mov	r0, r6
 8009d22:	4639      	mov	r1, r7
 8009d24:	f7f6 feda 	bl	8000adc <__aeabi_dcmplt>
 8009d28:	2800      	cmp	r0, #0
 8009d2a:	f000 8081 	beq.w	8009e30 <_dtoa_r+0x4f8>
 8009d2e:	9b01      	ldr	r3, [sp, #4]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d07d      	beq.n	8009e30 <_dtoa_r+0x4f8>
 8009d34:	f1b9 0f00 	cmp.w	r9, #0
 8009d38:	dd3c      	ble.n	8009db4 <_dtoa_r+0x47c>
 8009d3a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009d3e:	9307      	str	r3, [sp, #28]
 8009d40:	2200      	movs	r2, #0
 8009d42:	4b91      	ldr	r3, [pc, #580]	; (8009f88 <_dtoa_r+0x650>)
 8009d44:	4630      	mov	r0, r6
 8009d46:	4639      	mov	r1, r7
 8009d48:	f7f6 fc56 	bl	80005f8 <__aeabi_dmul>
 8009d4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d50:	3501      	adds	r5, #1
 8009d52:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009d56:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009d5a:	4628      	mov	r0, r5
 8009d5c:	f7f6 fbe2 	bl	8000524 <__aeabi_i2d>
 8009d60:	4632      	mov	r2, r6
 8009d62:	463b      	mov	r3, r7
 8009d64:	f7f6 fc48 	bl	80005f8 <__aeabi_dmul>
 8009d68:	4b88      	ldr	r3, [pc, #544]	; (8009f8c <_dtoa_r+0x654>)
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	f7f6 fa8e 	bl	800028c <__adddf3>
 8009d70:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009d74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d78:	9303      	str	r3, [sp, #12]
 8009d7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d15c      	bne.n	8009e3a <_dtoa_r+0x502>
 8009d80:	4b83      	ldr	r3, [pc, #524]	; (8009f90 <_dtoa_r+0x658>)
 8009d82:	2200      	movs	r2, #0
 8009d84:	4630      	mov	r0, r6
 8009d86:	4639      	mov	r1, r7
 8009d88:	f7f6 fa7e 	bl	8000288 <__aeabi_dsub>
 8009d8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009d90:	4606      	mov	r6, r0
 8009d92:	460f      	mov	r7, r1
 8009d94:	f7f6 fec0 	bl	8000b18 <__aeabi_dcmpgt>
 8009d98:	2800      	cmp	r0, #0
 8009d9a:	f040 8296 	bne.w	800a2ca <_dtoa_r+0x992>
 8009d9e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009da2:	4630      	mov	r0, r6
 8009da4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009da8:	4639      	mov	r1, r7
 8009daa:	f7f6 fe97 	bl	8000adc <__aeabi_dcmplt>
 8009dae:	2800      	cmp	r0, #0
 8009db0:	f040 8288 	bne.w	800a2c4 <_dtoa_r+0x98c>
 8009db4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009db8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009dbc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	f2c0 8158 	blt.w	800a074 <_dtoa_r+0x73c>
 8009dc4:	f1ba 0f0e 	cmp.w	sl, #14
 8009dc8:	f300 8154 	bgt.w	800a074 <_dtoa_r+0x73c>
 8009dcc:	4b6b      	ldr	r3, [pc, #428]	; (8009f7c <_dtoa_r+0x644>)
 8009dce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009dd2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009dd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	f280 80e3 	bge.w	8009fa4 <_dtoa_r+0x66c>
 8009dde:	9b01      	ldr	r3, [sp, #4]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	f300 80df 	bgt.w	8009fa4 <_dtoa_r+0x66c>
 8009de6:	f040 826d 	bne.w	800a2c4 <_dtoa_r+0x98c>
 8009dea:	4b69      	ldr	r3, [pc, #420]	; (8009f90 <_dtoa_r+0x658>)
 8009dec:	2200      	movs	r2, #0
 8009dee:	4640      	mov	r0, r8
 8009df0:	4649      	mov	r1, r9
 8009df2:	f7f6 fc01 	bl	80005f8 <__aeabi_dmul>
 8009df6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009dfa:	f7f6 fe83 	bl	8000b04 <__aeabi_dcmpge>
 8009dfe:	9e01      	ldr	r6, [sp, #4]
 8009e00:	4637      	mov	r7, r6
 8009e02:	2800      	cmp	r0, #0
 8009e04:	f040 8243 	bne.w	800a28e <_dtoa_r+0x956>
 8009e08:	9d00      	ldr	r5, [sp, #0]
 8009e0a:	2331      	movs	r3, #49	; 0x31
 8009e0c:	f805 3b01 	strb.w	r3, [r5], #1
 8009e10:	f10a 0a01 	add.w	sl, sl, #1
 8009e14:	e23f      	b.n	800a296 <_dtoa_r+0x95e>
 8009e16:	07f2      	lsls	r2, r6, #31
 8009e18:	d505      	bpl.n	8009e26 <_dtoa_r+0x4ee>
 8009e1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e1e:	f7f6 fbeb 	bl	80005f8 <__aeabi_dmul>
 8009e22:	3501      	adds	r5, #1
 8009e24:	2301      	movs	r3, #1
 8009e26:	1076      	asrs	r6, r6, #1
 8009e28:	3708      	adds	r7, #8
 8009e2a:	e76c      	b.n	8009d06 <_dtoa_r+0x3ce>
 8009e2c:	2502      	movs	r5, #2
 8009e2e:	e76f      	b.n	8009d10 <_dtoa_r+0x3d8>
 8009e30:	9b01      	ldr	r3, [sp, #4]
 8009e32:	f8cd a01c 	str.w	sl, [sp, #28]
 8009e36:	930c      	str	r3, [sp, #48]	; 0x30
 8009e38:	e78d      	b.n	8009d56 <_dtoa_r+0x41e>
 8009e3a:	9900      	ldr	r1, [sp, #0]
 8009e3c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009e3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e40:	4b4e      	ldr	r3, [pc, #312]	; (8009f7c <_dtoa_r+0x644>)
 8009e42:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009e46:	4401      	add	r1, r0
 8009e48:	9102      	str	r1, [sp, #8]
 8009e4a:	9908      	ldr	r1, [sp, #32]
 8009e4c:	eeb0 8a47 	vmov.f32	s16, s14
 8009e50:	eef0 8a67 	vmov.f32	s17, s15
 8009e54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e58:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009e5c:	2900      	cmp	r1, #0
 8009e5e:	d045      	beq.n	8009eec <_dtoa_r+0x5b4>
 8009e60:	494c      	ldr	r1, [pc, #304]	; (8009f94 <_dtoa_r+0x65c>)
 8009e62:	2000      	movs	r0, #0
 8009e64:	f7f6 fcf2 	bl	800084c <__aeabi_ddiv>
 8009e68:	ec53 2b18 	vmov	r2, r3, d8
 8009e6c:	f7f6 fa0c 	bl	8000288 <__aeabi_dsub>
 8009e70:	9d00      	ldr	r5, [sp, #0]
 8009e72:	ec41 0b18 	vmov	d8, r0, r1
 8009e76:	4639      	mov	r1, r7
 8009e78:	4630      	mov	r0, r6
 8009e7a:	f7f6 fe6d 	bl	8000b58 <__aeabi_d2iz>
 8009e7e:	900c      	str	r0, [sp, #48]	; 0x30
 8009e80:	f7f6 fb50 	bl	8000524 <__aeabi_i2d>
 8009e84:	4602      	mov	r2, r0
 8009e86:	460b      	mov	r3, r1
 8009e88:	4630      	mov	r0, r6
 8009e8a:	4639      	mov	r1, r7
 8009e8c:	f7f6 f9fc 	bl	8000288 <__aeabi_dsub>
 8009e90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e92:	3330      	adds	r3, #48	; 0x30
 8009e94:	f805 3b01 	strb.w	r3, [r5], #1
 8009e98:	ec53 2b18 	vmov	r2, r3, d8
 8009e9c:	4606      	mov	r6, r0
 8009e9e:	460f      	mov	r7, r1
 8009ea0:	f7f6 fe1c 	bl	8000adc <__aeabi_dcmplt>
 8009ea4:	2800      	cmp	r0, #0
 8009ea6:	d165      	bne.n	8009f74 <_dtoa_r+0x63c>
 8009ea8:	4632      	mov	r2, r6
 8009eaa:	463b      	mov	r3, r7
 8009eac:	4935      	ldr	r1, [pc, #212]	; (8009f84 <_dtoa_r+0x64c>)
 8009eae:	2000      	movs	r0, #0
 8009eb0:	f7f6 f9ea 	bl	8000288 <__aeabi_dsub>
 8009eb4:	ec53 2b18 	vmov	r2, r3, d8
 8009eb8:	f7f6 fe10 	bl	8000adc <__aeabi_dcmplt>
 8009ebc:	2800      	cmp	r0, #0
 8009ebe:	f040 80b9 	bne.w	800a034 <_dtoa_r+0x6fc>
 8009ec2:	9b02      	ldr	r3, [sp, #8]
 8009ec4:	429d      	cmp	r5, r3
 8009ec6:	f43f af75 	beq.w	8009db4 <_dtoa_r+0x47c>
 8009eca:	4b2f      	ldr	r3, [pc, #188]	; (8009f88 <_dtoa_r+0x650>)
 8009ecc:	ec51 0b18 	vmov	r0, r1, d8
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	f7f6 fb91 	bl	80005f8 <__aeabi_dmul>
 8009ed6:	4b2c      	ldr	r3, [pc, #176]	; (8009f88 <_dtoa_r+0x650>)
 8009ed8:	ec41 0b18 	vmov	d8, r0, r1
 8009edc:	2200      	movs	r2, #0
 8009ede:	4630      	mov	r0, r6
 8009ee0:	4639      	mov	r1, r7
 8009ee2:	f7f6 fb89 	bl	80005f8 <__aeabi_dmul>
 8009ee6:	4606      	mov	r6, r0
 8009ee8:	460f      	mov	r7, r1
 8009eea:	e7c4      	b.n	8009e76 <_dtoa_r+0x53e>
 8009eec:	ec51 0b17 	vmov	r0, r1, d7
 8009ef0:	f7f6 fb82 	bl	80005f8 <__aeabi_dmul>
 8009ef4:	9b02      	ldr	r3, [sp, #8]
 8009ef6:	9d00      	ldr	r5, [sp, #0]
 8009ef8:	930c      	str	r3, [sp, #48]	; 0x30
 8009efa:	ec41 0b18 	vmov	d8, r0, r1
 8009efe:	4639      	mov	r1, r7
 8009f00:	4630      	mov	r0, r6
 8009f02:	f7f6 fe29 	bl	8000b58 <__aeabi_d2iz>
 8009f06:	9011      	str	r0, [sp, #68]	; 0x44
 8009f08:	f7f6 fb0c 	bl	8000524 <__aeabi_i2d>
 8009f0c:	4602      	mov	r2, r0
 8009f0e:	460b      	mov	r3, r1
 8009f10:	4630      	mov	r0, r6
 8009f12:	4639      	mov	r1, r7
 8009f14:	f7f6 f9b8 	bl	8000288 <__aeabi_dsub>
 8009f18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009f1a:	3330      	adds	r3, #48	; 0x30
 8009f1c:	f805 3b01 	strb.w	r3, [r5], #1
 8009f20:	9b02      	ldr	r3, [sp, #8]
 8009f22:	429d      	cmp	r5, r3
 8009f24:	4606      	mov	r6, r0
 8009f26:	460f      	mov	r7, r1
 8009f28:	f04f 0200 	mov.w	r2, #0
 8009f2c:	d134      	bne.n	8009f98 <_dtoa_r+0x660>
 8009f2e:	4b19      	ldr	r3, [pc, #100]	; (8009f94 <_dtoa_r+0x65c>)
 8009f30:	ec51 0b18 	vmov	r0, r1, d8
 8009f34:	f7f6 f9aa 	bl	800028c <__adddf3>
 8009f38:	4602      	mov	r2, r0
 8009f3a:	460b      	mov	r3, r1
 8009f3c:	4630      	mov	r0, r6
 8009f3e:	4639      	mov	r1, r7
 8009f40:	f7f6 fdea 	bl	8000b18 <__aeabi_dcmpgt>
 8009f44:	2800      	cmp	r0, #0
 8009f46:	d175      	bne.n	800a034 <_dtoa_r+0x6fc>
 8009f48:	ec53 2b18 	vmov	r2, r3, d8
 8009f4c:	4911      	ldr	r1, [pc, #68]	; (8009f94 <_dtoa_r+0x65c>)
 8009f4e:	2000      	movs	r0, #0
 8009f50:	f7f6 f99a 	bl	8000288 <__aeabi_dsub>
 8009f54:	4602      	mov	r2, r0
 8009f56:	460b      	mov	r3, r1
 8009f58:	4630      	mov	r0, r6
 8009f5a:	4639      	mov	r1, r7
 8009f5c:	f7f6 fdbe 	bl	8000adc <__aeabi_dcmplt>
 8009f60:	2800      	cmp	r0, #0
 8009f62:	f43f af27 	beq.w	8009db4 <_dtoa_r+0x47c>
 8009f66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009f68:	1e6b      	subs	r3, r5, #1
 8009f6a:	930c      	str	r3, [sp, #48]	; 0x30
 8009f6c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009f70:	2b30      	cmp	r3, #48	; 0x30
 8009f72:	d0f8      	beq.n	8009f66 <_dtoa_r+0x62e>
 8009f74:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009f78:	e04a      	b.n	800a010 <_dtoa_r+0x6d8>
 8009f7a:	bf00      	nop
 8009f7c:	0800c210 	.word	0x0800c210
 8009f80:	0800c1e8 	.word	0x0800c1e8
 8009f84:	3ff00000 	.word	0x3ff00000
 8009f88:	40240000 	.word	0x40240000
 8009f8c:	401c0000 	.word	0x401c0000
 8009f90:	40140000 	.word	0x40140000
 8009f94:	3fe00000 	.word	0x3fe00000
 8009f98:	4baf      	ldr	r3, [pc, #700]	; (800a258 <_dtoa_r+0x920>)
 8009f9a:	f7f6 fb2d 	bl	80005f8 <__aeabi_dmul>
 8009f9e:	4606      	mov	r6, r0
 8009fa0:	460f      	mov	r7, r1
 8009fa2:	e7ac      	b.n	8009efe <_dtoa_r+0x5c6>
 8009fa4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009fa8:	9d00      	ldr	r5, [sp, #0]
 8009faa:	4642      	mov	r2, r8
 8009fac:	464b      	mov	r3, r9
 8009fae:	4630      	mov	r0, r6
 8009fb0:	4639      	mov	r1, r7
 8009fb2:	f7f6 fc4b 	bl	800084c <__aeabi_ddiv>
 8009fb6:	f7f6 fdcf 	bl	8000b58 <__aeabi_d2iz>
 8009fba:	9002      	str	r0, [sp, #8]
 8009fbc:	f7f6 fab2 	bl	8000524 <__aeabi_i2d>
 8009fc0:	4642      	mov	r2, r8
 8009fc2:	464b      	mov	r3, r9
 8009fc4:	f7f6 fb18 	bl	80005f8 <__aeabi_dmul>
 8009fc8:	4602      	mov	r2, r0
 8009fca:	460b      	mov	r3, r1
 8009fcc:	4630      	mov	r0, r6
 8009fce:	4639      	mov	r1, r7
 8009fd0:	f7f6 f95a 	bl	8000288 <__aeabi_dsub>
 8009fd4:	9e02      	ldr	r6, [sp, #8]
 8009fd6:	9f01      	ldr	r7, [sp, #4]
 8009fd8:	3630      	adds	r6, #48	; 0x30
 8009fda:	f805 6b01 	strb.w	r6, [r5], #1
 8009fde:	9e00      	ldr	r6, [sp, #0]
 8009fe0:	1bae      	subs	r6, r5, r6
 8009fe2:	42b7      	cmp	r7, r6
 8009fe4:	4602      	mov	r2, r0
 8009fe6:	460b      	mov	r3, r1
 8009fe8:	d137      	bne.n	800a05a <_dtoa_r+0x722>
 8009fea:	f7f6 f94f 	bl	800028c <__adddf3>
 8009fee:	4642      	mov	r2, r8
 8009ff0:	464b      	mov	r3, r9
 8009ff2:	4606      	mov	r6, r0
 8009ff4:	460f      	mov	r7, r1
 8009ff6:	f7f6 fd8f 	bl	8000b18 <__aeabi_dcmpgt>
 8009ffa:	b9c8      	cbnz	r0, 800a030 <_dtoa_r+0x6f8>
 8009ffc:	4642      	mov	r2, r8
 8009ffe:	464b      	mov	r3, r9
 800a000:	4630      	mov	r0, r6
 800a002:	4639      	mov	r1, r7
 800a004:	f7f6 fd60 	bl	8000ac8 <__aeabi_dcmpeq>
 800a008:	b110      	cbz	r0, 800a010 <_dtoa_r+0x6d8>
 800a00a:	9b02      	ldr	r3, [sp, #8]
 800a00c:	07d9      	lsls	r1, r3, #31
 800a00e:	d40f      	bmi.n	800a030 <_dtoa_r+0x6f8>
 800a010:	4620      	mov	r0, r4
 800a012:	4659      	mov	r1, fp
 800a014:	f000 fbd4 	bl	800a7c0 <_Bfree>
 800a018:	2300      	movs	r3, #0
 800a01a:	702b      	strb	r3, [r5, #0]
 800a01c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a01e:	f10a 0001 	add.w	r0, sl, #1
 800a022:	6018      	str	r0, [r3, #0]
 800a024:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a026:	2b00      	cmp	r3, #0
 800a028:	f43f acd8 	beq.w	80099dc <_dtoa_r+0xa4>
 800a02c:	601d      	str	r5, [r3, #0]
 800a02e:	e4d5      	b.n	80099dc <_dtoa_r+0xa4>
 800a030:	f8cd a01c 	str.w	sl, [sp, #28]
 800a034:	462b      	mov	r3, r5
 800a036:	461d      	mov	r5, r3
 800a038:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a03c:	2a39      	cmp	r2, #57	; 0x39
 800a03e:	d108      	bne.n	800a052 <_dtoa_r+0x71a>
 800a040:	9a00      	ldr	r2, [sp, #0]
 800a042:	429a      	cmp	r2, r3
 800a044:	d1f7      	bne.n	800a036 <_dtoa_r+0x6fe>
 800a046:	9a07      	ldr	r2, [sp, #28]
 800a048:	9900      	ldr	r1, [sp, #0]
 800a04a:	3201      	adds	r2, #1
 800a04c:	9207      	str	r2, [sp, #28]
 800a04e:	2230      	movs	r2, #48	; 0x30
 800a050:	700a      	strb	r2, [r1, #0]
 800a052:	781a      	ldrb	r2, [r3, #0]
 800a054:	3201      	adds	r2, #1
 800a056:	701a      	strb	r2, [r3, #0]
 800a058:	e78c      	b.n	8009f74 <_dtoa_r+0x63c>
 800a05a:	4b7f      	ldr	r3, [pc, #508]	; (800a258 <_dtoa_r+0x920>)
 800a05c:	2200      	movs	r2, #0
 800a05e:	f7f6 facb 	bl	80005f8 <__aeabi_dmul>
 800a062:	2200      	movs	r2, #0
 800a064:	2300      	movs	r3, #0
 800a066:	4606      	mov	r6, r0
 800a068:	460f      	mov	r7, r1
 800a06a:	f7f6 fd2d 	bl	8000ac8 <__aeabi_dcmpeq>
 800a06e:	2800      	cmp	r0, #0
 800a070:	d09b      	beq.n	8009faa <_dtoa_r+0x672>
 800a072:	e7cd      	b.n	800a010 <_dtoa_r+0x6d8>
 800a074:	9a08      	ldr	r2, [sp, #32]
 800a076:	2a00      	cmp	r2, #0
 800a078:	f000 80c4 	beq.w	800a204 <_dtoa_r+0x8cc>
 800a07c:	9a05      	ldr	r2, [sp, #20]
 800a07e:	2a01      	cmp	r2, #1
 800a080:	f300 80a8 	bgt.w	800a1d4 <_dtoa_r+0x89c>
 800a084:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a086:	2a00      	cmp	r2, #0
 800a088:	f000 80a0 	beq.w	800a1cc <_dtoa_r+0x894>
 800a08c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a090:	9e06      	ldr	r6, [sp, #24]
 800a092:	4645      	mov	r5, r8
 800a094:	9a04      	ldr	r2, [sp, #16]
 800a096:	2101      	movs	r1, #1
 800a098:	441a      	add	r2, r3
 800a09a:	4620      	mov	r0, r4
 800a09c:	4498      	add	r8, r3
 800a09e:	9204      	str	r2, [sp, #16]
 800a0a0:	f000 fc4a 	bl	800a938 <__i2b>
 800a0a4:	4607      	mov	r7, r0
 800a0a6:	2d00      	cmp	r5, #0
 800a0a8:	dd0b      	ble.n	800a0c2 <_dtoa_r+0x78a>
 800a0aa:	9b04      	ldr	r3, [sp, #16]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	dd08      	ble.n	800a0c2 <_dtoa_r+0x78a>
 800a0b0:	42ab      	cmp	r3, r5
 800a0b2:	9a04      	ldr	r2, [sp, #16]
 800a0b4:	bfa8      	it	ge
 800a0b6:	462b      	movge	r3, r5
 800a0b8:	eba8 0803 	sub.w	r8, r8, r3
 800a0bc:	1aed      	subs	r5, r5, r3
 800a0be:	1ad3      	subs	r3, r2, r3
 800a0c0:	9304      	str	r3, [sp, #16]
 800a0c2:	9b06      	ldr	r3, [sp, #24]
 800a0c4:	b1fb      	cbz	r3, 800a106 <_dtoa_r+0x7ce>
 800a0c6:	9b08      	ldr	r3, [sp, #32]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	f000 809f 	beq.w	800a20c <_dtoa_r+0x8d4>
 800a0ce:	2e00      	cmp	r6, #0
 800a0d0:	dd11      	ble.n	800a0f6 <_dtoa_r+0x7be>
 800a0d2:	4639      	mov	r1, r7
 800a0d4:	4632      	mov	r2, r6
 800a0d6:	4620      	mov	r0, r4
 800a0d8:	f000 fcea 	bl	800aab0 <__pow5mult>
 800a0dc:	465a      	mov	r2, fp
 800a0de:	4601      	mov	r1, r0
 800a0e0:	4607      	mov	r7, r0
 800a0e2:	4620      	mov	r0, r4
 800a0e4:	f000 fc3e 	bl	800a964 <__multiply>
 800a0e8:	4659      	mov	r1, fp
 800a0ea:	9007      	str	r0, [sp, #28]
 800a0ec:	4620      	mov	r0, r4
 800a0ee:	f000 fb67 	bl	800a7c0 <_Bfree>
 800a0f2:	9b07      	ldr	r3, [sp, #28]
 800a0f4:	469b      	mov	fp, r3
 800a0f6:	9b06      	ldr	r3, [sp, #24]
 800a0f8:	1b9a      	subs	r2, r3, r6
 800a0fa:	d004      	beq.n	800a106 <_dtoa_r+0x7ce>
 800a0fc:	4659      	mov	r1, fp
 800a0fe:	4620      	mov	r0, r4
 800a100:	f000 fcd6 	bl	800aab0 <__pow5mult>
 800a104:	4683      	mov	fp, r0
 800a106:	2101      	movs	r1, #1
 800a108:	4620      	mov	r0, r4
 800a10a:	f000 fc15 	bl	800a938 <__i2b>
 800a10e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a110:	2b00      	cmp	r3, #0
 800a112:	4606      	mov	r6, r0
 800a114:	dd7c      	ble.n	800a210 <_dtoa_r+0x8d8>
 800a116:	461a      	mov	r2, r3
 800a118:	4601      	mov	r1, r0
 800a11a:	4620      	mov	r0, r4
 800a11c:	f000 fcc8 	bl	800aab0 <__pow5mult>
 800a120:	9b05      	ldr	r3, [sp, #20]
 800a122:	2b01      	cmp	r3, #1
 800a124:	4606      	mov	r6, r0
 800a126:	dd76      	ble.n	800a216 <_dtoa_r+0x8de>
 800a128:	2300      	movs	r3, #0
 800a12a:	9306      	str	r3, [sp, #24]
 800a12c:	6933      	ldr	r3, [r6, #16]
 800a12e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a132:	6918      	ldr	r0, [r3, #16]
 800a134:	f000 fbb0 	bl	800a898 <__hi0bits>
 800a138:	f1c0 0020 	rsb	r0, r0, #32
 800a13c:	9b04      	ldr	r3, [sp, #16]
 800a13e:	4418      	add	r0, r3
 800a140:	f010 001f 	ands.w	r0, r0, #31
 800a144:	f000 8086 	beq.w	800a254 <_dtoa_r+0x91c>
 800a148:	f1c0 0320 	rsb	r3, r0, #32
 800a14c:	2b04      	cmp	r3, #4
 800a14e:	dd7f      	ble.n	800a250 <_dtoa_r+0x918>
 800a150:	f1c0 001c 	rsb	r0, r0, #28
 800a154:	9b04      	ldr	r3, [sp, #16]
 800a156:	4403      	add	r3, r0
 800a158:	4480      	add	r8, r0
 800a15a:	4405      	add	r5, r0
 800a15c:	9304      	str	r3, [sp, #16]
 800a15e:	f1b8 0f00 	cmp.w	r8, #0
 800a162:	dd05      	ble.n	800a170 <_dtoa_r+0x838>
 800a164:	4659      	mov	r1, fp
 800a166:	4642      	mov	r2, r8
 800a168:	4620      	mov	r0, r4
 800a16a:	f000 fcfb 	bl	800ab64 <__lshift>
 800a16e:	4683      	mov	fp, r0
 800a170:	9b04      	ldr	r3, [sp, #16]
 800a172:	2b00      	cmp	r3, #0
 800a174:	dd05      	ble.n	800a182 <_dtoa_r+0x84a>
 800a176:	4631      	mov	r1, r6
 800a178:	461a      	mov	r2, r3
 800a17a:	4620      	mov	r0, r4
 800a17c:	f000 fcf2 	bl	800ab64 <__lshift>
 800a180:	4606      	mov	r6, r0
 800a182:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a184:	2b00      	cmp	r3, #0
 800a186:	d069      	beq.n	800a25c <_dtoa_r+0x924>
 800a188:	4631      	mov	r1, r6
 800a18a:	4658      	mov	r0, fp
 800a18c:	f000 fd56 	bl	800ac3c <__mcmp>
 800a190:	2800      	cmp	r0, #0
 800a192:	da63      	bge.n	800a25c <_dtoa_r+0x924>
 800a194:	2300      	movs	r3, #0
 800a196:	4659      	mov	r1, fp
 800a198:	220a      	movs	r2, #10
 800a19a:	4620      	mov	r0, r4
 800a19c:	f000 fb32 	bl	800a804 <__multadd>
 800a1a0:	9b08      	ldr	r3, [sp, #32]
 800a1a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a1a6:	4683      	mov	fp, r0
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	f000 818f 	beq.w	800a4cc <_dtoa_r+0xb94>
 800a1ae:	4639      	mov	r1, r7
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	220a      	movs	r2, #10
 800a1b4:	4620      	mov	r0, r4
 800a1b6:	f000 fb25 	bl	800a804 <__multadd>
 800a1ba:	f1b9 0f00 	cmp.w	r9, #0
 800a1be:	4607      	mov	r7, r0
 800a1c0:	f300 808e 	bgt.w	800a2e0 <_dtoa_r+0x9a8>
 800a1c4:	9b05      	ldr	r3, [sp, #20]
 800a1c6:	2b02      	cmp	r3, #2
 800a1c8:	dc50      	bgt.n	800a26c <_dtoa_r+0x934>
 800a1ca:	e089      	b.n	800a2e0 <_dtoa_r+0x9a8>
 800a1cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a1ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a1d2:	e75d      	b.n	800a090 <_dtoa_r+0x758>
 800a1d4:	9b01      	ldr	r3, [sp, #4]
 800a1d6:	1e5e      	subs	r6, r3, #1
 800a1d8:	9b06      	ldr	r3, [sp, #24]
 800a1da:	42b3      	cmp	r3, r6
 800a1dc:	bfbf      	itttt	lt
 800a1de:	9b06      	ldrlt	r3, [sp, #24]
 800a1e0:	9606      	strlt	r6, [sp, #24]
 800a1e2:	1af2      	sublt	r2, r6, r3
 800a1e4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a1e6:	bfb6      	itet	lt
 800a1e8:	189b      	addlt	r3, r3, r2
 800a1ea:	1b9e      	subge	r6, r3, r6
 800a1ec:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a1ee:	9b01      	ldr	r3, [sp, #4]
 800a1f0:	bfb8      	it	lt
 800a1f2:	2600      	movlt	r6, #0
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	bfb5      	itete	lt
 800a1f8:	eba8 0503 	sublt.w	r5, r8, r3
 800a1fc:	9b01      	ldrge	r3, [sp, #4]
 800a1fe:	2300      	movlt	r3, #0
 800a200:	4645      	movge	r5, r8
 800a202:	e747      	b.n	800a094 <_dtoa_r+0x75c>
 800a204:	9e06      	ldr	r6, [sp, #24]
 800a206:	9f08      	ldr	r7, [sp, #32]
 800a208:	4645      	mov	r5, r8
 800a20a:	e74c      	b.n	800a0a6 <_dtoa_r+0x76e>
 800a20c:	9a06      	ldr	r2, [sp, #24]
 800a20e:	e775      	b.n	800a0fc <_dtoa_r+0x7c4>
 800a210:	9b05      	ldr	r3, [sp, #20]
 800a212:	2b01      	cmp	r3, #1
 800a214:	dc18      	bgt.n	800a248 <_dtoa_r+0x910>
 800a216:	9b02      	ldr	r3, [sp, #8]
 800a218:	b9b3      	cbnz	r3, 800a248 <_dtoa_r+0x910>
 800a21a:	9b03      	ldr	r3, [sp, #12]
 800a21c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a220:	b9a3      	cbnz	r3, 800a24c <_dtoa_r+0x914>
 800a222:	9b03      	ldr	r3, [sp, #12]
 800a224:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a228:	0d1b      	lsrs	r3, r3, #20
 800a22a:	051b      	lsls	r3, r3, #20
 800a22c:	b12b      	cbz	r3, 800a23a <_dtoa_r+0x902>
 800a22e:	9b04      	ldr	r3, [sp, #16]
 800a230:	3301      	adds	r3, #1
 800a232:	9304      	str	r3, [sp, #16]
 800a234:	f108 0801 	add.w	r8, r8, #1
 800a238:	2301      	movs	r3, #1
 800a23a:	9306      	str	r3, [sp, #24]
 800a23c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a23e:	2b00      	cmp	r3, #0
 800a240:	f47f af74 	bne.w	800a12c <_dtoa_r+0x7f4>
 800a244:	2001      	movs	r0, #1
 800a246:	e779      	b.n	800a13c <_dtoa_r+0x804>
 800a248:	2300      	movs	r3, #0
 800a24a:	e7f6      	b.n	800a23a <_dtoa_r+0x902>
 800a24c:	9b02      	ldr	r3, [sp, #8]
 800a24e:	e7f4      	b.n	800a23a <_dtoa_r+0x902>
 800a250:	d085      	beq.n	800a15e <_dtoa_r+0x826>
 800a252:	4618      	mov	r0, r3
 800a254:	301c      	adds	r0, #28
 800a256:	e77d      	b.n	800a154 <_dtoa_r+0x81c>
 800a258:	40240000 	.word	0x40240000
 800a25c:	9b01      	ldr	r3, [sp, #4]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	dc38      	bgt.n	800a2d4 <_dtoa_r+0x99c>
 800a262:	9b05      	ldr	r3, [sp, #20]
 800a264:	2b02      	cmp	r3, #2
 800a266:	dd35      	ble.n	800a2d4 <_dtoa_r+0x99c>
 800a268:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a26c:	f1b9 0f00 	cmp.w	r9, #0
 800a270:	d10d      	bne.n	800a28e <_dtoa_r+0x956>
 800a272:	4631      	mov	r1, r6
 800a274:	464b      	mov	r3, r9
 800a276:	2205      	movs	r2, #5
 800a278:	4620      	mov	r0, r4
 800a27a:	f000 fac3 	bl	800a804 <__multadd>
 800a27e:	4601      	mov	r1, r0
 800a280:	4606      	mov	r6, r0
 800a282:	4658      	mov	r0, fp
 800a284:	f000 fcda 	bl	800ac3c <__mcmp>
 800a288:	2800      	cmp	r0, #0
 800a28a:	f73f adbd 	bgt.w	8009e08 <_dtoa_r+0x4d0>
 800a28e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a290:	9d00      	ldr	r5, [sp, #0]
 800a292:	ea6f 0a03 	mvn.w	sl, r3
 800a296:	f04f 0800 	mov.w	r8, #0
 800a29a:	4631      	mov	r1, r6
 800a29c:	4620      	mov	r0, r4
 800a29e:	f000 fa8f 	bl	800a7c0 <_Bfree>
 800a2a2:	2f00      	cmp	r7, #0
 800a2a4:	f43f aeb4 	beq.w	800a010 <_dtoa_r+0x6d8>
 800a2a8:	f1b8 0f00 	cmp.w	r8, #0
 800a2ac:	d005      	beq.n	800a2ba <_dtoa_r+0x982>
 800a2ae:	45b8      	cmp	r8, r7
 800a2b0:	d003      	beq.n	800a2ba <_dtoa_r+0x982>
 800a2b2:	4641      	mov	r1, r8
 800a2b4:	4620      	mov	r0, r4
 800a2b6:	f000 fa83 	bl	800a7c0 <_Bfree>
 800a2ba:	4639      	mov	r1, r7
 800a2bc:	4620      	mov	r0, r4
 800a2be:	f000 fa7f 	bl	800a7c0 <_Bfree>
 800a2c2:	e6a5      	b.n	800a010 <_dtoa_r+0x6d8>
 800a2c4:	2600      	movs	r6, #0
 800a2c6:	4637      	mov	r7, r6
 800a2c8:	e7e1      	b.n	800a28e <_dtoa_r+0x956>
 800a2ca:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a2cc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a2d0:	4637      	mov	r7, r6
 800a2d2:	e599      	b.n	8009e08 <_dtoa_r+0x4d0>
 800a2d4:	9b08      	ldr	r3, [sp, #32]
 800a2d6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	f000 80fd 	beq.w	800a4da <_dtoa_r+0xba2>
 800a2e0:	2d00      	cmp	r5, #0
 800a2e2:	dd05      	ble.n	800a2f0 <_dtoa_r+0x9b8>
 800a2e4:	4639      	mov	r1, r7
 800a2e6:	462a      	mov	r2, r5
 800a2e8:	4620      	mov	r0, r4
 800a2ea:	f000 fc3b 	bl	800ab64 <__lshift>
 800a2ee:	4607      	mov	r7, r0
 800a2f0:	9b06      	ldr	r3, [sp, #24]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d05c      	beq.n	800a3b0 <_dtoa_r+0xa78>
 800a2f6:	6879      	ldr	r1, [r7, #4]
 800a2f8:	4620      	mov	r0, r4
 800a2fa:	f000 fa21 	bl	800a740 <_Balloc>
 800a2fe:	4605      	mov	r5, r0
 800a300:	b928      	cbnz	r0, 800a30e <_dtoa_r+0x9d6>
 800a302:	4b80      	ldr	r3, [pc, #512]	; (800a504 <_dtoa_r+0xbcc>)
 800a304:	4602      	mov	r2, r0
 800a306:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a30a:	f7ff bb2e 	b.w	800996a <_dtoa_r+0x32>
 800a30e:	693a      	ldr	r2, [r7, #16]
 800a310:	3202      	adds	r2, #2
 800a312:	0092      	lsls	r2, r2, #2
 800a314:	f107 010c 	add.w	r1, r7, #12
 800a318:	300c      	adds	r0, #12
 800a31a:	f000 f9f6 	bl	800a70a <memcpy>
 800a31e:	2201      	movs	r2, #1
 800a320:	4629      	mov	r1, r5
 800a322:	4620      	mov	r0, r4
 800a324:	f000 fc1e 	bl	800ab64 <__lshift>
 800a328:	9b00      	ldr	r3, [sp, #0]
 800a32a:	3301      	adds	r3, #1
 800a32c:	9301      	str	r3, [sp, #4]
 800a32e:	9b00      	ldr	r3, [sp, #0]
 800a330:	444b      	add	r3, r9
 800a332:	9307      	str	r3, [sp, #28]
 800a334:	9b02      	ldr	r3, [sp, #8]
 800a336:	f003 0301 	and.w	r3, r3, #1
 800a33a:	46b8      	mov	r8, r7
 800a33c:	9306      	str	r3, [sp, #24]
 800a33e:	4607      	mov	r7, r0
 800a340:	9b01      	ldr	r3, [sp, #4]
 800a342:	4631      	mov	r1, r6
 800a344:	3b01      	subs	r3, #1
 800a346:	4658      	mov	r0, fp
 800a348:	9302      	str	r3, [sp, #8]
 800a34a:	f7ff fa69 	bl	8009820 <quorem>
 800a34e:	4603      	mov	r3, r0
 800a350:	3330      	adds	r3, #48	; 0x30
 800a352:	9004      	str	r0, [sp, #16]
 800a354:	4641      	mov	r1, r8
 800a356:	4658      	mov	r0, fp
 800a358:	9308      	str	r3, [sp, #32]
 800a35a:	f000 fc6f 	bl	800ac3c <__mcmp>
 800a35e:	463a      	mov	r2, r7
 800a360:	4681      	mov	r9, r0
 800a362:	4631      	mov	r1, r6
 800a364:	4620      	mov	r0, r4
 800a366:	f000 fc85 	bl	800ac74 <__mdiff>
 800a36a:	68c2      	ldr	r2, [r0, #12]
 800a36c:	9b08      	ldr	r3, [sp, #32]
 800a36e:	4605      	mov	r5, r0
 800a370:	bb02      	cbnz	r2, 800a3b4 <_dtoa_r+0xa7c>
 800a372:	4601      	mov	r1, r0
 800a374:	4658      	mov	r0, fp
 800a376:	f000 fc61 	bl	800ac3c <__mcmp>
 800a37a:	9b08      	ldr	r3, [sp, #32]
 800a37c:	4602      	mov	r2, r0
 800a37e:	4629      	mov	r1, r5
 800a380:	4620      	mov	r0, r4
 800a382:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a386:	f000 fa1b 	bl	800a7c0 <_Bfree>
 800a38a:	9b05      	ldr	r3, [sp, #20]
 800a38c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a38e:	9d01      	ldr	r5, [sp, #4]
 800a390:	ea43 0102 	orr.w	r1, r3, r2
 800a394:	9b06      	ldr	r3, [sp, #24]
 800a396:	430b      	orrs	r3, r1
 800a398:	9b08      	ldr	r3, [sp, #32]
 800a39a:	d10d      	bne.n	800a3b8 <_dtoa_r+0xa80>
 800a39c:	2b39      	cmp	r3, #57	; 0x39
 800a39e:	d029      	beq.n	800a3f4 <_dtoa_r+0xabc>
 800a3a0:	f1b9 0f00 	cmp.w	r9, #0
 800a3a4:	dd01      	ble.n	800a3aa <_dtoa_r+0xa72>
 800a3a6:	9b04      	ldr	r3, [sp, #16]
 800a3a8:	3331      	adds	r3, #49	; 0x31
 800a3aa:	9a02      	ldr	r2, [sp, #8]
 800a3ac:	7013      	strb	r3, [r2, #0]
 800a3ae:	e774      	b.n	800a29a <_dtoa_r+0x962>
 800a3b0:	4638      	mov	r0, r7
 800a3b2:	e7b9      	b.n	800a328 <_dtoa_r+0x9f0>
 800a3b4:	2201      	movs	r2, #1
 800a3b6:	e7e2      	b.n	800a37e <_dtoa_r+0xa46>
 800a3b8:	f1b9 0f00 	cmp.w	r9, #0
 800a3bc:	db06      	blt.n	800a3cc <_dtoa_r+0xa94>
 800a3be:	9905      	ldr	r1, [sp, #20]
 800a3c0:	ea41 0909 	orr.w	r9, r1, r9
 800a3c4:	9906      	ldr	r1, [sp, #24]
 800a3c6:	ea59 0101 	orrs.w	r1, r9, r1
 800a3ca:	d120      	bne.n	800a40e <_dtoa_r+0xad6>
 800a3cc:	2a00      	cmp	r2, #0
 800a3ce:	ddec      	ble.n	800a3aa <_dtoa_r+0xa72>
 800a3d0:	4659      	mov	r1, fp
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	4620      	mov	r0, r4
 800a3d6:	9301      	str	r3, [sp, #4]
 800a3d8:	f000 fbc4 	bl	800ab64 <__lshift>
 800a3dc:	4631      	mov	r1, r6
 800a3de:	4683      	mov	fp, r0
 800a3e0:	f000 fc2c 	bl	800ac3c <__mcmp>
 800a3e4:	2800      	cmp	r0, #0
 800a3e6:	9b01      	ldr	r3, [sp, #4]
 800a3e8:	dc02      	bgt.n	800a3f0 <_dtoa_r+0xab8>
 800a3ea:	d1de      	bne.n	800a3aa <_dtoa_r+0xa72>
 800a3ec:	07da      	lsls	r2, r3, #31
 800a3ee:	d5dc      	bpl.n	800a3aa <_dtoa_r+0xa72>
 800a3f0:	2b39      	cmp	r3, #57	; 0x39
 800a3f2:	d1d8      	bne.n	800a3a6 <_dtoa_r+0xa6e>
 800a3f4:	9a02      	ldr	r2, [sp, #8]
 800a3f6:	2339      	movs	r3, #57	; 0x39
 800a3f8:	7013      	strb	r3, [r2, #0]
 800a3fa:	462b      	mov	r3, r5
 800a3fc:	461d      	mov	r5, r3
 800a3fe:	3b01      	subs	r3, #1
 800a400:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a404:	2a39      	cmp	r2, #57	; 0x39
 800a406:	d050      	beq.n	800a4aa <_dtoa_r+0xb72>
 800a408:	3201      	adds	r2, #1
 800a40a:	701a      	strb	r2, [r3, #0]
 800a40c:	e745      	b.n	800a29a <_dtoa_r+0x962>
 800a40e:	2a00      	cmp	r2, #0
 800a410:	dd03      	ble.n	800a41a <_dtoa_r+0xae2>
 800a412:	2b39      	cmp	r3, #57	; 0x39
 800a414:	d0ee      	beq.n	800a3f4 <_dtoa_r+0xabc>
 800a416:	3301      	adds	r3, #1
 800a418:	e7c7      	b.n	800a3aa <_dtoa_r+0xa72>
 800a41a:	9a01      	ldr	r2, [sp, #4]
 800a41c:	9907      	ldr	r1, [sp, #28]
 800a41e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a422:	428a      	cmp	r2, r1
 800a424:	d02a      	beq.n	800a47c <_dtoa_r+0xb44>
 800a426:	4659      	mov	r1, fp
 800a428:	2300      	movs	r3, #0
 800a42a:	220a      	movs	r2, #10
 800a42c:	4620      	mov	r0, r4
 800a42e:	f000 f9e9 	bl	800a804 <__multadd>
 800a432:	45b8      	cmp	r8, r7
 800a434:	4683      	mov	fp, r0
 800a436:	f04f 0300 	mov.w	r3, #0
 800a43a:	f04f 020a 	mov.w	r2, #10
 800a43e:	4641      	mov	r1, r8
 800a440:	4620      	mov	r0, r4
 800a442:	d107      	bne.n	800a454 <_dtoa_r+0xb1c>
 800a444:	f000 f9de 	bl	800a804 <__multadd>
 800a448:	4680      	mov	r8, r0
 800a44a:	4607      	mov	r7, r0
 800a44c:	9b01      	ldr	r3, [sp, #4]
 800a44e:	3301      	adds	r3, #1
 800a450:	9301      	str	r3, [sp, #4]
 800a452:	e775      	b.n	800a340 <_dtoa_r+0xa08>
 800a454:	f000 f9d6 	bl	800a804 <__multadd>
 800a458:	4639      	mov	r1, r7
 800a45a:	4680      	mov	r8, r0
 800a45c:	2300      	movs	r3, #0
 800a45e:	220a      	movs	r2, #10
 800a460:	4620      	mov	r0, r4
 800a462:	f000 f9cf 	bl	800a804 <__multadd>
 800a466:	4607      	mov	r7, r0
 800a468:	e7f0      	b.n	800a44c <_dtoa_r+0xb14>
 800a46a:	f1b9 0f00 	cmp.w	r9, #0
 800a46e:	9a00      	ldr	r2, [sp, #0]
 800a470:	bfcc      	ite	gt
 800a472:	464d      	movgt	r5, r9
 800a474:	2501      	movle	r5, #1
 800a476:	4415      	add	r5, r2
 800a478:	f04f 0800 	mov.w	r8, #0
 800a47c:	4659      	mov	r1, fp
 800a47e:	2201      	movs	r2, #1
 800a480:	4620      	mov	r0, r4
 800a482:	9301      	str	r3, [sp, #4]
 800a484:	f000 fb6e 	bl	800ab64 <__lshift>
 800a488:	4631      	mov	r1, r6
 800a48a:	4683      	mov	fp, r0
 800a48c:	f000 fbd6 	bl	800ac3c <__mcmp>
 800a490:	2800      	cmp	r0, #0
 800a492:	dcb2      	bgt.n	800a3fa <_dtoa_r+0xac2>
 800a494:	d102      	bne.n	800a49c <_dtoa_r+0xb64>
 800a496:	9b01      	ldr	r3, [sp, #4]
 800a498:	07db      	lsls	r3, r3, #31
 800a49a:	d4ae      	bmi.n	800a3fa <_dtoa_r+0xac2>
 800a49c:	462b      	mov	r3, r5
 800a49e:	461d      	mov	r5, r3
 800a4a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a4a4:	2a30      	cmp	r2, #48	; 0x30
 800a4a6:	d0fa      	beq.n	800a49e <_dtoa_r+0xb66>
 800a4a8:	e6f7      	b.n	800a29a <_dtoa_r+0x962>
 800a4aa:	9a00      	ldr	r2, [sp, #0]
 800a4ac:	429a      	cmp	r2, r3
 800a4ae:	d1a5      	bne.n	800a3fc <_dtoa_r+0xac4>
 800a4b0:	f10a 0a01 	add.w	sl, sl, #1
 800a4b4:	2331      	movs	r3, #49	; 0x31
 800a4b6:	e779      	b.n	800a3ac <_dtoa_r+0xa74>
 800a4b8:	4b13      	ldr	r3, [pc, #76]	; (800a508 <_dtoa_r+0xbd0>)
 800a4ba:	f7ff baaf 	b.w	8009a1c <_dtoa_r+0xe4>
 800a4be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	f47f aa86 	bne.w	80099d2 <_dtoa_r+0x9a>
 800a4c6:	4b11      	ldr	r3, [pc, #68]	; (800a50c <_dtoa_r+0xbd4>)
 800a4c8:	f7ff baa8 	b.w	8009a1c <_dtoa_r+0xe4>
 800a4cc:	f1b9 0f00 	cmp.w	r9, #0
 800a4d0:	dc03      	bgt.n	800a4da <_dtoa_r+0xba2>
 800a4d2:	9b05      	ldr	r3, [sp, #20]
 800a4d4:	2b02      	cmp	r3, #2
 800a4d6:	f73f aec9 	bgt.w	800a26c <_dtoa_r+0x934>
 800a4da:	9d00      	ldr	r5, [sp, #0]
 800a4dc:	4631      	mov	r1, r6
 800a4de:	4658      	mov	r0, fp
 800a4e0:	f7ff f99e 	bl	8009820 <quorem>
 800a4e4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a4e8:	f805 3b01 	strb.w	r3, [r5], #1
 800a4ec:	9a00      	ldr	r2, [sp, #0]
 800a4ee:	1aaa      	subs	r2, r5, r2
 800a4f0:	4591      	cmp	r9, r2
 800a4f2:	ddba      	ble.n	800a46a <_dtoa_r+0xb32>
 800a4f4:	4659      	mov	r1, fp
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	220a      	movs	r2, #10
 800a4fa:	4620      	mov	r0, r4
 800a4fc:	f000 f982 	bl	800a804 <__multadd>
 800a500:	4683      	mov	fp, r0
 800a502:	e7eb      	b.n	800a4dc <_dtoa_r+0xba4>
 800a504:	0800c113 	.word	0x0800c113
 800a508:	0800c06c 	.word	0x0800c06c
 800a50c:	0800c090 	.word	0x0800c090

0800a510 <std>:
 800a510:	2300      	movs	r3, #0
 800a512:	b510      	push	{r4, lr}
 800a514:	4604      	mov	r4, r0
 800a516:	e9c0 3300 	strd	r3, r3, [r0]
 800a51a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a51e:	6083      	str	r3, [r0, #8]
 800a520:	8181      	strh	r1, [r0, #12]
 800a522:	6643      	str	r3, [r0, #100]	; 0x64
 800a524:	81c2      	strh	r2, [r0, #14]
 800a526:	6183      	str	r3, [r0, #24]
 800a528:	4619      	mov	r1, r3
 800a52a:	2208      	movs	r2, #8
 800a52c:	305c      	adds	r0, #92	; 0x5c
 800a52e:	f7fe fbff 	bl	8008d30 <memset>
 800a532:	4b05      	ldr	r3, [pc, #20]	; (800a548 <std+0x38>)
 800a534:	6263      	str	r3, [r4, #36]	; 0x24
 800a536:	4b05      	ldr	r3, [pc, #20]	; (800a54c <std+0x3c>)
 800a538:	62a3      	str	r3, [r4, #40]	; 0x28
 800a53a:	4b05      	ldr	r3, [pc, #20]	; (800a550 <std+0x40>)
 800a53c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a53e:	4b05      	ldr	r3, [pc, #20]	; (800a554 <std+0x44>)
 800a540:	6224      	str	r4, [r4, #32]
 800a542:	6323      	str	r3, [r4, #48]	; 0x30
 800a544:	bd10      	pop	{r4, pc}
 800a546:	bf00      	nop
 800a548:	0800b3c5 	.word	0x0800b3c5
 800a54c:	0800b3e7 	.word	0x0800b3e7
 800a550:	0800b41f 	.word	0x0800b41f
 800a554:	0800b443 	.word	0x0800b443

0800a558 <_cleanup_r>:
 800a558:	4901      	ldr	r1, [pc, #4]	; (800a560 <_cleanup_r+0x8>)
 800a55a:	f000 b8af 	b.w	800a6bc <_fwalk_reent>
 800a55e:	bf00      	nop
 800a560:	0800b759 	.word	0x0800b759

0800a564 <__sfmoreglue>:
 800a564:	b570      	push	{r4, r5, r6, lr}
 800a566:	1e4a      	subs	r2, r1, #1
 800a568:	2568      	movs	r5, #104	; 0x68
 800a56a:	4355      	muls	r5, r2
 800a56c:	460e      	mov	r6, r1
 800a56e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a572:	f7fe fc35 	bl	8008de0 <_malloc_r>
 800a576:	4604      	mov	r4, r0
 800a578:	b140      	cbz	r0, 800a58c <__sfmoreglue+0x28>
 800a57a:	2100      	movs	r1, #0
 800a57c:	e9c0 1600 	strd	r1, r6, [r0]
 800a580:	300c      	adds	r0, #12
 800a582:	60a0      	str	r0, [r4, #8]
 800a584:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a588:	f7fe fbd2 	bl	8008d30 <memset>
 800a58c:	4620      	mov	r0, r4
 800a58e:	bd70      	pop	{r4, r5, r6, pc}

0800a590 <__sfp_lock_acquire>:
 800a590:	4801      	ldr	r0, [pc, #4]	; (800a598 <__sfp_lock_acquire+0x8>)
 800a592:	f000 b8b8 	b.w	800a706 <__retarget_lock_acquire_recursive>
 800a596:	bf00      	nop
 800a598:	20004298 	.word	0x20004298

0800a59c <__sfp_lock_release>:
 800a59c:	4801      	ldr	r0, [pc, #4]	; (800a5a4 <__sfp_lock_release+0x8>)
 800a59e:	f000 b8b3 	b.w	800a708 <__retarget_lock_release_recursive>
 800a5a2:	bf00      	nop
 800a5a4:	20004298 	.word	0x20004298

0800a5a8 <__sinit_lock_acquire>:
 800a5a8:	4801      	ldr	r0, [pc, #4]	; (800a5b0 <__sinit_lock_acquire+0x8>)
 800a5aa:	f000 b8ac 	b.w	800a706 <__retarget_lock_acquire_recursive>
 800a5ae:	bf00      	nop
 800a5b0:	20004293 	.word	0x20004293

0800a5b4 <__sinit_lock_release>:
 800a5b4:	4801      	ldr	r0, [pc, #4]	; (800a5bc <__sinit_lock_release+0x8>)
 800a5b6:	f000 b8a7 	b.w	800a708 <__retarget_lock_release_recursive>
 800a5ba:	bf00      	nop
 800a5bc:	20004293 	.word	0x20004293

0800a5c0 <__sinit>:
 800a5c0:	b510      	push	{r4, lr}
 800a5c2:	4604      	mov	r4, r0
 800a5c4:	f7ff fff0 	bl	800a5a8 <__sinit_lock_acquire>
 800a5c8:	69a3      	ldr	r3, [r4, #24]
 800a5ca:	b11b      	cbz	r3, 800a5d4 <__sinit+0x14>
 800a5cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5d0:	f7ff bff0 	b.w	800a5b4 <__sinit_lock_release>
 800a5d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a5d8:	6523      	str	r3, [r4, #80]	; 0x50
 800a5da:	4b13      	ldr	r3, [pc, #76]	; (800a628 <__sinit+0x68>)
 800a5dc:	4a13      	ldr	r2, [pc, #76]	; (800a62c <__sinit+0x6c>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	62a2      	str	r2, [r4, #40]	; 0x28
 800a5e2:	42a3      	cmp	r3, r4
 800a5e4:	bf04      	itt	eq
 800a5e6:	2301      	moveq	r3, #1
 800a5e8:	61a3      	streq	r3, [r4, #24]
 800a5ea:	4620      	mov	r0, r4
 800a5ec:	f000 f820 	bl	800a630 <__sfp>
 800a5f0:	6060      	str	r0, [r4, #4]
 800a5f2:	4620      	mov	r0, r4
 800a5f4:	f000 f81c 	bl	800a630 <__sfp>
 800a5f8:	60a0      	str	r0, [r4, #8]
 800a5fa:	4620      	mov	r0, r4
 800a5fc:	f000 f818 	bl	800a630 <__sfp>
 800a600:	2200      	movs	r2, #0
 800a602:	60e0      	str	r0, [r4, #12]
 800a604:	2104      	movs	r1, #4
 800a606:	6860      	ldr	r0, [r4, #4]
 800a608:	f7ff ff82 	bl	800a510 <std>
 800a60c:	68a0      	ldr	r0, [r4, #8]
 800a60e:	2201      	movs	r2, #1
 800a610:	2109      	movs	r1, #9
 800a612:	f7ff ff7d 	bl	800a510 <std>
 800a616:	68e0      	ldr	r0, [r4, #12]
 800a618:	2202      	movs	r2, #2
 800a61a:	2112      	movs	r1, #18
 800a61c:	f7ff ff78 	bl	800a510 <std>
 800a620:	2301      	movs	r3, #1
 800a622:	61a3      	str	r3, [r4, #24]
 800a624:	e7d2      	b.n	800a5cc <__sinit+0xc>
 800a626:	bf00      	nop
 800a628:	0800c058 	.word	0x0800c058
 800a62c:	0800a559 	.word	0x0800a559

0800a630 <__sfp>:
 800a630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a632:	4607      	mov	r7, r0
 800a634:	f7ff ffac 	bl	800a590 <__sfp_lock_acquire>
 800a638:	4b1e      	ldr	r3, [pc, #120]	; (800a6b4 <__sfp+0x84>)
 800a63a:	681e      	ldr	r6, [r3, #0]
 800a63c:	69b3      	ldr	r3, [r6, #24]
 800a63e:	b913      	cbnz	r3, 800a646 <__sfp+0x16>
 800a640:	4630      	mov	r0, r6
 800a642:	f7ff ffbd 	bl	800a5c0 <__sinit>
 800a646:	3648      	adds	r6, #72	; 0x48
 800a648:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a64c:	3b01      	subs	r3, #1
 800a64e:	d503      	bpl.n	800a658 <__sfp+0x28>
 800a650:	6833      	ldr	r3, [r6, #0]
 800a652:	b30b      	cbz	r3, 800a698 <__sfp+0x68>
 800a654:	6836      	ldr	r6, [r6, #0]
 800a656:	e7f7      	b.n	800a648 <__sfp+0x18>
 800a658:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a65c:	b9d5      	cbnz	r5, 800a694 <__sfp+0x64>
 800a65e:	4b16      	ldr	r3, [pc, #88]	; (800a6b8 <__sfp+0x88>)
 800a660:	60e3      	str	r3, [r4, #12]
 800a662:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a666:	6665      	str	r5, [r4, #100]	; 0x64
 800a668:	f000 f84c 	bl	800a704 <__retarget_lock_init_recursive>
 800a66c:	f7ff ff96 	bl	800a59c <__sfp_lock_release>
 800a670:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a674:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a678:	6025      	str	r5, [r4, #0]
 800a67a:	61a5      	str	r5, [r4, #24]
 800a67c:	2208      	movs	r2, #8
 800a67e:	4629      	mov	r1, r5
 800a680:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a684:	f7fe fb54 	bl	8008d30 <memset>
 800a688:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a68c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a690:	4620      	mov	r0, r4
 800a692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a694:	3468      	adds	r4, #104	; 0x68
 800a696:	e7d9      	b.n	800a64c <__sfp+0x1c>
 800a698:	2104      	movs	r1, #4
 800a69a:	4638      	mov	r0, r7
 800a69c:	f7ff ff62 	bl	800a564 <__sfmoreglue>
 800a6a0:	4604      	mov	r4, r0
 800a6a2:	6030      	str	r0, [r6, #0]
 800a6a4:	2800      	cmp	r0, #0
 800a6a6:	d1d5      	bne.n	800a654 <__sfp+0x24>
 800a6a8:	f7ff ff78 	bl	800a59c <__sfp_lock_release>
 800a6ac:	230c      	movs	r3, #12
 800a6ae:	603b      	str	r3, [r7, #0]
 800a6b0:	e7ee      	b.n	800a690 <__sfp+0x60>
 800a6b2:	bf00      	nop
 800a6b4:	0800c058 	.word	0x0800c058
 800a6b8:	ffff0001 	.word	0xffff0001

0800a6bc <_fwalk_reent>:
 800a6bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6c0:	4606      	mov	r6, r0
 800a6c2:	4688      	mov	r8, r1
 800a6c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a6c8:	2700      	movs	r7, #0
 800a6ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a6ce:	f1b9 0901 	subs.w	r9, r9, #1
 800a6d2:	d505      	bpl.n	800a6e0 <_fwalk_reent+0x24>
 800a6d4:	6824      	ldr	r4, [r4, #0]
 800a6d6:	2c00      	cmp	r4, #0
 800a6d8:	d1f7      	bne.n	800a6ca <_fwalk_reent+0xe>
 800a6da:	4638      	mov	r0, r7
 800a6dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6e0:	89ab      	ldrh	r3, [r5, #12]
 800a6e2:	2b01      	cmp	r3, #1
 800a6e4:	d907      	bls.n	800a6f6 <_fwalk_reent+0x3a>
 800a6e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a6ea:	3301      	adds	r3, #1
 800a6ec:	d003      	beq.n	800a6f6 <_fwalk_reent+0x3a>
 800a6ee:	4629      	mov	r1, r5
 800a6f0:	4630      	mov	r0, r6
 800a6f2:	47c0      	blx	r8
 800a6f4:	4307      	orrs	r7, r0
 800a6f6:	3568      	adds	r5, #104	; 0x68
 800a6f8:	e7e9      	b.n	800a6ce <_fwalk_reent+0x12>
	...

0800a6fc <_localeconv_r>:
 800a6fc:	4800      	ldr	r0, [pc, #0]	; (800a700 <_localeconv_r+0x4>)
 800a6fe:	4770      	bx	lr
 800a700:	20000168 	.word	0x20000168

0800a704 <__retarget_lock_init_recursive>:
 800a704:	4770      	bx	lr

0800a706 <__retarget_lock_acquire_recursive>:
 800a706:	4770      	bx	lr

0800a708 <__retarget_lock_release_recursive>:
 800a708:	4770      	bx	lr

0800a70a <memcpy>:
 800a70a:	440a      	add	r2, r1
 800a70c:	4291      	cmp	r1, r2
 800a70e:	f100 33ff 	add.w	r3, r0, #4294967295
 800a712:	d100      	bne.n	800a716 <memcpy+0xc>
 800a714:	4770      	bx	lr
 800a716:	b510      	push	{r4, lr}
 800a718:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a71c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a720:	4291      	cmp	r1, r2
 800a722:	d1f9      	bne.n	800a718 <memcpy+0xe>
 800a724:	bd10      	pop	{r4, pc}
	...

0800a728 <__malloc_lock>:
 800a728:	4801      	ldr	r0, [pc, #4]	; (800a730 <__malloc_lock+0x8>)
 800a72a:	f7ff bfec 	b.w	800a706 <__retarget_lock_acquire_recursive>
 800a72e:	bf00      	nop
 800a730:	20004294 	.word	0x20004294

0800a734 <__malloc_unlock>:
 800a734:	4801      	ldr	r0, [pc, #4]	; (800a73c <__malloc_unlock+0x8>)
 800a736:	f7ff bfe7 	b.w	800a708 <__retarget_lock_release_recursive>
 800a73a:	bf00      	nop
 800a73c:	20004294 	.word	0x20004294

0800a740 <_Balloc>:
 800a740:	b570      	push	{r4, r5, r6, lr}
 800a742:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a744:	4604      	mov	r4, r0
 800a746:	460d      	mov	r5, r1
 800a748:	b976      	cbnz	r6, 800a768 <_Balloc+0x28>
 800a74a:	2010      	movs	r0, #16
 800a74c:	f7fe fae8 	bl	8008d20 <malloc>
 800a750:	4602      	mov	r2, r0
 800a752:	6260      	str	r0, [r4, #36]	; 0x24
 800a754:	b920      	cbnz	r0, 800a760 <_Balloc+0x20>
 800a756:	4b18      	ldr	r3, [pc, #96]	; (800a7b8 <_Balloc+0x78>)
 800a758:	4818      	ldr	r0, [pc, #96]	; (800a7bc <_Balloc+0x7c>)
 800a75a:	2166      	movs	r1, #102	; 0x66
 800a75c:	f000 ff48 	bl	800b5f0 <__assert_func>
 800a760:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a764:	6006      	str	r6, [r0, #0]
 800a766:	60c6      	str	r6, [r0, #12]
 800a768:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a76a:	68f3      	ldr	r3, [r6, #12]
 800a76c:	b183      	cbz	r3, 800a790 <_Balloc+0x50>
 800a76e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a770:	68db      	ldr	r3, [r3, #12]
 800a772:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a776:	b9b8      	cbnz	r0, 800a7a8 <_Balloc+0x68>
 800a778:	2101      	movs	r1, #1
 800a77a:	fa01 f605 	lsl.w	r6, r1, r5
 800a77e:	1d72      	adds	r2, r6, #5
 800a780:	0092      	lsls	r2, r2, #2
 800a782:	4620      	mov	r0, r4
 800a784:	f000 fb5a 	bl	800ae3c <_calloc_r>
 800a788:	b160      	cbz	r0, 800a7a4 <_Balloc+0x64>
 800a78a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a78e:	e00e      	b.n	800a7ae <_Balloc+0x6e>
 800a790:	2221      	movs	r2, #33	; 0x21
 800a792:	2104      	movs	r1, #4
 800a794:	4620      	mov	r0, r4
 800a796:	f000 fb51 	bl	800ae3c <_calloc_r>
 800a79a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a79c:	60f0      	str	r0, [r6, #12]
 800a79e:	68db      	ldr	r3, [r3, #12]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d1e4      	bne.n	800a76e <_Balloc+0x2e>
 800a7a4:	2000      	movs	r0, #0
 800a7a6:	bd70      	pop	{r4, r5, r6, pc}
 800a7a8:	6802      	ldr	r2, [r0, #0]
 800a7aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a7b4:	e7f7      	b.n	800a7a6 <_Balloc+0x66>
 800a7b6:	bf00      	nop
 800a7b8:	0800c09d 	.word	0x0800c09d
 800a7bc:	0800c184 	.word	0x0800c184

0800a7c0 <_Bfree>:
 800a7c0:	b570      	push	{r4, r5, r6, lr}
 800a7c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a7c4:	4605      	mov	r5, r0
 800a7c6:	460c      	mov	r4, r1
 800a7c8:	b976      	cbnz	r6, 800a7e8 <_Bfree+0x28>
 800a7ca:	2010      	movs	r0, #16
 800a7cc:	f7fe faa8 	bl	8008d20 <malloc>
 800a7d0:	4602      	mov	r2, r0
 800a7d2:	6268      	str	r0, [r5, #36]	; 0x24
 800a7d4:	b920      	cbnz	r0, 800a7e0 <_Bfree+0x20>
 800a7d6:	4b09      	ldr	r3, [pc, #36]	; (800a7fc <_Bfree+0x3c>)
 800a7d8:	4809      	ldr	r0, [pc, #36]	; (800a800 <_Bfree+0x40>)
 800a7da:	218a      	movs	r1, #138	; 0x8a
 800a7dc:	f000 ff08 	bl	800b5f0 <__assert_func>
 800a7e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a7e4:	6006      	str	r6, [r0, #0]
 800a7e6:	60c6      	str	r6, [r0, #12]
 800a7e8:	b13c      	cbz	r4, 800a7fa <_Bfree+0x3a>
 800a7ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a7ec:	6862      	ldr	r2, [r4, #4]
 800a7ee:	68db      	ldr	r3, [r3, #12]
 800a7f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a7f4:	6021      	str	r1, [r4, #0]
 800a7f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a7fa:	bd70      	pop	{r4, r5, r6, pc}
 800a7fc:	0800c09d 	.word	0x0800c09d
 800a800:	0800c184 	.word	0x0800c184

0800a804 <__multadd>:
 800a804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a808:	690e      	ldr	r6, [r1, #16]
 800a80a:	4607      	mov	r7, r0
 800a80c:	4698      	mov	r8, r3
 800a80e:	460c      	mov	r4, r1
 800a810:	f101 0014 	add.w	r0, r1, #20
 800a814:	2300      	movs	r3, #0
 800a816:	6805      	ldr	r5, [r0, #0]
 800a818:	b2a9      	uxth	r1, r5
 800a81a:	fb02 8101 	mla	r1, r2, r1, r8
 800a81e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a822:	0c2d      	lsrs	r5, r5, #16
 800a824:	fb02 c505 	mla	r5, r2, r5, ip
 800a828:	b289      	uxth	r1, r1
 800a82a:	3301      	adds	r3, #1
 800a82c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a830:	429e      	cmp	r6, r3
 800a832:	f840 1b04 	str.w	r1, [r0], #4
 800a836:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a83a:	dcec      	bgt.n	800a816 <__multadd+0x12>
 800a83c:	f1b8 0f00 	cmp.w	r8, #0
 800a840:	d022      	beq.n	800a888 <__multadd+0x84>
 800a842:	68a3      	ldr	r3, [r4, #8]
 800a844:	42b3      	cmp	r3, r6
 800a846:	dc19      	bgt.n	800a87c <__multadd+0x78>
 800a848:	6861      	ldr	r1, [r4, #4]
 800a84a:	4638      	mov	r0, r7
 800a84c:	3101      	adds	r1, #1
 800a84e:	f7ff ff77 	bl	800a740 <_Balloc>
 800a852:	4605      	mov	r5, r0
 800a854:	b928      	cbnz	r0, 800a862 <__multadd+0x5e>
 800a856:	4602      	mov	r2, r0
 800a858:	4b0d      	ldr	r3, [pc, #52]	; (800a890 <__multadd+0x8c>)
 800a85a:	480e      	ldr	r0, [pc, #56]	; (800a894 <__multadd+0x90>)
 800a85c:	21b5      	movs	r1, #181	; 0xb5
 800a85e:	f000 fec7 	bl	800b5f0 <__assert_func>
 800a862:	6922      	ldr	r2, [r4, #16]
 800a864:	3202      	adds	r2, #2
 800a866:	f104 010c 	add.w	r1, r4, #12
 800a86a:	0092      	lsls	r2, r2, #2
 800a86c:	300c      	adds	r0, #12
 800a86e:	f7ff ff4c 	bl	800a70a <memcpy>
 800a872:	4621      	mov	r1, r4
 800a874:	4638      	mov	r0, r7
 800a876:	f7ff ffa3 	bl	800a7c0 <_Bfree>
 800a87a:	462c      	mov	r4, r5
 800a87c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a880:	3601      	adds	r6, #1
 800a882:	f8c3 8014 	str.w	r8, [r3, #20]
 800a886:	6126      	str	r6, [r4, #16]
 800a888:	4620      	mov	r0, r4
 800a88a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a88e:	bf00      	nop
 800a890:	0800c113 	.word	0x0800c113
 800a894:	0800c184 	.word	0x0800c184

0800a898 <__hi0bits>:
 800a898:	0c03      	lsrs	r3, r0, #16
 800a89a:	041b      	lsls	r3, r3, #16
 800a89c:	b9d3      	cbnz	r3, 800a8d4 <__hi0bits+0x3c>
 800a89e:	0400      	lsls	r0, r0, #16
 800a8a0:	2310      	movs	r3, #16
 800a8a2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a8a6:	bf04      	itt	eq
 800a8a8:	0200      	lsleq	r0, r0, #8
 800a8aa:	3308      	addeq	r3, #8
 800a8ac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a8b0:	bf04      	itt	eq
 800a8b2:	0100      	lsleq	r0, r0, #4
 800a8b4:	3304      	addeq	r3, #4
 800a8b6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a8ba:	bf04      	itt	eq
 800a8bc:	0080      	lsleq	r0, r0, #2
 800a8be:	3302      	addeq	r3, #2
 800a8c0:	2800      	cmp	r0, #0
 800a8c2:	db05      	blt.n	800a8d0 <__hi0bits+0x38>
 800a8c4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a8c8:	f103 0301 	add.w	r3, r3, #1
 800a8cc:	bf08      	it	eq
 800a8ce:	2320      	moveq	r3, #32
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	4770      	bx	lr
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	e7e4      	b.n	800a8a2 <__hi0bits+0xa>

0800a8d8 <__lo0bits>:
 800a8d8:	6803      	ldr	r3, [r0, #0]
 800a8da:	f013 0207 	ands.w	r2, r3, #7
 800a8de:	4601      	mov	r1, r0
 800a8e0:	d00b      	beq.n	800a8fa <__lo0bits+0x22>
 800a8e2:	07da      	lsls	r2, r3, #31
 800a8e4:	d424      	bmi.n	800a930 <__lo0bits+0x58>
 800a8e6:	0798      	lsls	r0, r3, #30
 800a8e8:	bf49      	itett	mi
 800a8ea:	085b      	lsrmi	r3, r3, #1
 800a8ec:	089b      	lsrpl	r3, r3, #2
 800a8ee:	2001      	movmi	r0, #1
 800a8f0:	600b      	strmi	r3, [r1, #0]
 800a8f2:	bf5c      	itt	pl
 800a8f4:	600b      	strpl	r3, [r1, #0]
 800a8f6:	2002      	movpl	r0, #2
 800a8f8:	4770      	bx	lr
 800a8fa:	b298      	uxth	r0, r3
 800a8fc:	b9b0      	cbnz	r0, 800a92c <__lo0bits+0x54>
 800a8fe:	0c1b      	lsrs	r3, r3, #16
 800a900:	2010      	movs	r0, #16
 800a902:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a906:	bf04      	itt	eq
 800a908:	0a1b      	lsreq	r3, r3, #8
 800a90a:	3008      	addeq	r0, #8
 800a90c:	071a      	lsls	r2, r3, #28
 800a90e:	bf04      	itt	eq
 800a910:	091b      	lsreq	r3, r3, #4
 800a912:	3004      	addeq	r0, #4
 800a914:	079a      	lsls	r2, r3, #30
 800a916:	bf04      	itt	eq
 800a918:	089b      	lsreq	r3, r3, #2
 800a91a:	3002      	addeq	r0, #2
 800a91c:	07da      	lsls	r2, r3, #31
 800a91e:	d403      	bmi.n	800a928 <__lo0bits+0x50>
 800a920:	085b      	lsrs	r3, r3, #1
 800a922:	f100 0001 	add.w	r0, r0, #1
 800a926:	d005      	beq.n	800a934 <__lo0bits+0x5c>
 800a928:	600b      	str	r3, [r1, #0]
 800a92a:	4770      	bx	lr
 800a92c:	4610      	mov	r0, r2
 800a92e:	e7e8      	b.n	800a902 <__lo0bits+0x2a>
 800a930:	2000      	movs	r0, #0
 800a932:	4770      	bx	lr
 800a934:	2020      	movs	r0, #32
 800a936:	4770      	bx	lr

0800a938 <__i2b>:
 800a938:	b510      	push	{r4, lr}
 800a93a:	460c      	mov	r4, r1
 800a93c:	2101      	movs	r1, #1
 800a93e:	f7ff feff 	bl	800a740 <_Balloc>
 800a942:	4602      	mov	r2, r0
 800a944:	b928      	cbnz	r0, 800a952 <__i2b+0x1a>
 800a946:	4b05      	ldr	r3, [pc, #20]	; (800a95c <__i2b+0x24>)
 800a948:	4805      	ldr	r0, [pc, #20]	; (800a960 <__i2b+0x28>)
 800a94a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a94e:	f000 fe4f 	bl	800b5f0 <__assert_func>
 800a952:	2301      	movs	r3, #1
 800a954:	6144      	str	r4, [r0, #20]
 800a956:	6103      	str	r3, [r0, #16]
 800a958:	bd10      	pop	{r4, pc}
 800a95a:	bf00      	nop
 800a95c:	0800c113 	.word	0x0800c113
 800a960:	0800c184 	.word	0x0800c184

0800a964 <__multiply>:
 800a964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a968:	4614      	mov	r4, r2
 800a96a:	690a      	ldr	r2, [r1, #16]
 800a96c:	6923      	ldr	r3, [r4, #16]
 800a96e:	429a      	cmp	r2, r3
 800a970:	bfb8      	it	lt
 800a972:	460b      	movlt	r3, r1
 800a974:	460d      	mov	r5, r1
 800a976:	bfbc      	itt	lt
 800a978:	4625      	movlt	r5, r4
 800a97a:	461c      	movlt	r4, r3
 800a97c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a980:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a984:	68ab      	ldr	r3, [r5, #8]
 800a986:	6869      	ldr	r1, [r5, #4]
 800a988:	eb0a 0709 	add.w	r7, sl, r9
 800a98c:	42bb      	cmp	r3, r7
 800a98e:	b085      	sub	sp, #20
 800a990:	bfb8      	it	lt
 800a992:	3101      	addlt	r1, #1
 800a994:	f7ff fed4 	bl	800a740 <_Balloc>
 800a998:	b930      	cbnz	r0, 800a9a8 <__multiply+0x44>
 800a99a:	4602      	mov	r2, r0
 800a99c:	4b42      	ldr	r3, [pc, #264]	; (800aaa8 <__multiply+0x144>)
 800a99e:	4843      	ldr	r0, [pc, #268]	; (800aaac <__multiply+0x148>)
 800a9a0:	f240 115d 	movw	r1, #349	; 0x15d
 800a9a4:	f000 fe24 	bl	800b5f0 <__assert_func>
 800a9a8:	f100 0614 	add.w	r6, r0, #20
 800a9ac:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a9b0:	4633      	mov	r3, r6
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	4543      	cmp	r3, r8
 800a9b6:	d31e      	bcc.n	800a9f6 <__multiply+0x92>
 800a9b8:	f105 0c14 	add.w	ip, r5, #20
 800a9bc:	f104 0314 	add.w	r3, r4, #20
 800a9c0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a9c4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a9c8:	9202      	str	r2, [sp, #8]
 800a9ca:	ebac 0205 	sub.w	r2, ip, r5
 800a9ce:	3a15      	subs	r2, #21
 800a9d0:	f022 0203 	bic.w	r2, r2, #3
 800a9d4:	3204      	adds	r2, #4
 800a9d6:	f105 0115 	add.w	r1, r5, #21
 800a9da:	458c      	cmp	ip, r1
 800a9dc:	bf38      	it	cc
 800a9de:	2204      	movcc	r2, #4
 800a9e0:	9201      	str	r2, [sp, #4]
 800a9e2:	9a02      	ldr	r2, [sp, #8]
 800a9e4:	9303      	str	r3, [sp, #12]
 800a9e6:	429a      	cmp	r2, r3
 800a9e8:	d808      	bhi.n	800a9fc <__multiply+0x98>
 800a9ea:	2f00      	cmp	r7, #0
 800a9ec:	dc55      	bgt.n	800aa9a <__multiply+0x136>
 800a9ee:	6107      	str	r7, [r0, #16]
 800a9f0:	b005      	add	sp, #20
 800a9f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9f6:	f843 2b04 	str.w	r2, [r3], #4
 800a9fa:	e7db      	b.n	800a9b4 <__multiply+0x50>
 800a9fc:	f8b3 a000 	ldrh.w	sl, [r3]
 800aa00:	f1ba 0f00 	cmp.w	sl, #0
 800aa04:	d020      	beq.n	800aa48 <__multiply+0xe4>
 800aa06:	f105 0e14 	add.w	lr, r5, #20
 800aa0a:	46b1      	mov	r9, r6
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800aa12:	f8d9 b000 	ldr.w	fp, [r9]
 800aa16:	b2a1      	uxth	r1, r4
 800aa18:	fa1f fb8b 	uxth.w	fp, fp
 800aa1c:	fb0a b101 	mla	r1, sl, r1, fp
 800aa20:	4411      	add	r1, r2
 800aa22:	f8d9 2000 	ldr.w	r2, [r9]
 800aa26:	0c24      	lsrs	r4, r4, #16
 800aa28:	0c12      	lsrs	r2, r2, #16
 800aa2a:	fb0a 2404 	mla	r4, sl, r4, r2
 800aa2e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800aa32:	b289      	uxth	r1, r1
 800aa34:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800aa38:	45f4      	cmp	ip, lr
 800aa3a:	f849 1b04 	str.w	r1, [r9], #4
 800aa3e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800aa42:	d8e4      	bhi.n	800aa0e <__multiply+0xaa>
 800aa44:	9901      	ldr	r1, [sp, #4]
 800aa46:	5072      	str	r2, [r6, r1]
 800aa48:	9a03      	ldr	r2, [sp, #12]
 800aa4a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800aa4e:	3304      	adds	r3, #4
 800aa50:	f1b9 0f00 	cmp.w	r9, #0
 800aa54:	d01f      	beq.n	800aa96 <__multiply+0x132>
 800aa56:	6834      	ldr	r4, [r6, #0]
 800aa58:	f105 0114 	add.w	r1, r5, #20
 800aa5c:	46b6      	mov	lr, r6
 800aa5e:	f04f 0a00 	mov.w	sl, #0
 800aa62:	880a      	ldrh	r2, [r1, #0]
 800aa64:	f8be b002 	ldrh.w	fp, [lr, #2]
 800aa68:	fb09 b202 	mla	r2, r9, r2, fp
 800aa6c:	4492      	add	sl, r2
 800aa6e:	b2a4      	uxth	r4, r4
 800aa70:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800aa74:	f84e 4b04 	str.w	r4, [lr], #4
 800aa78:	f851 4b04 	ldr.w	r4, [r1], #4
 800aa7c:	f8be 2000 	ldrh.w	r2, [lr]
 800aa80:	0c24      	lsrs	r4, r4, #16
 800aa82:	fb09 2404 	mla	r4, r9, r4, r2
 800aa86:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800aa8a:	458c      	cmp	ip, r1
 800aa8c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800aa90:	d8e7      	bhi.n	800aa62 <__multiply+0xfe>
 800aa92:	9a01      	ldr	r2, [sp, #4]
 800aa94:	50b4      	str	r4, [r6, r2]
 800aa96:	3604      	adds	r6, #4
 800aa98:	e7a3      	b.n	800a9e2 <__multiply+0x7e>
 800aa9a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d1a5      	bne.n	800a9ee <__multiply+0x8a>
 800aaa2:	3f01      	subs	r7, #1
 800aaa4:	e7a1      	b.n	800a9ea <__multiply+0x86>
 800aaa6:	bf00      	nop
 800aaa8:	0800c113 	.word	0x0800c113
 800aaac:	0800c184 	.word	0x0800c184

0800aab0 <__pow5mult>:
 800aab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aab4:	4615      	mov	r5, r2
 800aab6:	f012 0203 	ands.w	r2, r2, #3
 800aaba:	4606      	mov	r6, r0
 800aabc:	460f      	mov	r7, r1
 800aabe:	d007      	beq.n	800aad0 <__pow5mult+0x20>
 800aac0:	4c25      	ldr	r4, [pc, #148]	; (800ab58 <__pow5mult+0xa8>)
 800aac2:	3a01      	subs	r2, #1
 800aac4:	2300      	movs	r3, #0
 800aac6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aaca:	f7ff fe9b 	bl	800a804 <__multadd>
 800aace:	4607      	mov	r7, r0
 800aad0:	10ad      	asrs	r5, r5, #2
 800aad2:	d03d      	beq.n	800ab50 <__pow5mult+0xa0>
 800aad4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800aad6:	b97c      	cbnz	r4, 800aaf8 <__pow5mult+0x48>
 800aad8:	2010      	movs	r0, #16
 800aada:	f7fe f921 	bl	8008d20 <malloc>
 800aade:	4602      	mov	r2, r0
 800aae0:	6270      	str	r0, [r6, #36]	; 0x24
 800aae2:	b928      	cbnz	r0, 800aaf0 <__pow5mult+0x40>
 800aae4:	4b1d      	ldr	r3, [pc, #116]	; (800ab5c <__pow5mult+0xac>)
 800aae6:	481e      	ldr	r0, [pc, #120]	; (800ab60 <__pow5mult+0xb0>)
 800aae8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800aaec:	f000 fd80 	bl	800b5f0 <__assert_func>
 800aaf0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aaf4:	6004      	str	r4, [r0, #0]
 800aaf6:	60c4      	str	r4, [r0, #12]
 800aaf8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800aafc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ab00:	b94c      	cbnz	r4, 800ab16 <__pow5mult+0x66>
 800ab02:	f240 2171 	movw	r1, #625	; 0x271
 800ab06:	4630      	mov	r0, r6
 800ab08:	f7ff ff16 	bl	800a938 <__i2b>
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ab12:	4604      	mov	r4, r0
 800ab14:	6003      	str	r3, [r0, #0]
 800ab16:	f04f 0900 	mov.w	r9, #0
 800ab1a:	07eb      	lsls	r3, r5, #31
 800ab1c:	d50a      	bpl.n	800ab34 <__pow5mult+0x84>
 800ab1e:	4639      	mov	r1, r7
 800ab20:	4622      	mov	r2, r4
 800ab22:	4630      	mov	r0, r6
 800ab24:	f7ff ff1e 	bl	800a964 <__multiply>
 800ab28:	4639      	mov	r1, r7
 800ab2a:	4680      	mov	r8, r0
 800ab2c:	4630      	mov	r0, r6
 800ab2e:	f7ff fe47 	bl	800a7c0 <_Bfree>
 800ab32:	4647      	mov	r7, r8
 800ab34:	106d      	asrs	r5, r5, #1
 800ab36:	d00b      	beq.n	800ab50 <__pow5mult+0xa0>
 800ab38:	6820      	ldr	r0, [r4, #0]
 800ab3a:	b938      	cbnz	r0, 800ab4c <__pow5mult+0x9c>
 800ab3c:	4622      	mov	r2, r4
 800ab3e:	4621      	mov	r1, r4
 800ab40:	4630      	mov	r0, r6
 800ab42:	f7ff ff0f 	bl	800a964 <__multiply>
 800ab46:	6020      	str	r0, [r4, #0]
 800ab48:	f8c0 9000 	str.w	r9, [r0]
 800ab4c:	4604      	mov	r4, r0
 800ab4e:	e7e4      	b.n	800ab1a <__pow5mult+0x6a>
 800ab50:	4638      	mov	r0, r7
 800ab52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab56:	bf00      	nop
 800ab58:	0800c2d8 	.word	0x0800c2d8
 800ab5c:	0800c09d 	.word	0x0800c09d
 800ab60:	0800c184 	.word	0x0800c184

0800ab64 <__lshift>:
 800ab64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab68:	460c      	mov	r4, r1
 800ab6a:	6849      	ldr	r1, [r1, #4]
 800ab6c:	6923      	ldr	r3, [r4, #16]
 800ab6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ab72:	68a3      	ldr	r3, [r4, #8]
 800ab74:	4607      	mov	r7, r0
 800ab76:	4691      	mov	r9, r2
 800ab78:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ab7c:	f108 0601 	add.w	r6, r8, #1
 800ab80:	42b3      	cmp	r3, r6
 800ab82:	db0b      	blt.n	800ab9c <__lshift+0x38>
 800ab84:	4638      	mov	r0, r7
 800ab86:	f7ff fddb 	bl	800a740 <_Balloc>
 800ab8a:	4605      	mov	r5, r0
 800ab8c:	b948      	cbnz	r0, 800aba2 <__lshift+0x3e>
 800ab8e:	4602      	mov	r2, r0
 800ab90:	4b28      	ldr	r3, [pc, #160]	; (800ac34 <__lshift+0xd0>)
 800ab92:	4829      	ldr	r0, [pc, #164]	; (800ac38 <__lshift+0xd4>)
 800ab94:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ab98:	f000 fd2a 	bl	800b5f0 <__assert_func>
 800ab9c:	3101      	adds	r1, #1
 800ab9e:	005b      	lsls	r3, r3, #1
 800aba0:	e7ee      	b.n	800ab80 <__lshift+0x1c>
 800aba2:	2300      	movs	r3, #0
 800aba4:	f100 0114 	add.w	r1, r0, #20
 800aba8:	f100 0210 	add.w	r2, r0, #16
 800abac:	4618      	mov	r0, r3
 800abae:	4553      	cmp	r3, sl
 800abb0:	db33      	blt.n	800ac1a <__lshift+0xb6>
 800abb2:	6920      	ldr	r0, [r4, #16]
 800abb4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800abb8:	f104 0314 	add.w	r3, r4, #20
 800abbc:	f019 091f 	ands.w	r9, r9, #31
 800abc0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800abc4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800abc8:	d02b      	beq.n	800ac22 <__lshift+0xbe>
 800abca:	f1c9 0e20 	rsb	lr, r9, #32
 800abce:	468a      	mov	sl, r1
 800abd0:	2200      	movs	r2, #0
 800abd2:	6818      	ldr	r0, [r3, #0]
 800abd4:	fa00 f009 	lsl.w	r0, r0, r9
 800abd8:	4302      	orrs	r2, r0
 800abda:	f84a 2b04 	str.w	r2, [sl], #4
 800abde:	f853 2b04 	ldr.w	r2, [r3], #4
 800abe2:	459c      	cmp	ip, r3
 800abe4:	fa22 f20e 	lsr.w	r2, r2, lr
 800abe8:	d8f3      	bhi.n	800abd2 <__lshift+0x6e>
 800abea:	ebac 0304 	sub.w	r3, ip, r4
 800abee:	3b15      	subs	r3, #21
 800abf0:	f023 0303 	bic.w	r3, r3, #3
 800abf4:	3304      	adds	r3, #4
 800abf6:	f104 0015 	add.w	r0, r4, #21
 800abfa:	4584      	cmp	ip, r0
 800abfc:	bf38      	it	cc
 800abfe:	2304      	movcc	r3, #4
 800ac00:	50ca      	str	r2, [r1, r3]
 800ac02:	b10a      	cbz	r2, 800ac08 <__lshift+0xa4>
 800ac04:	f108 0602 	add.w	r6, r8, #2
 800ac08:	3e01      	subs	r6, #1
 800ac0a:	4638      	mov	r0, r7
 800ac0c:	612e      	str	r6, [r5, #16]
 800ac0e:	4621      	mov	r1, r4
 800ac10:	f7ff fdd6 	bl	800a7c0 <_Bfree>
 800ac14:	4628      	mov	r0, r5
 800ac16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac1a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ac1e:	3301      	adds	r3, #1
 800ac20:	e7c5      	b.n	800abae <__lshift+0x4a>
 800ac22:	3904      	subs	r1, #4
 800ac24:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac28:	f841 2f04 	str.w	r2, [r1, #4]!
 800ac2c:	459c      	cmp	ip, r3
 800ac2e:	d8f9      	bhi.n	800ac24 <__lshift+0xc0>
 800ac30:	e7ea      	b.n	800ac08 <__lshift+0xa4>
 800ac32:	bf00      	nop
 800ac34:	0800c113 	.word	0x0800c113
 800ac38:	0800c184 	.word	0x0800c184

0800ac3c <__mcmp>:
 800ac3c:	b530      	push	{r4, r5, lr}
 800ac3e:	6902      	ldr	r2, [r0, #16]
 800ac40:	690c      	ldr	r4, [r1, #16]
 800ac42:	1b12      	subs	r2, r2, r4
 800ac44:	d10e      	bne.n	800ac64 <__mcmp+0x28>
 800ac46:	f100 0314 	add.w	r3, r0, #20
 800ac4a:	3114      	adds	r1, #20
 800ac4c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ac50:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ac54:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ac58:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ac5c:	42a5      	cmp	r5, r4
 800ac5e:	d003      	beq.n	800ac68 <__mcmp+0x2c>
 800ac60:	d305      	bcc.n	800ac6e <__mcmp+0x32>
 800ac62:	2201      	movs	r2, #1
 800ac64:	4610      	mov	r0, r2
 800ac66:	bd30      	pop	{r4, r5, pc}
 800ac68:	4283      	cmp	r3, r0
 800ac6a:	d3f3      	bcc.n	800ac54 <__mcmp+0x18>
 800ac6c:	e7fa      	b.n	800ac64 <__mcmp+0x28>
 800ac6e:	f04f 32ff 	mov.w	r2, #4294967295
 800ac72:	e7f7      	b.n	800ac64 <__mcmp+0x28>

0800ac74 <__mdiff>:
 800ac74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac78:	460c      	mov	r4, r1
 800ac7a:	4606      	mov	r6, r0
 800ac7c:	4611      	mov	r1, r2
 800ac7e:	4620      	mov	r0, r4
 800ac80:	4617      	mov	r7, r2
 800ac82:	f7ff ffdb 	bl	800ac3c <__mcmp>
 800ac86:	1e05      	subs	r5, r0, #0
 800ac88:	d110      	bne.n	800acac <__mdiff+0x38>
 800ac8a:	4629      	mov	r1, r5
 800ac8c:	4630      	mov	r0, r6
 800ac8e:	f7ff fd57 	bl	800a740 <_Balloc>
 800ac92:	b930      	cbnz	r0, 800aca2 <__mdiff+0x2e>
 800ac94:	4b39      	ldr	r3, [pc, #228]	; (800ad7c <__mdiff+0x108>)
 800ac96:	4602      	mov	r2, r0
 800ac98:	f240 2132 	movw	r1, #562	; 0x232
 800ac9c:	4838      	ldr	r0, [pc, #224]	; (800ad80 <__mdiff+0x10c>)
 800ac9e:	f000 fca7 	bl	800b5f0 <__assert_func>
 800aca2:	2301      	movs	r3, #1
 800aca4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aca8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acac:	bfa4      	itt	ge
 800acae:	463b      	movge	r3, r7
 800acb0:	4627      	movge	r7, r4
 800acb2:	4630      	mov	r0, r6
 800acb4:	6879      	ldr	r1, [r7, #4]
 800acb6:	bfa6      	itte	ge
 800acb8:	461c      	movge	r4, r3
 800acba:	2500      	movge	r5, #0
 800acbc:	2501      	movlt	r5, #1
 800acbe:	f7ff fd3f 	bl	800a740 <_Balloc>
 800acc2:	b920      	cbnz	r0, 800acce <__mdiff+0x5a>
 800acc4:	4b2d      	ldr	r3, [pc, #180]	; (800ad7c <__mdiff+0x108>)
 800acc6:	4602      	mov	r2, r0
 800acc8:	f44f 7110 	mov.w	r1, #576	; 0x240
 800accc:	e7e6      	b.n	800ac9c <__mdiff+0x28>
 800acce:	693e      	ldr	r6, [r7, #16]
 800acd0:	60c5      	str	r5, [r0, #12]
 800acd2:	6925      	ldr	r5, [r4, #16]
 800acd4:	f107 0114 	add.w	r1, r7, #20
 800acd8:	f104 0914 	add.w	r9, r4, #20
 800acdc:	f100 0e14 	add.w	lr, r0, #20
 800ace0:	f107 0210 	add.w	r2, r7, #16
 800ace4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800ace8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800acec:	46f2      	mov	sl, lr
 800acee:	2700      	movs	r7, #0
 800acf0:	f859 3b04 	ldr.w	r3, [r9], #4
 800acf4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800acf8:	fa1f f883 	uxth.w	r8, r3
 800acfc:	fa17 f78b 	uxtah	r7, r7, fp
 800ad00:	0c1b      	lsrs	r3, r3, #16
 800ad02:	eba7 0808 	sub.w	r8, r7, r8
 800ad06:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ad0a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ad0e:	fa1f f888 	uxth.w	r8, r8
 800ad12:	141f      	asrs	r7, r3, #16
 800ad14:	454d      	cmp	r5, r9
 800ad16:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ad1a:	f84a 3b04 	str.w	r3, [sl], #4
 800ad1e:	d8e7      	bhi.n	800acf0 <__mdiff+0x7c>
 800ad20:	1b2b      	subs	r3, r5, r4
 800ad22:	3b15      	subs	r3, #21
 800ad24:	f023 0303 	bic.w	r3, r3, #3
 800ad28:	3304      	adds	r3, #4
 800ad2a:	3415      	adds	r4, #21
 800ad2c:	42a5      	cmp	r5, r4
 800ad2e:	bf38      	it	cc
 800ad30:	2304      	movcc	r3, #4
 800ad32:	4419      	add	r1, r3
 800ad34:	4473      	add	r3, lr
 800ad36:	469e      	mov	lr, r3
 800ad38:	460d      	mov	r5, r1
 800ad3a:	4565      	cmp	r5, ip
 800ad3c:	d30e      	bcc.n	800ad5c <__mdiff+0xe8>
 800ad3e:	f10c 0203 	add.w	r2, ip, #3
 800ad42:	1a52      	subs	r2, r2, r1
 800ad44:	f022 0203 	bic.w	r2, r2, #3
 800ad48:	3903      	subs	r1, #3
 800ad4a:	458c      	cmp	ip, r1
 800ad4c:	bf38      	it	cc
 800ad4e:	2200      	movcc	r2, #0
 800ad50:	441a      	add	r2, r3
 800ad52:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ad56:	b17b      	cbz	r3, 800ad78 <__mdiff+0x104>
 800ad58:	6106      	str	r6, [r0, #16]
 800ad5a:	e7a5      	b.n	800aca8 <__mdiff+0x34>
 800ad5c:	f855 8b04 	ldr.w	r8, [r5], #4
 800ad60:	fa17 f488 	uxtah	r4, r7, r8
 800ad64:	1422      	asrs	r2, r4, #16
 800ad66:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800ad6a:	b2a4      	uxth	r4, r4
 800ad6c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800ad70:	f84e 4b04 	str.w	r4, [lr], #4
 800ad74:	1417      	asrs	r7, r2, #16
 800ad76:	e7e0      	b.n	800ad3a <__mdiff+0xc6>
 800ad78:	3e01      	subs	r6, #1
 800ad7a:	e7ea      	b.n	800ad52 <__mdiff+0xde>
 800ad7c:	0800c113 	.word	0x0800c113
 800ad80:	0800c184 	.word	0x0800c184

0800ad84 <__d2b>:
 800ad84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ad88:	4689      	mov	r9, r1
 800ad8a:	2101      	movs	r1, #1
 800ad8c:	ec57 6b10 	vmov	r6, r7, d0
 800ad90:	4690      	mov	r8, r2
 800ad92:	f7ff fcd5 	bl	800a740 <_Balloc>
 800ad96:	4604      	mov	r4, r0
 800ad98:	b930      	cbnz	r0, 800ada8 <__d2b+0x24>
 800ad9a:	4602      	mov	r2, r0
 800ad9c:	4b25      	ldr	r3, [pc, #148]	; (800ae34 <__d2b+0xb0>)
 800ad9e:	4826      	ldr	r0, [pc, #152]	; (800ae38 <__d2b+0xb4>)
 800ada0:	f240 310a 	movw	r1, #778	; 0x30a
 800ada4:	f000 fc24 	bl	800b5f0 <__assert_func>
 800ada8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800adac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800adb0:	bb35      	cbnz	r5, 800ae00 <__d2b+0x7c>
 800adb2:	2e00      	cmp	r6, #0
 800adb4:	9301      	str	r3, [sp, #4]
 800adb6:	d028      	beq.n	800ae0a <__d2b+0x86>
 800adb8:	4668      	mov	r0, sp
 800adba:	9600      	str	r6, [sp, #0]
 800adbc:	f7ff fd8c 	bl	800a8d8 <__lo0bits>
 800adc0:	9900      	ldr	r1, [sp, #0]
 800adc2:	b300      	cbz	r0, 800ae06 <__d2b+0x82>
 800adc4:	9a01      	ldr	r2, [sp, #4]
 800adc6:	f1c0 0320 	rsb	r3, r0, #32
 800adca:	fa02 f303 	lsl.w	r3, r2, r3
 800adce:	430b      	orrs	r3, r1
 800add0:	40c2      	lsrs	r2, r0
 800add2:	6163      	str	r3, [r4, #20]
 800add4:	9201      	str	r2, [sp, #4]
 800add6:	9b01      	ldr	r3, [sp, #4]
 800add8:	61a3      	str	r3, [r4, #24]
 800adda:	2b00      	cmp	r3, #0
 800addc:	bf14      	ite	ne
 800adde:	2202      	movne	r2, #2
 800ade0:	2201      	moveq	r2, #1
 800ade2:	6122      	str	r2, [r4, #16]
 800ade4:	b1d5      	cbz	r5, 800ae1c <__d2b+0x98>
 800ade6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800adea:	4405      	add	r5, r0
 800adec:	f8c9 5000 	str.w	r5, [r9]
 800adf0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800adf4:	f8c8 0000 	str.w	r0, [r8]
 800adf8:	4620      	mov	r0, r4
 800adfa:	b003      	add	sp, #12
 800adfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ae04:	e7d5      	b.n	800adb2 <__d2b+0x2e>
 800ae06:	6161      	str	r1, [r4, #20]
 800ae08:	e7e5      	b.n	800add6 <__d2b+0x52>
 800ae0a:	a801      	add	r0, sp, #4
 800ae0c:	f7ff fd64 	bl	800a8d8 <__lo0bits>
 800ae10:	9b01      	ldr	r3, [sp, #4]
 800ae12:	6163      	str	r3, [r4, #20]
 800ae14:	2201      	movs	r2, #1
 800ae16:	6122      	str	r2, [r4, #16]
 800ae18:	3020      	adds	r0, #32
 800ae1a:	e7e3      	b.n	800ade4 <__d2b+0x60>
 800ae1c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ae20:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ae24:	f8c9 0000 	str.w	r0, [r9]
 800ae28:	6918      	ldr	r0, [r3, #16]
 800ae2a:	f7ff fd35 	bl	800a898 <__hi0bits>
 800ae2e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ae32:	e7df      	b.n	800adf4 <__d2b+0x70>
 800ae34:	0800c113 	.word	0x0800c113
 800ae38:	0800c184 	.word	0x0800c184

0800ae3c <_calloc_r>:
 800ae3c:	b513      	push	{r0, r1, r4, lr}
 800ae3e:	434a      	muls	r2, r1
 800ae40:	4611      	mov	r1, r2
 800ae42:	9201      	str	r2, [sp, #4]
 800ae44:	f7fd ffcc 	bl	8008de0 <_malloc_r>
 800ae48:	4604      	mov	r4, r0
 800ae4a:	b118      	cbz	r0, 800ae54 <_calloc_r+0x18>
 800ae4c:	9a01      	ldr	r2, [sp, #4]
 800ae4e:	2100      	movs	r1, #0
 800ae50:	f7fd ff6e 	bl	8008d30 <memset>
 800ae54:	4620      	mov	r0, r4
 800ae56:	b002      	add	sp, #8
 800ae58:	bd10      	pop	{r4, pc}

0800ae5a <__ssputs_r>:
 800ae5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae5e:	688e      	ldr	r6, [r1, #8]
 800ae60:	429e      	cmp	r6, r3
 800ae62:	4682      	mov	sl, r0
 800ae64:	460c      	mov	r4, r1
 800ae66:	4690      	mov	r8, r2
 800ae68:	461f      	mov	r7, r3
 800ae6a:	d838      	bhi.n	800aede <__ssputs_r+0x84>
 800ae6c:	898a      	ldrh	r2, [r1, #12]
 800ae6e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ae72:	d032      	beq.n	800aeda <__ssputs_r+0x80>
 800ae74:	6825      	ldr	r5, [r4, #0]
 800ae76:	6909      	ldr	r1, [r1, #16]
 800ae78:	eba5 0901 	sub.w	r9, r5, r1
 800ae7c:	6965      	ldr	r5, [r4, #20]
 800ae7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ae82:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ae86:	3301      	adds	r3, #1
 800ae88:	444b      	add	r3, r9
 800ae8a:	106d      	asrs	r5, r5, #1
 800ae8c:	429d      	cmp	r5, r3
 800ae8e:	bf38      	it	cc
 800ae90:	461d      	movcc	r5, r3
 800ae92:	0553      	lsls	r3, r2, #21
 800ae94:	d531      	bpl.n	800aefa <__ssputs_r+0xa0>
 800ae96:	4629      	mov	r1, r5
 800ae98:	f7fd ffa2 	bl	8008de0 <_malloc_r>
 800ae9c:	4606      	mov	r6, r0
 800ae9e:	b950      	cbnz	r0, 800aeb6 <__ssputs_r+0x5c>
 800aea0:	230c      	movs	r3, #12
 800aea2:	f8ca 3000 	str.w	r3, [sl]
 800aea6:	89a3      	ldrh	r3, [r4, #12]
 800aea8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aeac:	81a3      	strh	r3, [r4, #12]
 800aeae:	f04f 30ff 	mov.w	r0, #4294967295
 800aeb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aeb6:	6921      	ldr	r1, [r4, #16]
 800aeb8:	464a      	mov	r2, r9
 800aeba:	f7ff fc26 	bl	800a70a <memcpy>
 800aebe:	89a3      	ldrh	r3, [r4, #12]
 800aec0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aec8:	81a3      	strh	r3, [r4, #12]
 800aeca:	6126      	str	r6, [r4, #16]
 800aecc:	6165      	str	r5, [r4, #20]
 800aece:	444e      	add	r6, r9
 800aed0:	eba5 0509 	sub.w	r5, r5, r9
 800aed4:	6026      	str	r6, [r4, #0]
 800aed6:	60a5      	str	r5, [r4, #8]
 800aed8:	463e      	mov	r6, r7
 800aeda:	42be      	cmp	r6, r7
 800aedc:	d900      	bls.n	800aee0 <__ssputs_r+0x86>
 800aede:	463e      	mov	r6, r7
 800aee0:	4632      	mov	r2, r6
 800aee2:	6820      	ldr	r0, [r4, #0]
 800aee4:	4641      	mov	r1, r8
 800aee6:	f000 fd0d 	bl	800b904 <memmove>
 800aeea:	68a3      	ldr	r3, [r4, #8]
 800aeec:	6822      	ldr	r2, [r4, #0]
 800aeee:	1b9b      	subs	r3, r3, r6
 800aef0:	4432      	add	r2, r6
 800aef2:	60a3      	str	r3, [r4, #8]
 800aef4:	6022      	str	r2, [r4, #0]
 800aef6:	2000      	movs	r0, #0
 800aef8:	e7db      	b.n	800aeb2 <__ssputs_r+0x58>
 800aefa:	462a      	mov	r2, r5
 800aefc:	f000 fd1c 	bl	800b938 <_realloc_r>
 800af00:	4606      	mov	r6, r0
 800af02:	2800      	cmp	r0, #0
 800af04:	d1e1      	bne.n	800aeca <__ssputs_r+0x70>
 800af06:	6921      	ldr	r1, [r4, #16]
 800af08:	4650      	mov	r0, sl
 800af0a:	f7fd ff19 	bl	8008d40 <_free_r>
 800af0e:	e7c7      	b.n	800aea0 <__ssputs_r+0x46>

0800af10 <_svfiprintf_r>:
 800af10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af14:	4698      	mov	r8, r3
 800af16:	898b      	ldrh	r3, [r1, #12]
 800af18:	061b      	lsls	r3, r3, #24
 800af1a:	b09d      	sub	sp, #116	; 0x74
 800af1c:	4607      	mov	r7, r0
 800af1e:	460d      	mov	r5, r1
 800af20:	4614      	mov	r4, r2
 800af22:	d50e      	bpl.n	800af42 <_svfiprintf_r+0x32>
 800af24:	690b      	ldr	r3, [r1, #16]
 800af26:	b963      	cbnz	r3, 800af42 <_svfiprintf_r+0x32>
 800af28:	2140      	movs	r1, #64	; 0x40
 800af2a:	f7fd ff59 	bl	8008de0 <_malloc_r>
 800af2e:	6028      	str	r0, [r5, #0]
 800af30:	6128      	str	r0, [r5, #16]
 800af32:	b920      	cbnz	r0, 800af3e <_svfiprintf_r+0x2e>
 800af34:	230c      	movs	r3, #12
 800af36:	603b      	str	r3, [r7, #0]
 800af38:	f04f 30ff 	mov.w	r0, #4294967295
 800af3c:	e0d1      	b.n	800b0e2 <_svfiprintf_r+0x1d2>
 800af3e:	2340      	movs	r3, #64	; 0x40
 800af40:	616b      	str	r3, [r5, #20]
 800af42:	2300      	movs	r3, #0
 800af44:	9309      	str	r3, [sp, #36]	; 0x24
 800af46:	2320      	movs	r3, #32
 800af48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af4c:	f8cd 800c 	str.w	r8, [sp, #12]
 800af50:	2330      	movs	r3, #48	; 0x30
 800af52:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b0fc <_svfiprintf_r+0x1ec>
 800af56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af5a:	f04f 0901 	mov.w	r9, #1
 800af5e:	4623      	mov	r3, r4
 800af60:	469a      	mov	sl, r3
 800af62:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af66:	b10a      	cbz	r2, 800af6c <_svfiprintf_r+0x5c>
 800af68:	2a25      	cmp	r2, #37	; 0x25
 800af6a:	d1f9      	bne.n	800af60 <_svfiprintf_r+0x50>
 800af6c:	ebba 0b04 	subs.w	fp, sl, r4
 800af70:	d00b      	beq.n	800af8a <_svfiprintf_r+0x7a>
 800af72:	465b      	mov	r3, fp
 800af74:	4622      	mov	r2, r4
 800af76:	4629      	mov	r1, r5
 800af78:	4638      	mov	r0, r7
 800af7a:	f7ff ff6e 	bl	800ae5a <__ssputs_r>
 800af7e:	3001      	adds	r0, #1
 800af80:	f000 80aa 	beq.w	800b0d8 <_svfiprintf_r+0x1c8>
 800af84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af86:	445a      	add	r2, fp
 800af88:	9209      	str	r2, [sp, #36]	; 0x24
 800af8a:	f89a 3000 	ldrb.w	r3, [sl]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	f000 80a2 	beq.w	800b0d8 <_svfiprintf_r+0x1c8>
 800af94:	2300      	movs	r3, #0
 800af96:	f04f 32ff 	mov.w	r2, #4294967295
 800af9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af9e:	f10a 0a01 	add.w	sl, sl, #1
 800afa2:	9304      	str	r3, [sp, #16]
 800afa4:	9307      	str	r3, [sp, #28]
 800afa6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800afaa:	931a      	str	r3, [sp, #104]	; 0x68
 800afac:	4654      	mov	r4, sl
 800afae:	2205      	movs	r2, #5
 800afb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afb4:	4851      	ldr	r0, [pc, #324]	; (800b0fc <_svfiprintf_r+0x1ec>)
 800afb6:	f7f5 f913 	bl	80001e0 <memchr>
 800afba:	9a04      	ldr	r2, [sp, #16]
 800afbc:	b9d8      	cbnz	r0, 800aff6 <_svfiprintf_r+0xe6>
 800afbe:	06d0      	lsls	r0, r2, #27
 800afc0:	bf44      	itt	mi
 800afc2:	2320      	movmi	r3, #32
 800afc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800afc8:	0711      	lsls	r1, r2, #28
 800afca:	bf44      	itt	mi
 800afcc:	232b      	movmi	r3, #43	; 0x2b
 800afce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800afd2:	f89a 3000 	ldrb.w	r3, [sl]
 800afd6:	2b2a      	cmp	r3, #42	; 0x2a
 800afd8:	d015      	beq.n	800b006 <_svfiprintf_r+0xf6>
 800afda:	9a07      	ldr	r2, [sp, #28]
 800afdc:	4654      	mov	r4, sl
 800afde:	2000      	movs	r0, #0
 800afe0:	f04f 0c0a 	mov.w	ip, #10
 800afe4:	4621      	mov	r1, r4
 800afe6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800afea:	3b30      	subs	r3, #48	; 0x30
 800afec:	2b09      	cmp	r3, #9
 800afee:	d94e      	bls.n	800b08e <_svfiprintf_r+0x17e>
 800aff0:	b1b0      	cbz	r0, 800b020 <_svfiprintf_r+0x110>
 800aff2:	9207      	str	r2, [sp, #28]
 800aff4:	e014      	b.n	800b020 <_svfiprintf_r+0x110>
 800aff6:	eba0 0308 	sub.w	r3, r0, r8
 800affa:	fa09 f303 	lsl.w	r3, r9, r3
 800affe:	4313      	orrs	r3, r2
 800b000:	9304      	str	r3, [sp, #16]
 800b002:	46a2      	mov	sl, r4
 800b004:	e7d2      	b.n	800afac <_svfiprintf_r+0x9c>
 800b006:	9b03      	ldr	r3, [sp, #12]
 800b008:	1d19      	adds	r1, r3, #4
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	9103      	str	r1, [sp, #12]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	bfbb      	ittet	lt
 800b012:	425b      	neglt	r3, r3
 800b014:	f042 0202 	orrlt.w	r2, r2, #2
 800b018:	9307      	strge	r3, [sp, #28]
 800b01a:	9307      	strlt	r3, [sp, #28]
 800b01c:	bfb8      	it	lt
 800b01e:	9204      	strlt	r2, [sp, #16]
 800b020:	7823      	ldrb	r3, [r4, #0]
 800b022:	2b2e      	cmp	r3, #46	; 0x2e
 800b024:	d10c      	bne.n	800b040 <_svfiprintf_r+0x130>
 800b026:	7863      	ldrb	r3, [r4, #1]
 800b028:	2b2a      	cmp	r3, #42	; 0x2a
 800b02a:	d135      	bne.n	800b098 <_svfiprintf_r+0x188>
 800b02c:	9b03      	ldr	r3, [sp, #12]
 800b02e:	1d1a      	adds	r2, r3, #4
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	9203      	str	r2, [sp, #12]
 800b034:	2b00      	cmp	r3, #0
 800b036:	bfb8      	it	lt
 800b038:	f04f 33ff 	movlt.w	r3, #4294967295
 800b03c:	3402      	adds	r4, #2
 800b03e:	9305      	str	r3, [sp, #20]
 800b040:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b10c <_svfiprintf_r+0x1fc>
 800b044:	7821      	ldrb	r1, [r4, #0]
 800b046:	2203      	movs	r2, #3
 800b048:	4650      	mov	r0, sl
 800b04a:	f7f5 f8c9 	bl	80001e0 <memchr>
 800b04e:	b140      	cbz	r0, 800b062 <_svfiprintf_r+0x152>
 800b050:	2340      	movs	r3, #64	; 0x40
 800b052:	eba0 000a 	sub.w	r0, r0, sl
 800b056:	fa03 f000 	lsl.w	r0, r3, r0
 800b05a:	9b04      	ldr	r3, [sp, #16]
 800b05c:	4303      	orrs	r3, r0
 800b05e:	3401      	adds	r4, #1
 800b060:	9304      	str	r3, [sp, #16]
 800b062:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b066:	4826      	ldr	r0, [pc, #152]	; (800b100 <_svfiprintf_r+0x1f0>)
 800b068:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b06c:	2206      	movs	r2, #6
 800b06e:	f7f5 f8b7 	bl	80001e0 <memchr>
 800b072:	2800      	cmp	r0, #0
 800b074:	d038      	beq.n	800b0e8 <_svfiprintf_r+0x1d8>
 800b076:	4b23      	ldr	r3, [pc, #140]	; (800b104 <_svfiprintf_r+0x1f4>)
 800b078:	bb1b      	cbnz	r3, 800b0c2 <_svfiprintf_r+0x1b2>
 800b07a:	9b03      	ldr	r3, [sp, #12]
 800b07c:	3307      	adds	r3, #7
 800b07e:	f023 0307 	bic.w	r3, r3, #7
 800b082:	3308      	adds	r3, #8
 800b084:	9303      	str	r3, [sp, #12]
 800b086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b088:	4433      	add	r3, r6
 800b08a:	9309      	str	r3, [sp, #36]	; 0x24
 800b08c:	e767      	b.n	800af5e <_svfiprintf_r+0x4e>
 800b08e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b092:	460c      	mov	r4, r1
 800b094:	2001      	movs	r0, #1
 800b096:	e7a5      	b.n	800afe4 <_svfiprintf_r+0xd4>
 800b098:	2300      	movs	r3, #0
 800b09a:	3401      	adds	r4, #1
 800b09c:	9305      	str	r3, [sp, #20]
 800b09e:	4619      	mov	r1, r3
 800b0a0:	f04f 0c0a 	mov.w	ip, #10
 800b0a4:	4620      	mov	r0, r4
 800b0a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0aa:	3a30      	subs	r2, #48	; 0x30
 800b0ac:	2a09      	cmp	r2, #9
 800b0ae:	d903      	bls.n	800b0b8 <_svfiprintf_r+0x1a8>
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d0c5      	beq.n	800b040 <_svfiprintf_r+0x130>
 800b0b4:	9105      	str	r1, [sp, #20]
 800b0b6:	e7c3      	b.n	800b040 <_svfiprintf_r+0x130>
 800b0b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0bc:	4604      	mov	r4, r0
 800b0be:	2301      	movs	r3, #1
 800b0c0:	e7f0      	b.n	800b0a4 <_svfiprintf_r+0x194>
 800b0c2:	ab03      	add	r3, sp, #12
 800b0c4:	9300      	str	r3, [sp, #0]
 800b0c6:	462a      	mov	r2, r5
 800b0c8:	4b0f      	ldr	r3, [pc, #60]	; (800b108 <_svfiprintf_r+0x1f8>)
 800b0ca:	a904      	add	r1, sp, #16
 800b0cc:	4638      	mov	r0, r7
 800b0ce:	f7fd ff81 	bl	8008fd4 <_printf_float>
 800b0d2:	1c42      	adds	r2, r0, #1
 800b0d4:	4606      	mov	r6, r0
 800b0d6:	d1d6      	bne.n	800b086 <_svfiprintf_r+0x176>
 800b0d8:	89ab      	ldrh	r3, [r5, #12]
 800b0da:	065b      	lsls	r3, r3, #25
 800b0dc:	f53f af2c 	bmi.w	800af38 <_svfiprintf_r+0x28>
 800b0e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b0e2:	b01d      	add	sp, #116	; 0x74
 800b0e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0e8:	ab03      	add	r3, sp, #12
 800b0ea:	9300      	str	r3, [sp, #0]
 800b0ec:	462a      	mov	r2, r5
 800b0ee:	4b06      	ldr	r3, [pc, #24]	; (800b108 <_svfiprintf_r+0x1f8>)
 800b0f0:	a904      	add	r1, sp, #16
 800b0f2:	4638      	mov	r0, r7
 800b0f4:	f7fe fa12 	bl	800951c <_printf_i>
 800b0f8:	e7eb      	b.n	800b0d2 <_svfiprintf_r+0x1c2>
 800b0fa:	bf00      	nop
 800b0fc:	0800c2e4 	.word	0x0800c2e4
 800b100:	0800c2ee 	.word	0x0800c2ee
 800b104:	08008fd5 	.word	0x08008fd5
 800b108:	0800ae5b 	.word	0x0800ae5b
 800b10c:	0800c2ea 	.word	0x0800c2ea

0800b110 <__sfputc_r>:
 800b110:	6893      	ldr	r3, [r2, #8]
 800b112:	3b01      	subs	r3, #1
 800b114:	2b00      	cmp	r3, #0
 800b116:	b410      	push	{r4}
 800b118:	6093      	str	r3, [r2, #8]
 800b11a:	da08      	bge.n	800b12e <__sfputc_r+0x1e>
 800b11c:	6994      	ldr	r4, [r2, #24]
 800b11e:	42a3      	cmp	r3, r4
 800b120:	db01      	blt.n	800b126 <__sfputc_r+0x16>
 800b122:	290a      	cmp	r1, #10
 800b124:	d103      	bne.n	800b12e <__sfputc_r+0x1e>
 800b126:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b12a:	f000 b98f 	b.w	800b44c <__swbuf_r>
 800b12e:	6813      	ldr	r3, [r2, #0]
 800b130:	1c58      	adds	r0, r3, #1
 800b132:	6010      	str	r0, [r2, #0]
 800b134:	7019      	strb	r1, [r3, #0]
 800b136:	4608      	mov	r0, r1
 800b138:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b13c:	4770      	bx	lr

0800b13e <__sfputs_r>:
 800b13e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b140:	4606      	mov	r6, r0
 800b142:	460f      	mov	r7, r1
 800b144:	4614      	mov	r4, r2
 800b146:	18d5      	adds	r5, r2, r3
 800b148:	42ac      	cmp	r4, r5
 800b14a:	d101      	bne.n	800b150 <__sfputs_r+0x12>
 800b14c:	2000      	movs	r0, #0
 800b14e:	e007      	b.n	800b160 <__sfputs_r+0x22>
 800b150:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b154:	463a      	mov	r2, r7
 800b156:	4630      	mov	r0, r6
 800b158:	f7ff ffda 	bl	800b110 <__sfputc_r>
 800b15c:	1c43      	adds	r3, r0, #1
 800b15e:	d1f3      	bne.n	800b148 <__sfputs_r+0xa>
 800b160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b164 <_vfiprintf_r>:
 800b164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b168:	460d      	mov	r5, r1
 800b16a:	b09d      	sub	sp, #116	; 0x74
 800b16c:	4614      	mov	r4, r2
 800b16e:	4698      	mov	r8, r3
 800b170:	4606      	mov	r6, r0
 800b172:	b118      	cbz	r0, 800b17c <_vfiprintf_r+0x18>
 800b174:	6983      	ldr	r3, [r0, #24]
 800b176:	b90b      	cbnz	r3, 800b17c <_vfiprintf_r+0x18>
 800b178:	f7ff fa22 	bl	800a5c0 <__sinit>
 800b17c:	4b89      	ldr	r3, [pc, #548]	; (800b3a4 <_vfiprintf_r+0x240>)
 800b17e:	429d      	cmp	r5, r3
 800b180:	d11b      	bne.n	800b1ba <_vfiprintf_r+0x56>
 800b182:	6875      	ldr	r5, [r6, #4]
 800b184:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b186:	07d9      	lsls	r1, r3, #31
 800b188:	d405      	bmi.n	800b196 <_vfiprintf_r+0x32>
 800b18a:	89ab      	ldrh	r3, [r5, #12]
 800b18c:	059a      	lsls	r2, r3, #22
 800b18e:	d402      	bmi.n	800b196 <_vfiprintf_r+0x32>
 800b190:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b192:	f7ff fab8 	bl	800a706 <__retarget_lock_acquire_recursive>
 800b196:	89ab      	ldrh	r3, [r5, #12]
 800b198:	071b      	lsls	r3, r3, #28
 800b19a:	d501      	bpl.n	800b1a0 <_vfiprintf_r+0x3c>
 800b19c:	692b      	ldr	r3, [r5, #16]
 800b19e:	b9eb      	cbnz	r3, 800b1dc <_vfiprintf_r+0x78>
 800b1a0:	4629      	mov	r1, r5
 800b1a2:	4630      	mov	r0, r6
 800b1a4:	f000 f9b6 	bl	800b514 <__swsetup_r>
 800b1a8:	b1c0      	cbz	r0, 800b1dc <_vfiprintf_r+0x78>
 800b1aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1ac:	07dc      	lsls	r4, r3, #31
 800b1ae:	d50e      	bpl.n	800b1ce <_vfiprintf_r+0x6a>
 800b1b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b1b4:	b01d      	add	sp, #116	; 0x74
 800b1b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1ba:	4b7b      	ldr	r3, [pc, #492]	; (800b3a8 <_vfiprintf_r+0x244>)
 800b1bc:	429d      	cmp	r5, r3
 800b1be:	d101      	bne.n	800b1c4 <_vfiprintf_r+0x60>
 800b1c0:	68b5      	ldr	r5, [r6, #8]
 800b1c2:	e7df      	b.n	800b184 <_vfiprintf_r+0x20>
 800b1c4:	4b79      	ldr	r3, [pc, #484]	; (800b3ac <_vfiprintf_r+0x248>)
 800b1c6:	429d      	cmp	r5, r3
 800b1c8:	bf08      	it	eq
 800b1ca:	68f5      	ldreq	r5, [r6, #12]
 800b1cc:	e7da      	b.n	800b184 <_vfiprintf_r+0x20>
 800b1ce:	89ab      	ldrh	r3, [r5, #12]
 800b1d0:	0598      	lsls	r0, r3, #22
 800b1d2:	d4ed      	bmi.n	800b1b0 <_vfiprintf_r+0x4c>
 800b1d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1d6:	f7ff fa97 	bl	800a708 <__retarget_lock_release_recursive>
 800b1da:	e7e9      	b.n	800b1b0 <_vfiprintf_r+0x4c>
 800b1dc:	2300      	movs	r3, #0
 800b1de:	9309      	str	r3, [sp, #36]	; 0x24
 800b1e0:	2320      	movs	r3, #32
 800b1e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b1e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1ea:	2330      	movs	r3, #48	; 0x30
 800b1ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b3b0 <_vfiprintf_r+0x24c>
 800b1f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b1f4:	f04f 0901 	mov.w	r9, #1
 800b1f8:	4623      	mov	r3, r4
 800b1fa:	469a      	mov	sl, r3
 800b1fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b200:	b10a      	cbz	r2, 800b206 <_vfiprintf_r+0xa2>
 800b202:	2a25      	cmp	r2, #37	; 0x25
 800b204:	d1f9      	bne.n	800b1fa <_vfiprintf_r+0x96>
 800b206:	ebba 0b04 	subs.w	fp, sl, r4
 800b20a:	d00b      	beq.n	800b224 <_vfiprintf_r+0xc0>
 800b20c:	465b      	mov	r3, fp
 800b20e:	4622      	mov	r2, r4
 800b210:	4629      	mov	r1, r5
 800b212:	4630      	mov	r0, r6
 800b214:	f7ff ff93 	bl	800b13e <__sfputs_r>
 800b218:	3001      	adds	r0, #1
 800b21a:	f000 80aa 	beq.w	800b372 <_vfiprintf_r+0x20e>
 800b21e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b220:	445a      	add	r2, fp
 800b222:	9209      	str	r2, [sp, #36]	; 0x24
 800b224:	f89a 3000 	ldrb.w	r3, [sl]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	f000 80a2 	beq.w	800b372 <_vfiprintf_r+0x20e>
 800b22e:	2300      	movs	r3, #0
 800b230:	f04f 32ff 	mov.w	r2, #4294967295
 800b234:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b238:	f10a 0a01 	add.w	sl, sl, #1
 800b23c:	9304      	str	r3, [sp, #16]
 800b23e:	9307      	str	r3, [sp, #28]
 800b240:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b244:	931a      	str	r3, [sp, #104]	; 0x68
 800b246:	4654      	mov	r4, sl
 800b248:	2205      	movs	r2, #5
 800b24a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b24e:	4858      	ldr	r0, [pc, #352]	; (800b3b0 <_vfiprintf_r+0x24c>)
 800b250:	f7f4 ffc6 	bl	80001e0 <memchr>
 800b254:	9a04      	ldr	r2, [sp, #16]
 800b256:	b9d8      	cbnz	r0, 800b290 <_vfiprintf_r+0x12c>
 800b258:	06d1      	lsls	r1, r2, #27
 800b25a:	bf44      	itt	mi
 800b25c:	2320      	movmi	r3, #32
 800b25e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b262:	0713      	lsls	r3, r2, #28
 800b264:	bf44      	itt	mi
 800b266:	232b      	movmi	r3, #43	; 0x2b
 800b268:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b26c:	f89a 3000 	ldrb.w	r3, [sl]
 800b270:	2b2a      	cmp	r3, #42	; 0x2a
 800b272:	d015      	beq.n	800b2a0 <_vfiprintf_r+0x13c>
 800b274:	9a07      	ldr	r2, [sp, #28]
 800b276:	4654      	mov	r4, sl
 800b278:	2000      	movs	r0, #0
 800b27a:	f04f 0c0a 	mov.w	ip, #10
 800b27e:	4621      	mov	r1, r4
 800b280:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b284:	3b30      	subs	r3, #48	; 0x30
 800b286:	2b09      	cmp	r3, #9
 800b288:	d94e      	bls.n	800b328 <_vfiprintf_r+0x1c4>
 800b28a:	b1b0      	cbz	r0, 800b2ba <_vfiprintf_r+0x156>
 800b28c:	9207      	str	r2, [sp, #28]
 800b28e:	e014      	b.n	800b2ba <_vfiprintf_r+0x156>
 800b290:	eba0 0308 	sub.w	r3, r0, r8
 800b294:	fa09 f303 	lsl.w	r3, r9, r3
 800b298:	4313      	orrs	r3, r2
 800b29a:	9304      	str	r3, [sp, #16]
 800b29c:	46a2      	mov	sl, r4
 800b29e:	e7d2      	b.n	800b246 <_vfiprintf_r+0xe2>
 800b2a0:	9b03      	ldr	r3, [sp, #12]
 800b2a2:	1d19      	adds	r1, r3, #4
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	9103      	str	r1, [sp, #12]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	bfbb      	ittet	lt
 800b2ac:	425b      	neglt	r3, r3
 800b2ae:	f042 0202 	orrlt.w	r2, r2, #2
 800b2b2:	9307      	strge	r3, [sp, #28]
 800b2b4:	9307      	strlt	r3, [sp, #28]
 800b2b6:	bfb8      	it	lt
 800b2b8:	9204      	strlt	r2, [sp, #16]
 800b2ba:	7823      	ldrb	r3, [r4, #0]
 800b2bc:	2b2e      	cmp	r3, #46	; 0x2e
 800b2be:	d10c      	bne.n	800b2da <_vfiprintf_r+0x176>
 800b2c0:	7863      	ldrb	r3, [r4, #1]
 800b2c2:	2b2a      	cmp	r3, #42	; 0x2a
 800b2c4:	d135      	bne.n	800b332 <_vfiprintf_r+0x1ce>
 800b2c6:	9b03      	ldr	r3, [sp, #12]
 800b2c8:	1d1a      	adds	r2, r3, #4
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	9203      	str	r2, [sp, #12]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	bfb8      	it	lt
 800b2d2:	f04f 33ff 	movlt.w	r3, #4294967295
 800b2d6:	3402      	adds	r4, #2
 800b2d8:	9305      	str	r3, [sp, #20]
 800b2da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b3c0 <_vfiprintf_r+0x25c>
 800b2de:	7821      	ldrb	r1, [r4, #0]
 800b2e0:	2203      	movs	r2, #3
 800b2e2:	4650      	mov	r0, sl
 800b2e4:	f7f4 ff7c 	bl	80001e0 <memchr>
 800b2e8:	b140      	cbz	r0, 800b2fc <_vfiprintf_r+0x198>
 800b2ea:	2340      	movs	r3, #64	; 0x40
 800b2ec:	eba0 000a 	sub.w	r0, r0, sl
 800b2f0:	fa03 f000 	lsl.w	r0, r3, r0
 800b2f4:	9b04      	ldr	r3, [sp, #16]
 800b2f6:	4303      	orrs	r3, r0
 800b2f8:	3401      	adds	r4, #1
 800b2fa:	9304      	str	r3, [sp, #16]
 800b2fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b300:	482c      	ldr	r0, [pc, #176]	; (800b3b4 <_vfiprintf_r+0x250>)
 800b302:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b306:	2206      	movs	r2, #6
 800b308:	f7f4 ff6a 	bl	80001e0 <memchr>
 800b30c:	2800      	cmp	r0, #0
 800b30e:	d03f      	beq.n	800b390 <_vfiprintf_r+0x22c>
 800b310:	4b29      	ldr	r3, [pc, #164]	; (800b3b8 <_vfiprintf_r+0x254>)
 800b312:	bb1b      	cbnz	r3, 800b35c <_vfiprintf_r+0x1f8>
 800b314:	9b03      	ldr	r3, [sp, #12]
 800b316:	3307      	adds	r3, #7
 800b318:	f023 0307 	bic.w	r3, r3, #7
 800b31c:	3308      	adds	r3, #8
 800b31e:	9303      	str	r3, [sp, #12]
 800b320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b322:	443b      	add	r3, r7
 800b324:	9309      	str	r3, [sp, #36]	; 0x24
 800b326:	e767      	b.n	800b1f8 <_vfiprintf_r+0x94>
 800b328:	fb0c 3202 	mla	r2, ip, r2, r3
 800b32c:	460c      	mov	r4, r1
 800b32e:	2001      	movs	r0, #1
 800b330:	e7a5      	b.n	800b27e <_vfiprintf_r+0x11a>
 800b332:	2300      	movs	r3, #0
 800b334:	3401      	adds	r4, #1
 800b336:	9305      	str	r3, [sp, #20]
 800b338:	4619      	mov	r1, r3
 800b33a:	f04f 0c0a 	mov.w	ip, #10
 800b33e:	4620      	mov	r0, r4
 800b340:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b344:	3a30      	subs	r2, #48	; 0x30
 800b346:	2a09      	cmp	r2, #9
 800b348:	d903      	bls.n	800b352 <_vfiprintf_r+0x1ee>
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d0c5      	beq.n	800b2da <_vfiprintf_r+0x176>
 800b34e:	9105      	str	r1, [sp, #20]
 800b350:	e7c3      	b.n	800b2da <_vfiprintf_r+0x176>
 800b352:	fb0c 2101 	mla	r1, ip, r1, r2
 800b356:	4604      	mov	r4, r0
 800b358:	2301      	movs	r3, #1
 800b35a:	e7f0      	b.n	800b33e <_vfiprintf_r+0x1da>
 800b35c:	ab03      	add	r3, sp, #12
 800b35e:	9300      	str	r3, [sp, #0]
 800b360:	462a      	mov	r2, r5
 800b362:	4b16      	ldr	r3, [pc, #88]	; (800b3bc <_vfiprintf_r+0x258>)
 800b364:	a904      	add	r1, sp, #16
 800b366:	4630      	mov	r0, r6
 800b368:	f7fd fe34 	bl	8008fd4 <_printf_float>
 800b36c:	4607      	mov	r7, r0
 800b36e:	1c78      	adds	r0, r7, #1
 800b370:	d1d6      	bne.n	800b320 <_vfiprintf_r+0x1bc>
 800b372:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b374:	07d9      	lsls	r1, r3, #31
 800b376:	d405      	bmi.n	800b384 <_vfiprintf_r+0x220>
 800b378:	89ab      	ldrh	r3, [r5, #12]
 800b37a:	059a      	lsls	r2, r3, #22
 800b37c:	d402      	bmi.n	800b384 <_vfiprintf_r+0x220>
 800b37e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b380:	f7ff f9c2 	bl	800a708 <__retarget_lock_release_recursive>
 800b384:	89ab      	ldrh	r3, [r5, #12]
 800b386:	065b      	lsls	r3, r3, #25
 800b388:	f53f af12 	bmi.w	800b1b0 <_vfiprintf_r+0x4c>
 800b38c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b38e:	e711      	b.n	800b1b4 <_vfiprintf_r+0x50>
 800b390:	ab03      	add	r3, sp, #12
 800b392:	9300      	str	r3, [sp, #0]
 800b394:	462a      	mov	r2, r5
 800b396:	4b09      	ldr	r3, [pc, #36]	; (800b3bc <_vfiprintf_r+0x258>)
 800b398:	a904      	add	r1, sp, #16
 800b39a:	4630      	mov	r0, r6
 800b39c:	f7fe f8be 	bl	800951c <_printf_i>
 800b3a0:	e7e4      	b.n	800b36c <_vfiprintf_r+0x208>
 800b3a2:	bf00      	nop
 800b3a4:	0800c144 	.word	0x0800c144
 800b3a8:	0800c164 	.word	0x0800c164
 800b3ac:	0800c124 	.word	0x0800c124
 800b3b0:	0800c2e4 	.word	0x0800c2e4
 800b3b4:	0800c2ee 	.word	0x0800c2ee
 800b3b8:	08008fd5 	.word	0x08008fd5
 800b3bc:	0800b13f 	.word	0x0800b13f
 800b3c0:	0800c2ea 	.word	0x0800c2ea

0800b3c4 <__sread>:
 800b3c4:	b510      	push	{r4, lr}
 800b3c6:	460c      	mov	r4, r1
 800b3c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3cc:	f000 fada 	bl	800b984 <_read_r>
 800b3d0:	2800      	cmp	r0, #0
 800b3d2:	bfab      	itete	ge
 800b3d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b3d6:	89a3      	ldrhlt	r3, [r4, #12]
 800b3d8:	181b      	addge	r3, r3, r0
 800b3da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b3de:	bfac      	ite	ge
 800b3e0:	6563      	strge	r3, [r4, #84]	; 0x54
 800b3e2:	81a3      	strhlt	r3, [r4, #12]
 800b3e4:	bd10      	pop	{r4, pc}

0800b3e6 <__swrite>:
 800b3e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3ea:	461f      	mov	r7, r3
 800b3ec:	898b      	ldrh	r3, [r1, #12]
 800b3ee:	05db      	lsls	r3, r3, #23
 800b3f0:	4605      	mov	r5, r0
 800b3f2:	460c      	mov	r4, r1
 800b3f4:	4616      	mov	r6, r2
 800b3f6:	d505      	bpl.n	800b404 <__swrite+0x1e>
 800b3f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3fc:	2302      	movs	r3, #2
 800b3fe:	2200      	movs	r2, #0
 800b400:	f000 f9f8 	bl	800b7f4 <_lseek_r>
 800b404:	89a3      	ldrh	r3, [r4, #12]
 800b406:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b40a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b40e:	81a3      	strh	r3, [r4, #12]
 800b410:	4632      	mov	r2, r6
 800b412:	463b      	mov	r3, r7
 800b414:	4628      	mov	r0, r5
 800b416:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b41a:	f000 b869 	b.w	800b4f0 <_write_r>

0800b41e <__sseek>:
 800b41e:	b510      	push	{r4, lr}
 800b420:	460c      	mov	r4, r1
 800b422:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b426:	f000 f9e5 	bl	800b7f4 <_lseek_r>
 800b42a:	1c43      	adds	r3, r0, #1
 800b42c:	89a3      	ldrh	r3, [r4, #12]
 800b42e:	bf15      	itete	ne
 800b430:	6560      	strne	r0, [r4, #84]	; 0x54
 800b432:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b436:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b43a:	81a3      	strheq	r3, [r4, #12]
 800b43c:	bf18      	it	ne
 800b43e:	81a3      	strhne	r3, [r4, #12]
 800b440:	bd10      	pop	{r4, pc}

0800b442 <__sclose>:
 800b442:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b446:	f000 b8f1 	b.w	800b62c <_close_r>
	...

0800b44c <__swbuf_r>:
 800b44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b44e:	460e      	mov	r6, r1
 800b450:	4614      	mov	r4, r2
 800b452:	4605      	mov	r5, r0
 800b454:	b118      	cbz	r0, 800b45e <__swbuf_r+0x12>
 800b456:	6983      	ldr	r3, [r0, #24]
 800b458:	b90b      	cbnz	r3, 800b45e <__swbuf_r+0x12>
 800b45a:	f7ff f8b1 	bl	800a5c0 <__sinit>
 800b45e:	4b21      	ldr	r3, [pc, #132]	; (800b4e4 <__swbuf_r+0x98>)
 800b460:	429c      	cmp	r4, r3
 800b462:	d12b      	bne.n	800b4bc <__swbuf_r+0x70>
 800b464:	686c      	ldr	r4, [r5, #4]
 800b466:	69a3      	ldr	r3, [r4, #24]
 800b468:	60a3      	str	r3, [r4, #8]
 800b46a:	89a3      	ldrh	r3, [r4, #12]
 800b46c:	071a      	lsls	r2, r3, #28
 800b46e:	d52f      	bpl.n	800b4d0 <__swbuf_r+0x84>
 800b470:	6923      	ldr	r3, [r4, #16]
 800b472:	b36b      	cbz	r3, 800b4d0 <__swbuf_r+0x84>
 800b474:	6923      	ldr	r3, [r4, #16]
 800b476:	6820      	ldr	r0, [r4, #0]
 800b478:	1ac0      	subs	r0, r0, r3
 800b47a:	6963      	ldr	r3, [r4, #20]
 800b47c:	b2f6      	uxtb	r6, r6
 800b47e:	4283      	cmp	r3, r0
 800b480:	4637      	mov	r7, r6
 800b482:	dc04      	bgt.n	800b48e <__swbuf_r+0x42>
 800b484:	4621      	mov	r1, r4
 800b486:	4628      	mov	r0, r5
 800b488:	f000 f966 	bl	800b758 <_fflush_r>
 800b48c:	bb30      	cbnz	r0, 800b4dc <__swbuf_r+0x90>
 800b48e:	68a3      	ldr	r3, [r4, #8]
 800b490:	3b01      	subs	r3, #1
 800b492:	60a3      	str	r3, [r4, #8]
 800b494:	6823      	ldr	r3, [r4, #0]
 800b496:	1c5a      	adds	r2, r3, #1
 800b498:	6022      	str	r2, [r4, #0]
 800b49a:	701e      	strb	r6, [r3, #0]
 800b49c:	6963      	ldr	r3, [r4, #20]
 800b49e:	3001      	adds	r0, #1
 800b4a0:	4283      	cmp	r3, r0
 800b4a2:	d004      	beq.n	800b4ae <__swbuf_r+0x62>
 800b4a4:	89a3      	ldrh	r3, [r4, #12]
 800b4a6:	07db      	lsls	r3, r3, #31
 800b4a8:	d506      	bpl.n	800b4b8 <__swbuf_r+0x6c>
 800b4aa:	2e0a      	cmp	r6, #10
 800b4ac:	d104      	bne.n	800b4b8 <__swbuf_r+0x6c>
 800b4ae:	4621      	mov	r1, r4
 800b4b0:	4628      	mov	r0, r5
 800b4b2:	f000 f951 	bl	800b758 <_fflush_r>
 800b4b6:	b988      	cbnz	r0, 800b4dc <__swbuf_r+0x90>
 800b4b8:	4638      	mov	r0, r7
 800b4ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4bc:	4b0a      	ldr	r3, [pc, #40]	; (800b4e8 <__swbuf_r+0x9c>)
 800b4be:	429c      	cmp	r4, r3
 800b4c0:	d101      	bne.n	800b4c6 <__swbuf_r+0x7a>
 800b4c2:	68ac      	ldr	r4, [r5, #8]
 800b4c4:	e7cf      	b.n	800b466 <__swbuf_r+0x1a>
 800b4c6:	4b09      	ldr	r3, [pc, #36]	; (800b4ec <__swbuf_r+0xa0>)
 800b4c8:	429c      	cmp	r4, r3
 800b4ca:	bf08      	it	eq
 800b4cc:	68ec      	ldreq	r4, [r5, #12]
 800b4ce:	e7ca      	b.n	800b466 <__swbuf_r+0x1a>
 800b4d0:	4621      	mov	r1, r4
 800b4d2:	4628      	mov	r0, r5
 800b4d4:	f000 f81e 	bl	800b514 <__swsetup_r>
 800b4d8:	2800      	cmp	r0, #0
 800b4da:	d0cb      	beq.n	800b474 <__swbuf_r+0x28>
 800b4dc:	f04f 37ff 	mov.w	r7, #4294967295
 800b4e0:	e7ea      	b.n	800b4b8 <__swbuf_r+0x6c>
 800b4e2:	bf00      	nop
 800b4e4:	0800c144 	.word	0x0800c144
 800b4e8:	0800c164 	.word	0x0800c164
 800b4ec:	0800c124 	.word	0x0800c124

0800b4f0 <_write_r>:
 800b4f0:	b538      	push	{r3, r4, r5, lr}
 800b4f2:	4d07      	ldr	r5, [pc, #28]	; (800b510 <_write_r+0x20>)
 800b4f4:	4604      	mov	r4, r0
 800b4f6:	4608      	mov	r0, r1
 800b4f8:	4611      	mov	r1, r2
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	602a      	str	r2, [r5, #0]
 800b4fe:	461a      	mov	r2, r3
 800b500:	f7f6 ff83 	bl	800240a <_write>
 800b504:	1c43      	adds	r3, r0, #1
 800b506:	d102      	bne.n	800b50e <_write_r+0x1e>
 800b508:	682b      	ldr	r3, [r5, #0]
 800b50a:	b103      	cbz	r3, 800b50e <_write_r+0x1e>
 800b50c:	6023      	str	r3, [r4, #0]
 800b50e:	bd38      	pop	{r3, r4, r5, pc}
 800b510:	2000429c 	.word	0x2000429c

0800b514 <__swsetup_r>:
 800b514:	4b32      	ldr	r3, [pc, #200]	; (800b5e0 <__swsetup_r+0xcc>)
 800b516:	b570      	push	{r4, r5, r6, lr}
 800b518:	681d      	ldr	r5, [r3, #0]
 800b51a:	4606      	mov	r6, r0
 800b51c:	460c      	mov	r4, r1
 800b51e:	b125      	cbz	r5, 800b52a <__swsetup_r+0x16>
 800b520:	69ab      	ldr	r3, [r5, #24]
 800b522:	b913      	cbnz	r3, 800b52a <__swsetup_r+0x16>
 800b524:	4628      	mov	r0, r5
 800b526:	f7ff f84b 	bl	800a5c0 <__sinit>
 800b52a:	4b2e      	ldr	r3, [pc, #184]	; (800b5e4 <__swsetup_r+0xd0>)
 800b52c:	429c      	cmp	r4, r3
 800b52e:	d10f      	bne.n	800b550 <__swsetup_r+0x3c>
 800b530:	686c      	ldr	r4, [r5, #4]
 800b532:	89a3      	ldrh	r3, [r4, #12]
 800b534:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b538:	0719      	lsls	r1, r3, #28
 800b53a:	d42c      	bmi.n	800b596 <__swsetup_r+0x82>
 800b53c:	06dd      	lsls	r5, r3, #27
 800b53e:	d411      	bmi.n	800b564 <__swsetup_r+0x50>
 800b540:	2309      	movs	r3, #9
 800b542:	6033      	str	r3, [r6, #0]
 800b544:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b548:	81a3      	strh	r3, [r4, #12]
 800b54a:	f04f 30ff 	mov.w	r0, #4294967295
 800b54e:	e03e      	b.n	800b5ce <__swsetup_r+0xba>
 800b550:	4b25      	ldr	r3, [pc, #148]	; (800b5e8 <__swsetup_r+0xd4>)
 800b552:	429c      	cmp	r4, r3
 800b554:	d101      	bne.n	800b55a <__swsetup_r+0x46>
 800b556:	68ac      	ldr	r4, [r5, #8]
 800b558:	e7eb      	b.n	800b532 <__swsetup_r+0x1e>
 800b55a:	4b24      	ldr	r3, [pc, #144]	; (800b5ec <__swsetup_r+0xd8>)
 800b55c:	429c      	cmp	r4, r3
 800b55e:	bf08      	it	eq
 800b560:	68ec      	ldreq	r4, [r5, #12]
 800b562:	e7e6      	b.n	800b532 <__swsetup_r+0x1e>
 800b564:	0758      	lsls	r0, r3, #29
 800b566:	d512      	bpl.n	800b58e <__swsetup_r+0x7a>
 800b568:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b56a:	b141      	cbz	r1, 800b57e <__swsetup_r+0x6a>
 800b56c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b570:	4299      	cmp	r1, r3
 800b572:	d002      	beq.n	800b57a <__swsetup_r+0x66>
 800b574:	4630      	mov	r0, r6
 800b576:	f7fd fbe3 	bl	8008d40 <_free_r>
 800b57a:	2300      	movs	r3, #0
 800b57c:	6363      	str	r3, [r4, #52]	; 0x34
 800b57e:	89a3      	ldrh	r3, [r4, #12]
 800b580:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b584:	81a3      	strh	r3, [r4, #12]
 800b586:	2300      	movs	r3, #0
 800b588:	6063      	str	r3, [r4, #4]
 800b58a:	6923      	ldr	r3, [r4, #16]
 800b58c:	6023      	str	r3, [r4, #0]
 800b58e:	89a3      	ldrh	r3, [r4, #12]
 800b590:	f043 0308 	orr.w	r3, r3, #8
 800b594:	81a3      	strh	r3, [r4, #12]
 800b596:	6923      	ldr	r3, [r4, #16]
 800b598:	b94b      	cbnz	r3, 800b5ae <__swsetup_r+0x9a>
 800b59a:	89a3      	ldrh	r3, [r4, #12]
 800b59c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b5a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5a4:	d003      	beq.n	800b5ae <__swsetup_r+0x9a>
 800b5a6:	4621      	mov	r1, r4
 800b5a8:	4630      	mov	r0, r6
 800b5aa:	f000 f959 	bl	800b860 <__smakebuf_r>
 800b5ae:	89a0      	ldrh	r0, [r4, #12]
 800b5b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b5b4:	f010 0301 	ands.w	r3, r0, #1
 800b5b8:	d00a      	beq.n	800b5d0 <__swsetup_r+0xbc>
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	60a3      	str	r3, [r4, #8]
 800b5be:	6963      	ldr	r3, [r4, #20]
 800b5c0:	425b      	negs	r3, r3
 800b5c2:	61a3      	str	r3, [r4, #24]
 800b5c4:	6923      	ldr	r3, [r4, #16]
 800b5c6:	b943      	cbnz	r3, 800b5da <__swsetup_r+0xc6>
 800b5c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b5cc:	d1ba      	bne.n	800b544 <__swsetup_r+0x30>
 800b5ce:	bd70      	pop	{r4, r5, r6, pc}
 800b5d0:	0781      	lsls	r1, r0, #30
 800b5d2:	bf58      	it	pl
 800b5d4:	6963      	ldrpl	r3, [r4, #20]
 800b5d6:	60a3      	str	r3, [r4, #8]
 800b5d8:	e7f4      	b.n	800b5c4 <__swsetup_r+0xb0>
 800b5da:	2000      	movs	r0, #0
 800b5dc:	e7f7      	b.n	800b5ce <__swsetup_r+0xba>
 800b5de:	bf00      	nop
 800b5e0:	20000014 	.word	0x20000014
 800b5e4:	0800c144 	.word	0x0800c144
 800b5e8:	0800c164 	.word	0x0800c164
 800b5ec:	0800c124 	.word	0x0800c124

0800b5f0 <__assert_func>:
 800b5f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b5f2:	4614      	mov	r4, r2
 800b5f4:	461a      	mov	r2, r3
 800b5f6:	4b09      	ldr	r3, [pc, #36]	; (800b61c <__assert_func+0x2c>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	4605      	mov	r5, r0
 800b5fc:	68d8      	ldr	r0, [r3, #12]
 800b5fe:	b14c      	cbz	r4, 800b614 <__assert_func+0x24>
 800b600:	4b07      	ldr	r3, [pc, #28]	; (800b620 <__assert_func+0x30>)
 800b602:	9100      	str	r1, [sp, #0]
 800b604:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b608:	4906      	ldr	r1, [pc, #24]	; (800b624 <__assert_func+0x34>)
 800b60a:	462b      	mov	r3, r5
 800b60c:	f000 f8e0 	bl	800b7d0 <fiprintf>
 800b610:	f000 f9d7 	bl	800b9c2 <abort>
 800b614:	4b04      	ldr	r3, [pc, #16]	; (800b628 <__assert_func+0x38>)
 800b616:	461c      	mov	r4, r3
 800b618:	e7f3      	b.n	800b602 <__assert_func+0x12>
 800b61a:	bf00      	nop
 800b61c:	20000014 	.word	0x20000014
 800b620:	0800c2f5 	.word	0x0800c2f5
 800b624:	0800c302 	.word	0x0800c302
 800b628:	0800c330 	.word	0x0800c330

0800b62c <_close_r>:
 800b62c:	b538      	push	{r3, r4, r5, lr}
 800b62e:	4d06      	ldr	r5, [pc, #24]	; (800b648 <_close_r+0x1c>)
 800b630:	2300      	movs	r3, #0
 800b632:	4604      	mov	r4, r0
 800b634:	4608      	mov	r0, r1
 800b636:	602b      	str	r3, [r5, #0]
 800b638:	f7f6 ff03 	bl	8002442 <_close>
 800b63c:	1c43      	adds	r3, r0, #1
 800b63e:	d102      	bne.n	800b646 <_close_r+0x1a>
 800b640:	682b      	ldr	r3, [r5, #0]
 800b642:	b103      	cbz	r3, 800b646 <_close_r+0x1a>
 800b644:	6023      	str	r3, [r4, #0]
 800b646:	bd38      	pop	{r3, r4, r5, pc}
 800b648:	2000429c 	.word	0x2000429c

0800b64c <__sflush_r>:
 800b64c:	898a      	ldrh	r2, [r1, #12]
 800b64e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b652:	4605      	mov	r5, r0
 800b654:	0710      	lsls	r0, r2, #28
 800b656:	460c      	mov	r4, r1
 800b658:	d458      	bmi.n	800b70c <__sflush_r+0xc0>
 800b65a:	684b      	ldr	r3, [r1, #4]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	dc05      	bgt.n	800b66c <__sflush_r+0x20>
 800b660:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b662:	2b00      	cmp	r3, #0
 800b664:	dc02      	bgt.n	800b66c <__sflush_r+0x20>
 800b666:	2000      	movs	r0, #0
 800b668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b66c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b66e:	2e00      	cmp	r6, #0
 800b670:	d0f9      	beq.n	800b666 <__sflush_r+0x1a>
 800b672:	2300      	movs	r3, #0
 800b674:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b678:	682f      	ldr	r7, [r5, #0]
 800b67a:	602b      	str	r3, [r5, #0]
 800b67c:	d032      	beq.n	800b6e4 <__sflush_r+0x98>
 800b67e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b680:	89a3      	ldrh	r3, [r4, #12]
 800b682:	075a      	lsls	r2, r3, #29
 800b684:	d505      	bpl.n	800b692 <__sflush_r+0x46>
 800b686:	6863      	ldr	r3, [r4, #4]
 800b688:	1ac0      	subs	r0, r0, r3
 800b68a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b68c:	b10b      	cbz	r3, 800b692 <__sflush_r+0x46>
 800b68e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b690:	1ac0      	subs	r0, r0, r3
 800b692:	2300      	movs	r3, #0
 800b694:	4602      	mov	r2, r0
 800b696:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b698:	6a21      	ldr	r1, [r4, #32]
 800b69a:	4628      	mov	r0, r5
 800b69c:	47b0      	blx	r6
 800b69e:	1c43      	adds	r3, r0, #1
 800b6a0:	89a3      	ldrh	r3, [r4, #12]
 800b6a2:	d106      	bne.n	800b6b2 <__sflush_r+0x66>
 800b6a4:	6829      	ldr	r1, [r5, #0]
 800b6a6:	291d      	cmp	r1, #29
 800b6a8:	d82c      	bhi.n	800b704 <__sflush_r+0xb8>
 800b6aa:	4a2a      	ldr	r2, [pc, #168]	; (800b754 <__sflush_r+0x108>)
 800b6ac:	40ca      	lsrs	r2, r1
 800b6ae:	07d6      	lsls	r6, r2, #31
 800b6b0:	d528      	bpl.n	800b704 <__sflush_r+0xb8>
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	6062      	str	r2, [r4, #4]
 800b6b6:	04d9      	lsls	r1, r3, #19
 800b6b8:	6922      	ldr	r2, [r4, #16]
 800b6ba:	6022      	str	r2, [r4, #0]
 800b6bc:	d504      	bpl.n	800b6c8 <__sflush_r+0x7c>
 800b6be:	1c42      	adds	r2, r0, #1
 800b6c0:	d101      	bne.n	800b6c6 <__sflush_r+0x7a>
 800b6c2:	682b      	ldr	r3, [r5, #0]
 800b6c4:	b903      	cbnz	r3, 800b6c8 <__sflush_r+0x7c>
 800b6c6:	6560      	str	r0, [r4, #84]	; 0x54
 800b6c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b6ca:	602f      	str	r7, [r5, #0]
 800b6cc:	2900      	cmp	r1, #0
 800b6ce:	d0ca      	beq.n	800b666 <__sflush_r+0x1a>
 800b6d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b6d4:	4299      	cmp	r1, r3
 800b6d6:	d002      	beq.n	800b6de <__sflush_r+0x92>
 800b6d8:	4628      	mov	r0, r5
 800b6da:	f7fd fb31 	bl	8008d40 <_free_r>
 800b6de:	2000      	movs	r0, #0
 800b6e0:	6360      	str	r0, [r4, #52]	; 0x34
 800b6e2:	e7c1      	b.n	800b668 <__sflush_r+0x1c>
 800b6e4:	6a21      	ldr	r1, [r4, #32]
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	4628      	mov	r0, r5
 800b6ea:	47b0      	blx	r6
 800b6ec:	1c41      	adds	r1, r0, #1
 800b6ee:	d1c7      	bne.n	800b680 <__sflush_r+0x34>
 800b6f0:	682b      	ldr	r3, [r5, #0]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d0c4      	beq.n	800b680 <__sflush_r+0x34>
 800b6f6:	2b1d      	cmp	r3, #29
 800b6f8:	d001      	beq.n	800b6fe <__sflush_r+0xb2>
 800b6fa:	2b16      	cmp	r3, #22
 800b6fc:	d101      	bne.n	800b702 <__sflush_r+0xb6>
 800b6fe:	602f      	str	r7, [r5, #0]
 800b700:	e7b1      	b.n	800b666 <__sflush_r+0x1a>
 800b702:	89a3      	ldrh	r3, [r4, #12]
 800b704:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b708:	81a3      	strh	r3, [r4, #12]
 800b70a:	e7ad      	b.n	800b668 <__sflush_r+0x1c>
 800b70c:	690f      	ldr	r7, [r1, #16]
 800b70e:	2f00      	cmp	r7, #0
 800b710:	d0a9      	beq.n	800b666 <__sflush_r+0x1a>
 800b712:	0793      	lsls	r3, r2, #30
 800b714:	680e      	ldr	r6, [r1, #0]
 800b716:	bf08      	it	eq
 800b718:	694b      	ldreq	r3, [r1, #20]
 800b71a:	600f      	str	r7, [r1, #0]
 800b71c:	bf18      	it	ne
 800b71e:	2300      	movne	r3, #0
 800b720:	eba6 0807 	sub.w	r8, r6, r7
 800b724:	608b      	str	r3, [r1, #8]
 800b726:	f1b8 0f00 	cmp.w	r8, #0
 800b72a:	dd9c      	ble.n	800b666 <__sflush_r+0x1a>
 800b72c:	6a21      	ldr	r1, [r4, #32]
 800b72e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b730:	4643      	mov	r3, r8
 800b732:	463a      	mov	r2, r7
 800b734:	4628      	mov	r0, r5
 800b736:	47b0      	blx	r6
 800b738:	2800      	cmp	r0, #0
 800b73a:	dc06      	bgt.n	800b74a <__sflush_r+0xfe>
 800b73c:	89a3      	ldrh	r3, [r4, #12]
 800b73e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b742:	81a3      	strh	r3, [r4, #12]
 800b744:	f04f 30ff 	mov.w	r0, #4294967295
 800b748:	e78e      	b.n	800b668 <__sflush_r+0x1c>
 800b74a:	4407      	add	r7, r0
 800b74c:	eba8 0800 	sub.w	r8, r8, r0
 800b750:	e7e9      	b.n	800b726 <__sflush_r+0xda>
 800b752:	bf00      	nop
 800b754:	20400001 	.word	0x20400001

0800b758 <_fflush_r>:
 800b758:	b538      	push	{r3, r4, r5, lr}
 800b75a:	690b      	ldr	r3, [r1, #16]
 800b75c:	4605      	mov	r5, r0
 800b75e:	460c      	mov	r4, r1
 800b760:	b913      	cbnz	r3, 800b768 <_fflush_r+0x10>
 800b762:	2500      	movs	r5, #0
 800b764:	4628      	mov	r0, r5
 800b766:	bd38      	pop	{r3, r4, r5, pc}
 800b768:	b118      	cbz	r0, 800b772 <_fflush_r+0x1a>
 800b76a:	6983      	ldr	r3, [r0, #24]
 800b76c:	b90b      	cbnz	r3, 800b772 <_fflush_r+0x1a>
 800b76e:	f7fe ff27 	bl	800a5c0 <__sinit>
 800b772:	4b14      	ldr	r3, [pc, #80]	; (800b7c4 <_fflush_r+0x6c>)
 800b774:	429c      	cmp	r4, r3
 800b776:	d11b      	bne.n	800b7b0 <_fflush_r+0x58>
 800b778:	686c      	ldr	r4, [r5, #4]
 800b77a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d0ef      	beq.n	800b762 <_fflush_r+0xa>
 800b782:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b784:	07d0      	lsls	r0, r2, #31
 800b786:	d404      	bmi.n	800b792 <_fflush_r+0x3a>
 800b788:	0599      	lsls	r1, r3, #22
 800b78a:	d402      	bmi.n	800b792 <_fflush_r+0x3a>
 800b78c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b78e:	f7fe ffba 	bl	800a706 <__retarget_lock_acquire_recursive>
 800b792:	4628      	mov	r0, r5
 800b794:	4621      	mov	r1, r4
 800b796:	f7ff ff59 	bl	800b64c <__sflush_r>
 800b79a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b79c:	07da      	lsls	r2, r3, #31
 800b79e:	4605      	mov	r5, r0
 800b7a0:	d4e0      	bmi.n	800b764 <_fflush_r+0xc>
 800b7a2:	89a3      	ldrh	r3, [r4, #12]
 800b7a4:	059b      	lsls	r3, r3, #22
 800b7a6:	d4dd      	bmi.n	800b764 <_fflush_r+0xc>
 800b7a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b7aa:	f7fe ffad 	bl	800a708 <__retarget_lock_release_recursive>
 800b7ae:	e7d9      	b.n	800b764 <_fflush_r+0xc>
 800b7b0:	4b05      	ldr	r3, [pc, #20]	; (800b7c8 <_fflush_r+0x70>)
 800b7b2:	429c      	cmp	r4, r3
 800b7b4:	d101      	bne.n	800b7ba <_fflush_r+0x62>
 800b7b6:	68ac      	ldr	r4, [r5, #8]
 800b7b8:	e7df      	b.n	800b77a <_fflush_r+0x22>
 800b7ba:	4b04      	ldr	r3, [pc, #16]	; (800b7cc <_fflush_r+0x74>)
 800b7bc:	429c      	cmp	r4, r3
 800b7be:	bf08      	it	eq
 800b7c0:	68ec      	ldreq	r4, [r5, #12]
 800b7c2:	e7da      	b.n	800b77a <_fflush_r+0x22>
 800b7c4:	0800c144 	.word	0x0800c144
 800b7c8:	0800c164 	.word	0x0800c164
 800b7cc:	0800c124 	.word	0x0800c124

0800b7d0 <fiprintf>:
 800b7d0:	b40e      	push	{r1, r2, r3}
 800b7d2:	b503      	push	{r0, r1, lr}
 800b7d4:	4601      	mov	r1, r0
 800b7d6:	ab03      	add	r3, sp, #12
 800b7d8:	4805      	ldr	r0, [pc, #20]	; (800b7f0 <fiprintf+0x20>)
 800b7da:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7de:	6800      	ldr	r0, [r0, #0]
 800b7e0:	9301      	str	r3, [sp, #4]
 800b7e2:	f7ff fcbf 	bl	800b164 <_vfiprintf_r>
 800b7e6:	b002      	add	sp, #8
 800b7e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b7ec:	b003      	add	sp, #12
 800b7ee:	4770      	bx	lr
 800b7f0:	20000014 	.word	0x20000014

0800b7f4 <_lseek_r>:
 800b7f4:	b538      	push	{r3, r4, r5, lr}
 800b7f6:	4d07      	ldr	r5, [pc, #28]	; (800b814 <_lseek_r+0x20>)
 800b7f8:	4604      	mov	r4, r0
 800b7fa:	4608      	mov	r0, r1
 800b7fc:	4611      	mov	r1, r2
 800b7fe:	2200      	movs	r2, #0
 800b800:	602a      	str	r2, [r5, #0]
 800b802:	461a      	mov	r2, r3
 800b804:	f7f6 fe44 	bl	8002490 <_lseek>
 800b808:	1c43      	adds	r3, r0, #1
 800b80a:	d102      	bne.n	800b812 <_lseek_r+0x1e>
 800b80c:	682b      	ldr	r3, [r5, #0]
 800b80e:	b103      	cbz	r3, 800b812 <_lseek_r+0x1e>
 800b810:	6023      	str	r3, [r4, #0]
 800b812:	bd38      	pop	{r3, r4, r5, pc}
 800b814:	2000429c 	.word	0x2000429c

0800b818 <__swhatbuf_r>:
 800b818:	b570      	push	{r4, r5, r6, lr}
 800b81a:	460e      	mov	r6, r1
 800b81c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b820:	2900      	cmp	r1, #0
 800b822:	b096      	sub	sp, #88	; 0x58
 800b824:	4614      	mov	r4, r2
 800b826:	461d      	mov	r5, r3
 800b828:	da07      	bge.n	800b83a <__swhatbuf_r+0x22>
 800b82a:	2300      	movs	r3, #0
 800b82c:	602b      	str	r3, [r5, #0]
 800b82e:	89b3      	ldrh	r3, [r6, #12]
 800b830:	061a      	lsls	r2, r3, #24
 800b832:	d410      	bmi.n	800b856 <__swhatbuf_r+0x3e>
 800b834:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b838:	e00e      	b.n	800b858 <__swhatbuf_r+0x40>
 800b83a:	466a      	mov	r2, sp
 800b83c:	f000 f8c8 	bl	800b9d0 <_fstat_r>
 800b840:	2800      	cmp	r0, #0
 800b842:	dbf2      	blt.n	800b82a <__swhatbuf_r+0x12>
 800b844:	9a01      	ldr	r2, [sp, #4]
 800b846:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b84a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b84e:	425a      	negs	r2, r3
 800b850:	415a      	adcs	r2, r3
 800b852:	602a      	str	r2, [r5, #0]
 800b854:	e7ee      	b.n	800b834 <__swhatbuf_r+0x1c>
 800b856:	2340      	movs	r3, #64	; 0x40
 800b858:	2000      	movs	r0, #0
 800b85a:	6023      	str	r3, [r4, #0]
 800b85c:	b016      	add	sp, #88	; 0x58
 800b85e:	bd70      	pop	{r4, r5, r6, pc}

0800b860 <__smakebuf_r>:
 800b860:	898b      	ldrh	r3, [r1, #12]
 800b862:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b864:	079d      	lsls	r5, r3, #30
 800b866:	4606      	mov	r6, r0
 800b868:	460c      	mov	r4, r1
 800b86a:	d507      	bpl.n	800b87c <__smakebuf_r+0x1c>
 800b86c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b870:	6023      	str	r3, [r4, #0]
 800b872:	6123      	str	r3, [r4, #16]
 800b874:	2301      	movs	r3, #1
 800b876:	6163      	str	r3, [r4, #20]
 800b878:	b002      	add	sp, #8
 800b87a:	bd70      	pop	{r4, r5, r6, pc}
 800b87c:	ab01      	add	r3, sp, #4
 800b87e:	466a      	mov	r2, sp
 800b880:	f7ff ffca 	bl	800b818 <__swhatbuf_r>
 800b884:	9900      	ldr	r1, [sp, #0]
 800b886:	4605      	mov	r5, r0
 800b888:	4630      	mov	r0, r6
 800b88a:	f7fd faa9 	bl	8008de0 <_malloc_r>
 800b88e:	b948      	cbnz	r0, 800b8a4 <__smakebuf_r+0x44>
 800b890:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b894:	059a      	lsls	r2, r3, #22
 800b896:	d4ef      	bmi.n	800b878 <__smakebuf_r+0x18>
 800b898:	f023 0303 	bic.w	r3, r3, #3
 800b89c:	f043 0302 	orr.w	r3, r3, #2
 800b8a0:	81a3      	strh	r3, [r4, #12]
 800b8a2:	e7e3      	b.n	800b86c <__smakebuf_r+0xc>
 800b8a4:	4b0d      	ldr	r3, [pc, #52]	; (800b8dc <__smakebuf_r+0x7c>)
 800b8a6:	62b3      	str	r3, [r6, #40]	; 0x28
 800b8a8:	89a3      	ldrh	r3, [r4, #12]
 800b8aa:	6020      	str	r0, [r4, #0]
 800b8ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8b0:	81a3      	strh	r3, [r4, #12]
 800b8b2:	9b00      	ldr	r3, [sp, #0]
 800b8b4:	6163      	str	r3, [r4, #20]
 800b8b6:	9b01      	ldr	r3, [sp, #4]
 800b8b8:	6120      	str	r0, [r4, #16]
 800b8ba:	b15b      	cbz	r3, 800b8d4 <__smakebuf_r+0x74>
 800b8bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8c0:	4630      	mov	r0, r6
 800b8c2:	f000 f897 	bl	800b9f4 <_isatty_r>
 800b8c6:	b128      	cbz	r0, 800b8d4 <__smakebuf_r+0x74>
 800b8c8:	89a3      	ldrh	r3, [r4, #12]
 800b8ca:	f023 0303 	bic.w	r3, r3, #3
 800b8ce:	f043 0301 	orr.w	r3, r3, #1
 800b8d2:	81a3      	strh	r3, [r4, #12]
 800b8d4:	89a0      	ldrh	r0, [r4, #12]
 800b8d6:	4305      	orrs	r5, r0
 800b8d8:	81a5      	strh	r5, [r4, #12]
 800b8da:	e7cd      	b.n	800b878 <__smakebuf_r+0x18>
 800b8dc:	0800a559 	.word	0x0800a559

0800b8e0 <__ascii_mbtowc>:
 800b8e0:	b082      	sub	sp, #8
 800b8e2:	b901      	cbnz	r1, 800b8e6 <__ascii_mbtowc+0x6>
 800b8e4:	a901      	add	r1, sp, #4
 800b8e6:	b142      	cbz	r2, 800b8fa <__ascii_mbtowc+0x1a>
 800b8e8:	b14b      	cbz	r3, 800b8fe <__ascii_mbtowc+0x1e>
 800b8ea:	7813      	ldrb	r3, [r2, #0]
 800b8ec:	600b      	str	r3, [r1, #0]
 800b8ee:	7812      	ldrb	r2, [r2, #0]
 800b8f0:	1e10      	subs	r0, r2, #0
 800b8f2:	bf18      	it	ne
 800b8f4:	2001      	movne	r0, #1
 800b8f6:	b002      	add	sp, #8
 800b8f8:	4770      	bx	lr
 800b8fa:	4610      	mov	r0, r2
 800b8fc:	e7fb      	b.n	800b8f6 <__ascii_mbtowc+0x16>
 800b8fe:	f06f 0001 	mvn.w	r0, #1
 800b902:	e7f8      	b.n	800b8f6 <__ascii_mbtowc+0x16>

0800b904 <memmove>:
 800b904:	4288      	cmp	r0, r1
 800b906:	b510      	push	{r4, lr}
 800b908:	eb01 0402 	add.w	r4, r1, r2
 800b90c:	d902      	bls.n	800b914 <memmove+0x10>
 800b90e:	4284      	cmp	r4, r0
 800b910:	4623      	mov	r3, r4
 800b912:	d807      	bhi.n	800b924 <memmove+0x20>
 800b914:	1e43      	subs	r3, r0, #1
 800b916:	42a1      	cmp	r1, r4
 800b918:	d008      	beq.n	800b92c <memmove+0x28>
 800b91a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b91e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b922:	e7f8      	b.n	800b916 <memmove+0x12>
 800b924:	4402      	add	r2, r0
 800b926:	4601      	mov	r1, r0
 800b928:	428a      	cmp	r2, r1
 800b92a:	d100      	bne.n	800b92e <memmove+0x2a>
 800b92c:	bd10      	pop	{r4, pc}
 800b92e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b932:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b936:	e7f7      	b.n	800b928 <memmove+0x24>

0800b938 <_realloc_r>:
 800b938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b93a:	4607      	mov	r7, r0
 800b93c:	4614      	mov	r4, r2
 800b93e:	460e      	mov	r6, r1
 800b940:	b921      	cbnz	r1, 800b94c <_realloc_r+0x14>
 800b942:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b946:	4611      	mov	r1, r2
 800b948:	f7fd ba4a 	b.w	8008de0 <_malloc_r>
 800b94c:	b922      	cbnz	r2, 800b958 <_realloc_r+0x20>
 800b94e:	f7fd f9f7 	bl	8008d40 <_free_r>
 800b952:	4625      	mov	r5, r4
 800b954:	4628      	mov	r0, r5
 800b956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b958:	f000 f85c 	bl	800ba14 <_malloc_usable_size_r>
 800b95c:	42a0      	cmp	r0, r4
 800b95e:	d20f      	bcs.n	800b980 <_realloc_r+0x48>
 800b960:	4621      	mov	r1, r4
 800b962:	4638      	mov	r0, r7
 800b964:	f7fd fa3c 	bl	8008de0 <_malloc_r>
 800b968:	4605      	mov	r5, r0
 800b96a:	2800      	cmp	r0, #0
 800b96c:	d0f2      	beq.n	800b954 <_realloc_r+0x1c>
 800b96e:	4631      	mov	r1, r6
 800b970:	4622      	mov	r2, r4
 800b972:	f7fe feca 	bl	800a70a <memcpy>
 800b976:	4631      	mov	r1, r6
 800b978:	4638      	mov	r0, r7
 800b97a:	f7fd f9e1 	bl	8008d40 <_free_r>
 800b97e:	e7e9      	b.n	800b954 <_realloc_r+0x1c>
 800b980:	4635      	mov	r5, r6
 800b982:	e7e7      	b.n	800b954 <_realloc_r+0x1c>

0800b984 <_read_r>:
 800b984:	b538      	push	{r3, r4, r5, lr}
 800b986:	4d07      	ldr	r5, [pc, #28]	; (800b9a4 <_read_r+0x20>)
 800b988:	4604      	mov	r4, r0
 800b98a:	4608      	mov	r0, r1
 800b98c:	4611      	mov	r1, r2
 800b98e:	2200      	movs	r2, #0
 800b990:	602a      	str	r2, [r5, #0]
 800b992:	461a      	mov	r2, r3
 800b994:	f7f6 fd1c 	bl	80023d0 <_read>
 800b998:	1c43      	adds	r3, r0, #1
 800b99a:	d102      	bne.n	800b9a2 <_read_r+0x1e>
 800b99c:	682b      	ldr	r3, [r5, #0]
 800b99e:	b103      	cbz	r3, 800b9a2 <_read_r+0x1e>
 800b9a0:	6023      	str	r3, [r4, #0]
 800b9a2:	bd38      	pop	{r3, r4, r5, pc}
 800b9a4:	2000429c 	.word	0x2000429c

0800b9a8 <__ascii_wctomb>:
 800b9a8:	b149      	cbz	r1, 800b9be <__ascii_wctomb+0x16>
 800b9aa:	2aff      	cmp	r2, #255	; 0xff
 800b9ac:	bf85      	ittet	hi
 800b9ae:	238a      	movhi	r3, #138	; 0x8a
 800b9b0:	6003      	strhi	r3, [r0, #0]
 800b9b2:	700a      	strbls	r2, [r1, #0]
 800b9b4:	f04f 30ff 	movhi.w	r0, #4294967295
 800b9b8:	bf98      	it	ls
 800b9ba:	2001      	movls	r0, #1
 800b9bc:	4770      	bx	lr
 800b9be:	4608      	mov	r0, r1
 800b9c0:	4770      	bx	lr

0800b9c2 <abort>:
 800b9c2:	b508      	push	{r3, lr}
 800b9c4:	2006      	movs	r0, #6
 800b9c6:	f000 f855 	bl	800ba74 <raise>
 800b9ca:	2001      	movs	r0, #1
 800b9cc:	f7f6 fcf6 	bl	80023bc <_exit>

0800b9d0 <_fstat_r>:
 800b9d0:	b538      	push	{r3, r4, r5, lr}
 800b9d2:	4d07      	ldr	r5, [pc, #28]	; (800b9f0 <_fstat_r+0x20>)
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	4604      	mov	r4, r0
 800b9d8:	4608      	mov	r0, r1
 800b9da:	4611      	mov	r1, r2
 800b9dc:	602b      	str	r3, [r5, #0]
 800b9de:	f7f6 fd3c 	bl	800245a <_fstat>
 800b9e2:	1c43      	adds	r3, r0, #1
 800b9e4:	d102      	bne.n	800b9ec <_fstat_r+0x1c>
 800b9e6:	682b      	ldr	r3, [r5, #0]
 800b9e8:	b103      	cbz	r3, 800b9ec <_fstat_r+0x1c>
 800b9ea:	6023      	str	r3, [r4, #0]
 800b9ec:	bd38      	pop	{r3, r4, r5, pc}
 800b9ee:	bf00      	nop
 800b9f0:	2000429c 	.word	0x2000429c

0800b9f4 <_isatty_r>:
 800b9f4:	b538      	push	{r3, r4, r5, lr}
 800b9f6:	4d06      	ldr	r5, [pc, #24]	; (800ba10 <_isatty_r+0x1c>)
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	4604      	mov	r4, r0
 800b9fc:	4608      	mov	r0, r1
 800b9fe:	602b      	str	r3, [r5, #0]
 800ba00:	f7f6 fd3b 	bl	800247a <_isatty>
 800ba04:	1c43      	adds	r3, r0, #1
 800ba06:	d102      	bne.n	800ba0e <_isatty_r+0x1a>
 800ba08:	682b      	ldr	r3, [r5, #0]
 800ba0a:	b103      	cbz	r3, 800ba0e <_isatty_r+0x1a>
 800ba0c:	6023      	str	r3, [r4, #0]
 800ba0e:	bd38      	pop	{r3, r4, r5, pc}
 800ba10:	2000429c 	.word	0x2000429c

0800ba14 <_malloc_usable_size_r>:
 800ba14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba18:	1f18      	subs	r0, r3, #4
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	bfbc      	itt	lt
 800ba1e:	580b      	ldrlt	r3, [r1, r0]
 800ba20:	18c0      	addlt	r0, r0, r3
 800ba22:	4770      	bx	lr

0800ba24 <_raise_r>:
 800ba24:	291f      	cmp	r1, #31
 800ba26:	b538      	push	{r3, r4, r5, lr}
 800ba28:	4604      	mov	r4, r0
 800ba2a:	460d      	mov	r5, r1
 800ba2c:	d904      	bls.n	800ba38 <_raise_r+0x14>
 800ba2e:	2316      	movs	r3, #22
 800ba30:	6003      	str	r3, [r0, #0]
 800ba32:	f04f 30ff 	mov.w	r0, #4294967295
 800ba36:	bd38      	pop	{r3, r4, r5, pc}
 800ba38:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ba3a:	b112      	cbz	r2, 800ba42 <_raise_r+0x1e>
 800ba3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ba40:	b94b      	cbnz	r3, 800ba56 <_raise_r+0x32>
 800ba42:	4620      	mov	r0, r4
 800ba44:	f000 f830 	bl	800baa8 <_getpid_r>
 800ba48:	462a      	mov	r2, r5
 800ba4a:	4601      	mov	r1, r0
 800ba4c:	4620      	mov	r0, r4
 800ba4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba52:	f000 b817 	b.w	800ba84 <_kill_r>
 800ba56:	2b01      	cmp	r3, #1
 800ba58:	d00a      	beq.n	800ba70 <_raise_r+0x4c>
 800ba5a:	1c59      	adds	r1, r3, #1
 800ba5c:	d103      	bne.n	800ba66 <_raise_r+0x42>
 800ba5e:	2316      	movs	r3, #22
 800ba60:	6003      	str	r3, [r0, #0]
 800ba62:	2001      	movs	r0, #1
 800ba64:	e7e7      	b.n	800ba36 <_raise_r+0x12>
 800ba66:	2400      	movs	r4, #0
 800ba68:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ba6c:	4628      	mov	r0, r5
 800ba6e:	4798      	blx	r3
 800ba70:	2000      	movs	r0, #0
 800ba72:	e7e0      	b.n	800ba36 <_raise_r+0x12>

0800ba74 <raise>:
 800ba74:	4b02      	ldr	r3, [pc, #8]	; (800ba80 <raise+0xc>)
 800ba76:	4601      	mov	r1, r0
 800ba78:	6818      	ldr	r0, [r3, #0]
 800ba7a:	f7ff bfd3 	b.w	800ba24 <_raise_r>
 800ba7e:	bf00      	nop
 800ba80:	20000014 	.word	0x20000014

0800ba84 <_kill_r>:
 800ba84:	b538      	push	{r3, r4, r5, lr}
 800ba86:	4d07      	ldr	r5, [pc, #28]	; (800baa4 <_kill_r+0x20>)
 800ba88:	2300      	movs	r3, #0
 800ba8a:	4604      	mov	r4, r0
 800ba8c:	4608      	mov	r0, r1
 800ba8e:	4611      	mov	r1, r2
 800ba90:	602b      	str	r3, [r5, #0]
 800ba92:	f7f6 fc83 	bl	800239c <_kill>
 800ba96:	1c43      	adds	r3, r0, #1
 800ba98:	d102      	bne.n	800baa0 <_kill_r+0x1c>
 800ba9a:	682b      	ldr	r3, [r5, #0]
 800ba9c:	b103      	cbz	r3, 800baa0 <_kill_r+0x1c>
 800ba9e:	6023      	str	r3, [r4, #0]
 800baa0:	bd38      	pop	{r3, r4, r5, pc}
 800baa2:	bf00      	nop
 800baa4:	2000429c 	.word	0x2000429c

0800baa8 <_getpid_r>:
 800baa8:	f7f6 bc70 	b.w	800238c <_getpid>

0800baac <_init>:
 800baac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baae:	bf00      	nop
 800bab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bab2:	bc08      	pop	{r3}
 800bab4:	469e      	mov	lr, r3
 800bab6:	4770      	bx	lr

0800bab8 <_fini>:
 800bab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baba:	bf00      	nop
 800babc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800babe:	bc08      	pop	{r3}
 800bac0:	469e      	mov	lr, r3
 800bac2:	4770      	bx	lr
